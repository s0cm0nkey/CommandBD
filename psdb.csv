"Command","Description","Syntax","Parameters","Links","Category","Tags"
"%","Loop through each item in the pipeline "," ForEach-Object [-process] <i>ScriptBlock</i>[] [-inputObject <i>psobject</i>]
 [-begin <i>scriptblock</i>] [-end <i>scriptblock</i>] [-Parallel] [-ThrottleLimit <i>n</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/foreach-object.html","System Utility","Command Execution, Scripting"
"ForEach-Object","Loop through each item in the pipeline "," ForEach-Object [-process] <i>ScriptBlock</i>[] [-inputObject <i>psobject</i>]
 [-begin <i>scriptblock</i>] [-end <i>scriptblock</i>] [-Parallel] [-ThrottleLimit <i>n</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/foreach-object.html","System Utility","Command Execution, Scripting"
"?","Filter input from the pipeline."," Where-Object [-filterScript] {<i>scriptblock</i>}
 [-inputObject <i>psobject</i>] [CommonParameters]
 Key
 <pre>Syntax
 <i>command</i> | <b>Where</b> <i>test1</i> [<i>conjunction test2</i>] 
 Key
 <p class=""space""><a href=""syntax-regex.html"">PowerShell Syntax - Regular Expressions</a><br>
"," -FilterScript <i>scriptblock</i>
 An expression that resolves to a Boolean (TRUE/FALSE) value.
 This will determine which input objects will be passed along the command pipeline.
 -inputObject <i>psobject</i>
 The objects to be filtered. Typically objects are passed through the pipeline.
 When the -InputObject parameter is used to submit a collection of items,
 Where-Object receives one object that represents the collection.
 Because one collection object cannot be filtered, Where-Object returns the entire collection unchanged.
 To convert multiple items, pipe them to Where-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 <p>The '?' symbol and Where are both aliases for Where-Object. 
 Key
 <i>conjunction</i> Any of the following: (logical boolean operators) 
 -and, -or (Logical or), -bor (Bitwise or), -band (Bitwise and), -xor 
 <i>Test1</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 <i>Test2</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 comparison operators
","https://ss64.com/ps/where-object.html","method             ","Command Execution, Scripting"
"Where-Object","Filter input from the pipeline."," Where-Object [-filterScript] {<i>scriptblock</i>}
 [-inputObject <i>psobject</i>] [CommonParameters]
 Key
 <pre>Syntax
 <i>command</i> | <b>Where</b> <i>test1</i> [<i>conjunction test2</i>] 
 Key
 <p class=""space""><a href=""syntax-regex.html"">PowerShell Syntax - Regular Expressions</a><br>
"," -FilterScript <i>scriptblock</i>
 An expression that resolves to a Boolean (TRUE/FALSE) value.
 This will determine which input objects will be passed along the command pipeline.
 -inputObject <i>psobject</i>
 The objects to be filtered. Typically objects are passed through the pipeline.
 When the -InputObject parameter is used to submit a collection of items,
 Where-Object receives one object that represents the collection.
 Because one collection object cannot be filtered, Where-Object returns the entire collection unchanged.
 To convert multiple items, pipe them to Where-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 <p>The '?' symbol and Where are both aliases for Where-Object. 
 Key
 <i>conjunction</i> Any of the following: (logical boolean operators) 
 -and, -or (Logical or), -bor (Bitwise or), -band (Bitwise and), -xor 
 <i>Test1</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 <i>Test2</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 comparison operators
","https://ss64.com/ps/where-object.html","method             ","Command Execution, Scripting"
"Get-Acl","Get permission settings for a file or registry key."," get-acl [[-Path] <i>path </i>[] ] [-Filter <i>String</i>]
 [-Include <i>String</i>] [-Exclude <i>String</i>]
 [-Audit []] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>path</i> The path to the item {may be piped}
 -Filter <i>String</i> Filter elements as required and supported by providers
 -Include <i>String</i> Item(s) upon which Get-acl will act, wildcards are permitted
 -Exclude <i>String</i> Item(s) upon which Get-acl is not to act
 -Audit Retrieve audit data for this item from the System ACL
 -UseTransaction Include the command in the active transaction.
","https://ss64.com/ps/get-acl.html","Enumeration","ACL"
"Set-Acl","Set permissions."," Set-Acl [-path] <i>string</i>[] [-aclObject] <i>ObjectSecurity</i>
 [-Include <i>String</i>] [-Exclude <i>String</i>]
 [-filter <i>string</i>] [-passThru] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>path</i>
 Path to the item to be changed {accepts wildcards}
 If a security object is passed to Set-Acl (either via -AclObject 
 or by passing an object from Get-Acl), and -Path is omitted,
 Set-Acl will use the path that is included in the security object.
 -AclObject <i>ObjectSecurity</i>
 An ACL with the desired property values.
 Often the output of a Get-Acl command saved in a variable.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 This qualifies the -Path parameter and normally includes a wildcard.
 
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 This qualifies the -Path parameter and normally includes a wildcard.
 -PassThru 
 Pass the object created by Set-Acl through the pipeline.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-acl.html","System Administration","ACL"
"Get-Alias","Return alias names for Cmdlets."," Get-Alias [ [-Name] <i>string</i>[] ]
 [-scope <i>string</i>] [-exclude <i>string</i>[] ] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Alias [-Definition <i>string</i>[]]
 [-scope <i>string</i>] [-exclude <i>string</i>[] ] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>[]
 The alias to retrieve. By default, all aliases defined for the current session.
 (the -Name is optional)
 -Definition <i>string</i>[] Get the aliases for the specified item.
 Enter the name of a cmdlet, function, script, file, or executable. The alias object contains a property called 'Definition' which
 holds this information for each Alias.
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope.
 -exclude <i>string</i>[]
 Omit the specified items, wildcards allowed e.g. *ms*&quot;
","https://ss64.com/ps/get-alias.html","Enumeration, System Utility, Command Obfuscation","Alias"
"gal","Return alias names for Cmdlets."," Get-Alias [ [-Name] <i>string</i>[] ]
 [-scope <i>string</i>] [-exclude <i>string</i>[] ] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Alias [-Definition <i>string</i>[]]
 [-scope <i>string</i>] [-exclude <i>string</i>[] ] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>[]
 The alias to retrieve. By default, all aliases defined for the current session.
 (the -Name is optional)
 -Definition <i>string</i>[] Get the aliases for the specified item.
 Enter the name of a cmdlet, function, script, file, or executable. The alias object contains a property called 'Definition' which
 holds this information for each Alias.
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope.
 -exclude <i>string</i>[]
 Omit the specified items, wildcards allowed e.g. *ms*&quot;
","https://ss64.com/ps/get-alias.html","Enumeration, System Utility, Command Obfuscation","Alias"
"Export-Alias","Export currently defined aliases to a file."," Export-Alias [<b>-path</b>] <i>string</i> [[-name] <i>string</i>[]]
 [-as {<u>Csv</u> | Script}] [-append] [-description <i>string</i>]
 [-scope <i>string</i>] [-force] [-passThru] [-noClobber]
 [-whatIf] [-confirm] [CommonParameters]
"," -path <i>string</i>
 The path to the file where the alias information will be stored.
 Wildcards are permitted, but the resulting path value must resolve to a  single file name. This parameter is required.
 -name <i>string</i>
 The name(s) of the aliases to export.
 Separate multiple names with commas, (default=all aliases)
 By default, Export-Alias exports all aliases in the session or scope.
 
 -passThru 
 Pass the object created by this cmdlet along the pipeline.
 
 -as <i>ExportAliasFormat</i>
 Format output as comma-separated (<u>CSV</u>) or (Script).
 Script will create a Set-Alias command for each exported alias. If the
 output file is named with a .ps1 filename extension, it can be run
 as a script to add the aliases to any session.
 -append
 Append output to the specified file, rather than overwrite.
 
 -description <i>string</i>
 Add a description to the exported file. The description appears
 at the top of the file, following the header information. It is
 preceded by a # symbol.
 
 -scope <i>string</i>
 Either a named scope: global, local, or script; or a number
 to indicate the scope level. Scope = 0 = current scope
 Increasing the scope value by 1 will increate the scope to include the
 parent scope of the current scope. 
 
 -noClobber
 Do not overwrite an existing file, -Append will take precendence over -NoClobber.
 
 -force
 Override the read-only attribute on the output file.
 By default, Export-Alias will overwrite files without warning, unless the
 read-only or hidden attribute is set or -NoClobber is used.
 The -NoClobber parameter takes precedence over -Force when both are used in a command.  The Force parameter cannot force Export-Alias to overwrite files with the hidden attribute.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 
","https://ss64.com/ps/export-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"epal","Export currently defined aliases to a file."," Export-Alias [<b>-path</b>] <i>string</i> [[-name] <i>string</i>[]]
 [-as {<u>Csv</u> | Script}] [-append] [-description <i>string</i>]
 [-scope <i>string</i>] [-force] [-passThru] [-noClobber]
 [-whatIf] [-confirm] [CommonParameters]
"," -path <i>string</i>
 The path to the file where the alias information will be stored.
 Wildcards are permitted, but the resulting path value must resolve to a  single file name. This parameter is required.
 -name <i>string</i>
 The name(s) of the aliases to export.
 Separate multiple names with commas, (default=all aliases)
 By default, Export-Alias exports all aliases in the session or scope.
 
 -passThru 
 Pass the object created by this cmdlet along the pipeline.
 
 -as <i>ExportAliasFormat</i>
 Format output as comma-separated (<u>CSV</u>) or (Script).
 Script will create a Set-Alias command for each exported alias. If the
 output file is named with a .ps1 filename extension, it can be run
 as a script to add the aliases to any session.
 -append
 Append output to the specified file, rather than overwrite.
 
 -description <i>string</i>
 Add a description to the exported file. The description appears
 at the top of the file, following the header information. It is
 preceded by a # symbol.
 
 -scope <i>string</i>
 Either a named scope: global, local, or script; or a number
 to indicate the scope level. Scope = 0 = current scope
 Increasing the scope value by 1 will increate the scope to include the
 parent scope of the current scope. 
 
 -noClobber
 Do not overwrite an existing file, -Append will take precendence over -NoClobber.
 
 -force
 Override the read-only attribute on the output file.
 By default, Export-Alias will overwrite files without warning, unless the
 read-only or hidden attribute is set or -NoClobber is used.
 The -NoClobber parameter takes precedence over -Force when both are used in a command.  The Force parameter cannot force Export-Alias to overwrite files with the hidden attribute.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 
","https://ss64.com/ps/export-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"Import-Alias","Import an alias list from a file."," Import-Alias [-path] <i>string</i> [-passThru] [-scope <i>string</i>]
 [-force] [-whatIf] [-confirm] [CommonParameters]
"," -Path <i>path</i>
 The path to the item {may be piped}
 Wildcards are allowed but they must resolve to a single name.
 -passThru 
 Pass the object created by Import-Alias through the pipeline.
 -scope <i>string</i>
 The scope to apply to the imported aliases.
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-alias | select-object name,Options
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/import-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"ipal","Import an alias list from a file."," Import-Alias [-path] <i>string</i> [-passThru] [-scope <i>string</i>]
 [-force] [-whatIf] [-confirm] [CommonParameters]
"," -Path <i>path</i>
 The path to the item {may be piped}
 Wildcards are allowed but they must resolve to a single name.
 -passThru 
 Pass the object created by Import-Alias through the pipeline.
 -scope <i>string</i>
 The scope to apply to the imported aliases.
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-alias | select-object name,Options
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/import-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"New-Alias","Create a new alias."," New-Alias [ [-name] <i>string</i>[] ] [-value] <i>string</i> [-description <i>string</i>] 
 [-option <i>option</i>] [-passThru] [-scope <i>string</i>] [-force] 
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]</pre>
"," -name <i>string</i>[]
 The alias to create, the first character cannot be a number.
 -value <i>string</i>
 The name of the cmdlet or command element that is being aliased.
 -description <i>string</i>
 A description for the alias.
 -option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes.
 -passThru 
 Pass the object created by this cmdlet through the pipeline. 
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type set-alias if the alias name already exists.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"nal","Create a new alias."," New-Alias [ [-name] <i>string</i>[] ] [-value] <i>string</i> [-description <i>string</i>] 
 [-option <i>option</i>] [-passThru] [-scope <i>string</i>] [-force] 
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]</pre>
"," -name <i>string</i>[]
 The alias to create, the first character cannot be a number.
 -value <i>string</i>
 The name of the cmdlet or command element that is being aliased.
 -description <i>string</i>
 A description for the alias.
 -option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes.
 -passThru 
 Pass the object created by this cmdlet through the pipeline. 
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type set-alias if the alias name already exists.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"Set-Alias","Create or change an alias."," Set-Alias [-name] <i>string</i> [-value] <i>string</i> [-description <i>string</i>] 
 [-option <i>Option</i>] [-passThru] [-scope <i>string</i>] 
 [-force] [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]</pre>
"," -name <i>string</i>[]
 The alias to create, the first character cannot be a number.
 
 -value <i>string</i>
 The name of the cmdlet or command element that is being aliased.
 -description <i>string</i>
 A description for the alias.
 -option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes.
 AllScope: The alias is copied to any new scopes that are created.
 -passThru 
 Return an object representing the alias.
 By default, this cmdlet does not generate any output. 
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -force
 Allows the cmdlet to set a read-only alias.
 Use -Option to create a read-only alias.
 -Force cannot be used to edit a constant alias.
 
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/set-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"sal","Create or change an alias."," Set-Alias [-name] <i>string</i> [-value] <i>string</i> [-description <i>string</i>] 
 [-option <i>Option</i>] [-passThru] [-scope <i>string</i>] 
 [-force] [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]</pre>
"," -name <i>string</i>[]
 The alias to create, the first character cannot be a number.
 
 -value <i>string</i>
 The name of the cmdlet or command element that is being aliased.
 -description <i>string</i>
 A description for the alias.
 -option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes.
 AllScope: The alias is copied to any new scopes that are created.
 -passThru 
 Return an object representing the alias.
 By default, this cmdlet does not generate any output. 
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, or Script, or a number relative
 to the current scope ( 0 through the number of scopes, where 0 is the
 current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -force
 Allows the cmdlet to set a read-only alias.
 Use -Option to create a read-only alias.
 -Force cannot be used to edit a constant alias.
 
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/set-alias.html","File Manipulation, System Utility, Obfuscation","Alias"
"Get-AppvClientPackage","Return App-V Client Packages.","Not Available","Not Available","Not Available",,
"Get-AppxPackage","List the app packages installed in a user profile."," Get-AppxPackage [[-Name] <i>String</i>]
 <b>[</b>[-Publisher] <i>String</i><b>]</b> [-AllUsers] [-PackageTypeFilter {None | Main | Framework | Resource | Bundle | Xap}]
 [-User <i>String</i>] [-Volume <i>AppxVolume</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -AllUsers
 Indicates that this cmdlet lists app packages for all user accounts on the computer. 
 This parameter requires administrator permissions.
 
 -Name [<i>String</i>]
 Return results for the specified package only. Wildcards are permitted.
 
 -PackageTypeFilter [<i>PackageTypes</i>]
 One or more comma-separated types of packages that the cmdlet gets from the package repository. 
 Valid values are: 
 
 -- Bundle
 -- Framework
 -- Main
 -- Resource
 -- None
 
 By default, this cmdlet returns only packages of types Main and Framework.
 
 -Publisher [<i>String</i>]
 The publisher of a particular package. If you specify this parameter, the cmdlet returns results 
 only for this publisher. Wildcards are permitted.
 
 -User [<i>String</i>]
 A user. If you specify this parameter, the cmdlet returns a list of app packages that are installed 
 for only the user specified. To get the list of packages for a user profile other than the profile for
 the current user, you must run this command by using administrator permissions. The user name can 
 be in one of these formats: 
 
 -- domain\user_name
 -- user_name@fqn.domain.tld
 -- user_name
 -- SID-string
 -Volume [<i>AppxVolume</i>]
 An AppxVolume object. If you specify this parameter, this cmdlet returns only packages that are 
 relative to the volume that this parameter specifies.
","https://ss64.com/ps/get-appxpackage.html","System Administration",
"Remove-AppxPackage","Remove an app package from a user account."," Remove-AppxPackage [-Package] <i>String</i> [-PreserveApplicationData]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Package <i>String</i>
 An AppxPackage object or the full name of the package to be removed.
 
 -PreserveApplicationData
 Preserve the application data during package removal.
 The application data is available for later use.
 
 -Confirm
 Prompt for confirmation before running the cmdlet.
 
 -WhatIf
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/remove-appxpackage.html","System Administration",
"Add-AppxProvisionedPackage",,"Not Available","Not Available","Not Available",,
"Compress-Archive","Create a new archive/zipped file. [PS 5+]"," Compress-Archive [<b>-Path</b>] <i>String</i>[] [-DestinationPath] <i>String</i>
 [-CompressionLevel <i>String</i> ] [-Update]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Compress-Archive [-DestinationPath] <i>String</i> <b>-LiteralPath</b> <i>String</i>[]
 [-CompressionLevel <i>String</i> ] [-Update]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
","Not Available","https://ss64.com/ps/compress-archive.html","File Manipulation ","Compression"
"Expand-Archive","Extract files from an archive (zipped) file [PS 5+]"," Expand-Archive [<b>-Path</b>] <i>String</i> [-DestinationPath] <i>String</i> [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Expand-Archive [-DestinationPath] <i>String</i> <b>-LiteralPath</b> <i>String</i> [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
","Not Available","https://ss64.com/ps/expand-archive.html","File Manipulation ","Compression"
"Get-AuthenticodeSignature","Get the signature object associated with a file."," Get-AuthenticodeSignature [-filePath] <i>string</i>[] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -filePath <i>path</i>
 The path to the item {may be piped}
","https://ss64.com/ps/get-authenticodesignature.html","File Manipulation ","File Signature"
"Set-AuthenticodeSignature","Place a signature in a .ps1 script or other file."," Set-AuthenticodeSignature [-filePath] <i>string</i>[]
 [-certificate] <i>X509Certificate2</i> [-includeChain <i>string</i>]
 [-timeStampServer string] [-HashAlgorithm <i>string</i>]
 [-force] [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/set-authenticodesignature.html","File Manipulation ","File Signature"
"Backup-GPO","Backup group policy objects. (GPOs)"," Backup-GPO [-Name] <i>string</i> -Path <i>string</i>
 [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Backup-GPO <b>-All</b> -Path <i>string
 </i> [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Backup-GPO <b>-Guid</b> &lt;Guid&gt; -Path <i>string</i>
 [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -All Backup all GPOs in the domain.
 -Comment <i>string</i> 
 Include a comment for the backed-up GPO.
 -Domain string
 The domain containing the GPOs to backup, requires a trust relationship if not the current domain.
 -Guid <i>Guid</i>
 Specify the GPO to backup by its globally unique identifier (GUID).
 -Name <i>string
","https://ss64.com/ps/backup-gpo.html","System Administraiton","GPO"
"Begin","Function BEGIN block.","Not Available","Not Available","https://ss64.com/ps/syntax-function-input.html","System Utility","Command Execution, Scripting"
"Enable-BitLocker","Enable encryption for a BitLocker volume."," Enable-BitLocker [-MountPoint] <i>String</i>[] <b>-AdAccountOrGroupProtector</b> [-AdAccountOrGroup] <i>String
 </i>[-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-Service] [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[] <b>-PasswordProtector</b> [[-Password] <i>SecureString</i>]
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[] <b>-TpmAndPinProtector</b> [[-Pin] <i>SecureString</i>]
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enable-BitLocker [-MountPoint] <i>String</i>[]
 <b>-TpmAndPinAndStartupKeyProtector</b> [-StartupKeyPath] <i>String </i>[[-Pin] <i>SecureString</i>]
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[] [<b>-RecoveryKeyPath</b>] <i>String</i>
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly] -RecoveryKeyProtector
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[]<b> -RecoveryPasswordProtector</b> [[-RecoveryPassword] <i>String</i>]
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>]
 [-HardwareEncryption] [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[] <b>-StartupKeyProtector</b> [-StartupKeyPath] <i>String</i>
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[]<b>-TpmAndStartupKeyProtector</b> [-StartupKeyPath] <i>String</i>
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-BitLocker [-MountPoint] <i>String</i>[]<b> -TpmProtector</b>
 [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," [-EncryptionMethod <i>BitLockerVolumeEncryptionMethodOnEnable</i>] [-HardwareEncryption]
 [-SkipHardwareTest] [-UsedSpaceOnly]
 [-Confirm] [-WhatIf] [<i>Add-BitLockerKeyProtector - Add a key protector for a BitLocker volume.
","https://ss64.com/ps/enable-bitlocker.html","System Administration","Encryption, BitLocker"
"Enable-BitLockerAutoUnlock","Enable automatic unlocking for a BitLocker volume."," Enable-BitLockerAutoUnlock [-MountPoint] <i>String</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -MountPoint <i>String</i>[]
 An array of drive letters or BitLocker volume objects. The cmdlet enables automatic unlocking for 
 the volumes specified. To obtain a BitLocker volume object, use Get-BitLockerVolume.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/enable-bitlockerautounlock.html","System Administration","Encryption, BitLocker"
"Resume-Bitlocker","Resume Bitlocker encryption for the specified volume."," Resume-BitLocker [-MountPoint] <i>String</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -MountPoint <i>String</i>[]
 An array of drive letters or BitLocker volume objects. This cmdlet suspends protection for the 
 volumes specified. To obtain a BitLocker volume object, use Get-BitLockerVolume.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/resume-bitlocker.html","System Administration","Encryption, BitLocker"
"Suspend-BitLocker","Suspend Bitlocker encryption for the specified volume."," Suspend-BitLocker [-MountPoint] <i>String</i>[] [[-RebootCount] <i>Int32</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -MountPoint <i>String</i>[]
 An array of drive letters or BitLocker volume objects. This cmdlet suspends protection for the 
 volumes specified. To obtain a BitLocker volume object, use Get-BitLockerVolume.
 
 -RebootCount <i>Int32</i>
 The number of computer restarts before BitLocker restores protection.
 The acceptable values for this parameter are:integers from 0 to 15 (default=1).
 Specify zero to suspend protection indefinitely until you resume it with Resume-BitLocker. 
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/suspend-bitlocker.html","System Administration","Encryption, BitLocker"
"Add-BitLockerKeyProtector","Add a key protector for a BitLocker volume."," Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[] <b>-ADAccountOrGroupProtector</b> [-ADAccountOrGroup] <i>String</i>
 [-Service] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -PasswordProtector</b> [[-Password] <i>SecureString</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]
 <b>-TpmAndPinAndStartupKeyProtector</b> [-StartupKeyPath] <i>String</i> [[<b>-Pin</b>] <i>SecureString</i>] 
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -TpmAndPinProtector</b> [[-Pin] <i>SecureString</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -RecoveryKeyProtector</b> [-RecoveryKeyPath] <i>String</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -RecoveryPasswordProtector</b> [[-RecoveryPassword] <i>String</i>] 
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -StartupKeyProtector</b> [-StartupKeyPath] <i>String</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[]<b> -TpmAndStartupKeyProtector</b> [-StartupKeyPath] <i>String</i> 
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[] -TpmProtector
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
","<script src=../js/content.js></script>
 </ul></div><!-- #EndLibraryItem --><h1>Add-BitLockerKeyProtector</h1> 
 <p>Add a key protector for a BitLocker volume.</p>
 Add-BitLockerKeyProtector [-MountPoint] <i>String</i>[] <b>-ADAccountOrGroupProtector</b> [-ADAccountOrGroup] <i>String</i>
 [-Service] [-Confirm] [-WhatIf] [<i>BitLocker Drive Encryption.</p>
 <p>PS C:\&gt; Get-BitLockerVolume | Add-BitLockerKeyProtector -RecoveryKeyPath &quot;E:\Recovery\&quot; -RecoveryKeyProtector
","https://ss64.com/ps/add-bitlockerkeyprotector.html","System Administration","Encryption, BitLocker"
"Remove-BitLockerKeyProtector","Remove a key protector from a BitLocker volume.","Not Available","Not Available","Not Available","System Administration","Encryption, BitLocker"
"Get-BitLockerVolume","Get information about volumes BitLocker can protect."," Get-BitLockerVolume [[-MountPoint] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -MountPoint <i>String</i>[]
 An array of drive letters. This cmdlet will get these BitLocker volumes.
 <p>Standard set-alias</p>
 <p>You can use this cmdlet to get BitLocker volumes to use with other cmdlets, such as the Enable-BitLocker cmdlet or the Add-BitLockerKeyProtector cmdlet. You can also use this cmdlet to view the following information about a BitLocker volume:</p>
 <ul>
 <li> KeyProtector. Type of key protector or protectors.</li>
 <li> AutoUnlock Enabled. Whether BitLocker uses automatic unlocking for the volume. </li>
 VolumeType Mount CapacityGB VolumeStatus Encryption KeyProtector AutoUnlock Protection
 Point Percentage Enabled Status
 ---------- ----- ---------- ------------ ---------- ------------ ---------- ----------
 Data D: 931.51 EncryptionInProgress 1 {RecoveryPassword, Pas... Off
 Data E: 928.83 FullyDecrypted 0 {} Off
","https://ss64.com/ps/get-bitlockervolume.html","System Administration, Enumeration","Encryption, BitLocker"
"Break","Exit a program loop.","Not Available","Not Available","https://ss64.com/ps/break.html","System Utility","Command Execution, Scripting"
"Catch","Handle a terminating error within a scriptblock."," try <b>{</b><i>statement_list</i><b>}</b>
 catch [[<i>error_type</i>][',' <i>error_type</i>]*] <b>{</b><i>statement_list</i><b>}</b>
 finally <b>{</b><i>statement_list</i><b>}</b>
"," <i>statement_list</i> A scriptblock of code to be run
","https://ss64.com/ps/try.html","System Utility","Command Execution, Scripting"
"Export-Certificate","Export a certificate from a certificate store into a file.","Not Available","Not Available","Not Available","File Manipulation","Certificate"
"Get-Certificate","Submit/retrieve a certificate request to an enrollment server and install."," Get-Certificate [-Url <i>Uri</i>] -Template <i>String</i> [-SubjectName <i>String</i> [-DnsName <i>String</i>[]]
 [-Credential <i>PkiCredential</i>] [-CertStoreLocation <i>String</i>] [-WhatIf] [-Confirm]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Certificate -Request <i>Certificate</i> [-Credential <i>PkiCredential</i>] [-WhatIf] [-Confirm]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -CertStoreLocation
 The path to the certificate store for the received certificate.
 If the request is made pending, then the request object is saved in the corresponding request store.
 Note: Only <b>My store</b> is supported.
 -Confirm
 Prompt you for confirmation before running the cmdlet.
 -Credential
 Specify the credential to use for certificate enrollment.
 The credential can be a user name and password (a credential object), an X509 certificate, or the path to a cert.
 If a credential is not specified, then Kerberos authentication is used.
 -DnsName
 Specify one or more DNS names to be included in the certificate request as subject alternative name extension.
 -Request
 The X509 certificate or the path to a requested certificate located in the request store.
 -SubjectName
 The subject name to be included in the certificate request.
 -Template
 The object identifier or name of a certificate template to use with the certificate request.
 -Url
 The policy server URL to use for certificate enrollment.
 Credentials are required if the endpoint requires a user name and password or certificate authentication from the client.
 If credentials are not found and Windows PowerShell is in interactive mode, then a prompt for credentials will appear.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/get-certificate.html","Enumeration","Certificate"
"Import-Certificate","Import one or more certificates into a certificate store.","Not Available","Not Available","Not Available","File Manipulation","Certificate"
"Set-Location","Set the current working location."," Set-Location [[-path] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-literalPath] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path to a new working location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 
 -stackName 
 The stack to which the location is being set.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-location.html","System Utility","Command Execution"
"cd","Set the current working location."," Set-Location [[-path] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-literalPath] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path to a new working location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 
 -stackName 
 The stack to which the location is being set.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-location.html","System Utility","Command Execution"
"chdir","Set the current working location."," Set-Location [[-path] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-literalPath] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path to a new working location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 
 -stackName 
 The stack to which the location is being set.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-location.html","System Utility","Command Execution"
"sl","Set the current working location."," Set-Location [[-path] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-literalPath] <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path to a new working location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 
 -stackName 
 The stack to which the location is being set.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-location.html","System Utility","Command Execution"
"Get-ChildItem","Get child items (contents of a folder or registry key)."," Get-ChildItem <b>[</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>]</b> 
 [-Attributes <i>FileAttributes</i>] [[-filter] <i>string</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-FollowSymlink] [-Depth <i>UInt32</i>] [-Name]<b> </b>[-Directory] [-File] [-Hidden]
 [-ReadOnly] [-recurse] [-force] [-System] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted. Default is the current directory (.)
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed. [bug: transaction. This option was removed in PowerShell 6.0.
","https://ss64.com/ps/get-childitem.html","System Utility, Enumeration","Command Execution"
"dir","Get child items (contents of a folder or registry key)."," Get-ChildItem <b>[</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>]</b> 
 [-Attributes <i>FileAttributes</i>] [[-filter] <i>string</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-FollowSymlink] [-Depth <i>UInt32</i>] [-Name]<b> </b>[-Directory] [-File] [-Hidden]
 [-ReadOnly] [-recurse] [-force] [-System] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted. Default is the current directory (.)
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed. [bug: transaction. This option was removed in PowerShell 6.0.
","https://ss64.com/ps/get-childitem.html","System Utility, Enumeration","Command Execution"
"ls","Get child items (contents of a folder or registry key)."," Get-ChildItem <b>[</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>]</b> 
 [-Attributes <i>FileAttributes</i>] [[-filter] <i>string</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-FollowSymlink] [-Depth <i>UInt32</i>] [-Name]<b> </b>[-Directory] [-File] [-Hidden]
 [-ReadOnly] [-recurse] [-force] [-System] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted. Default is the current directory (.)
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed. [bug: transaction. This option was removed in PowerShell 6.0.
","https://ss64.com/ps/get-childitem.html","System Utility, Enumeration","Command Execution"
"gci","Get child items (contents of a folder or registry key)."," Get-ChildItem <b>[</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>]</b> 
 [-Attributes <i>FileAttributes</i>] [[-filter] <i>string</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-FollowSymlink] [-Depth <i>UInt32</i>] [-Name]<b> </b>[-Directory] [-File] [-Hidden]
 [-ReadOnly] [-recurse] [-force] [-System] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted. Default is the current directory (.)
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed. [bug: transaction. This option was removed in PowerShell 6.0.
","https://ss64.com/ps/get-childitem.html","System Utility, Enumeration","Command Execution"
"Clear-Host","Clear the screen."," Clear-Host</pre>
","Not Available","https://ss64.com/ps/clear-host.html","System Utility, Command Obfuscation",
"clear","Clear the screen."," Clear-Host</pre>
","Not Available","https://ss64.com/ps/clear-host.html","System Utility, Command Obfuscation",
"cls","Clear the screen."," Clear-Host</pre>
","Not Available","https://ss64.com/ps/clear-host.html","System Utility, Command Obfuscation",
"Clear-Item","Remove content from a variable or an alias."," Clear-item <b>[</b>[-path] | [-literalPath] <b>]</b> <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-confirm]
 [-whatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is deleted.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Clear only the specified items from the Path. e.g. May*
 -Exclude <i>string</i>
 Omits the specified items from the Path e.g. *SS64*&quot;
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override any restrictions that would prevent the command from succeeding,
 apart from security settings. e.g. Force will create file path directories
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Uses a <i>credential</i> to validate access to the file. Credential represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved using Aliases for Clear-Item: cli</p>
 <p>Remove all the registry entries under : hklm\Software\SS64\DemoKey:</p>
","https://ss64.com/ps/clear-item.html","System Utility","Command Execution"
"cli","Remove content from a variable or an alias."," Clear-item <b>[</b>[-path] | [-literalPath] <b>]</b> <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-confirm]
 [-whatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is deleted.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Clear only the specified items from the Path. e.g. May*
 -Exclude <i>string</i>
 Omits the specified items from the Path e.g. *SS64*&quot;
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override any restrictions that would prevent the command from succeeding,
 apart from security settings. e.g. Force will create file path directories
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Uses a <i>credential</i> to validate access to the file. Credential represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved using Aliases for Clear-Item: cli</p>
 <p>Remove all the registry entries under : hklm\Software\SS64\DemoKey:</p>
","https://ss64.com/ps/clear-item.html","System Utility","Command Execution"
"Get-CimAssociatedInstance","Retrieve CIM instance by an association."," Get-CimAssociatedInstance [-InputObject] <i>CimInstance</i> [[-Association] <i>String</i>]
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>}</b>
 [-KeyOnly] [-Namespace <i>String</i>][-OperationTimeoutSec <i>UInt32</i>] [-ResourceUri <i>Uri</i>] 
 [-ResultClassName <i>String</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," [-ResultClassName <i>String</i>] [<i>PS C:\&gt; $disks = Get-CimInstance -ClassName Win32_LogicalDisk -KeyOnly
","https://ss64.com/ps/get-cimassociatedinstance.html","Enumeration","CIM"
"Get-CimClass","Get a list of CIM classes in a specific namespace."," Get-CimClass [[-ClassName] <i>String</i>] [[-Namespace] <i>String</i>] [-MethodName <i>String</i>] 
 <b>[</b> [-ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-PropertyName <i>String</i>] [-QualifierName <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -CimSession <i>CimSession</i>[]
 The CIM session to use for this cmdlet. Enter a variable that contains the CIM session or a command 
 that creates or gets the CIM session, such as the Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 
 -ClassName <i>String</i>
 The name of the CIM class for which to perform the operation. 
 NOTE: You can use tab completion to browse the list of classes, because wps_2 gets a list of classes from the 
 local WMI server to provide a list of class names.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), a NetBIOS name, or an IP address.
 
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -MethodName <i>String</i>
 Finds the classes that have a method matching this name.
 You can use wildcard characters with this parameter.
 -Namespace <i>String</i>
 Specifies the namespace for CIM operation. The default namespace is root/cimv2.
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -PropertyName <i>String</i>[]
 Finds the classes which have a property matching this name.
 You can use wildcard characters with this parameter.
 
 -QualifierName <i>String</i>
 Filters the classes by class level qualifier name. You can use wildcard characters with this parameter.
","https://ss64.com/ps/get-cimclass.html","Enumeration","CIM"
"gcls","Get a list of CIM classes in a specific namespace."," Get-CimClass [[-ClassName] <i>String</i>] [[-Namespace] <i>String</i>] [-MethodName <i>String</i>] 
 <b>[</b> [-ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-PropertyName <i>String</i>] [-QualifierName <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -CimSession <i>CimSession</i>[]
 The CIM session to use for this cmdlet. Enter a variable that contains the CIM session or a command 
 that creates or gets the CIM session, such as the Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 
 -ClassName <i>String</i>
 The name of the CIM class for which to perform the operation. 
 NOTE: You can use tab completion to browse the list of classes, because wps_2 gets a list of classes from the 
 local WMI server to provide a list of class names.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), a NetBIOS name, or an IP address.
 
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -MethodName <i>String</i>
 Finds the classes that have a method matching this name.
 You can use wildcard characters with this parameter.
 -Namespace <i>String</i>
 Specifies the namespace for CIM operation. The default namespace is root/cimv2.
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -PropertyName <i>String</i>[]
 Finds the classes which have a property matching this name.
 You can use wildcard characters with this parameter.
 
 -QualifierName <i>String</i>
 Filters the classes by class level qualifier name. You can use wildcard characters with this parameter.
","https://ss64.com/ps/get-cimclass.html","Enumeration","CIM"
"Register-CimIndicationEvent","Subscribe to indications using a filter or query expression."," Register-CimIndicationEvent [<b>-ClassName</b>] <i>String</i>
 [[-SourceIdentifier] <i>String</i>] [[-Action] <i>ScriptBlock</i>] 
 [<b>-ComputerName</b> <i>String</i>] [-Forward] [-MessageData <i>PSObject</i>] 
 [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>] [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
 Register-CimIndicationEvent [<b>-ClassName</b>] <i>String</i>
 [[-SourceIdentifier] <i>String</i>] [[-Action] <i>ScriptBlock</i>] 
 <b>-CimSession</b> <i>CimSession</i> [-Forward] [-MessageData <i>PSObject</i>] 
 [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>] [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
 Register-CimIndicationEvent [<b>-Query</b>] <i>String</i> [-QueryDialect <i>String</i>]
 [[-SourceIdentifier] <i>String</i>] [[-Action] <i>ScriptBlock</i>] 
 [<b>-ComputerName</b> <i>String</i>] [-Forward] [-MessageData <i>PSObject</i>]
 [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>] [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Register-CimIndicationEvent [<b>-Query</b>] <i>String</i> [-QueryDialect <i>String</i>]
 [[-SourceIdentifier] <i>String</i>] [[-Action] <i>ScriptBlock</i>]
 <b>-CimSession</b> <i>CimSession</i> [-Forward] [-MessageData <i>PSObject</i>] 
 [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>] [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>ScriptBlock</i>
 Specify the commands that handle the events.
 The commands specified by this parameter run when an event is raised, instead of sending the event to the 
 event queue. Enclose the commands in braces ( { } ) to create a script block.
 The script block specified with Action can include the $Event, $EventSubscriber, $Sender, $SourceEventArgs, 
 and $SourceArgs Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 -ClassName <i>String</i>
 The indication class to which you are subscribing. 
 You can use tab completion to browse the list of classes, because wps_2 gets a list of classes from the 
 local WMI server to provide a list of class names.
 -ComputerName <i>String</i>
 The name of the computer on which you want to run the CIM operation.
 Specify a fully qualified domain name (FQDN), a NetBIOS name, or an IP address.
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using WsMan.
 If you do not specify this parameter, the cmdlet performs operation on the local system using (COM).
 If multiple operations are being performed on the same computer, connecting using a CIM session gives better 
 performance.
 -Forward
 Indicates that events for the subscription are forwarded to the session on the local computer.
 Use this parameter when you are registering for events on a remote computer or in a remote session.
 -MessageData <i>PSObject</i>
 Specify any additional data to be associated with this event subscription.
 The value of this parameter appears in the MessageData property of all the events associated with this subscription.
 -Namespace <i>String</i>
 Specify the namespace for the CIM operation.
 
 The default namespace is root/cimv2. 
 You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 -OperationTimeoutSec <i>UInt32</i>
 Specify the amount of time that the cmdlet waits for a response from the computer.
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for the server.
 If the -OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -Query <i>String</i>
 Specify a query to run on the CIM server.
 You can specify the query dialect using the QueryDialect parameter.
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape 
 those characters by prefixing them with the backslash (\) character. If the value specified uses the WQL LIKE 
 operator, then you must escape the following characters by enclosing them in square brackets ([]): percent 
 (%), underscore (_), or opening square bracket ([).
 -QueryDialect <i>String</i>
 Specify the query language used for the Query parameter. psdx_paramvaluesWQL or CQL.
 The default value is WQL.
 -SourceIdentifier <i>String</i>
 Specifies a name for the subscription. The name that you specify must be unique in the current session.
 The default value is a GUID that wps_1 assigns.
 The value of this parameter appears in the value of the SourceIdentifier property of the subscriber object and 
 of all event objects associated with this subscription.
 -SupportEvent
 Indicates that the event subscription is hidden.
 Use this parameter when the current subscription is part of a more complex event registration mechanism and it 
 should not be discovered independently.
","https://ss64.com/ps/register-cimindicationevent.html","System Utility","CIM"
"New-CimInstance","ncim  Create a new instance of a class."," New-CimInstance [-<b>ClassName</b>] <i>String</i>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]
 </b>[-Key <i>String[]</i>] [-ClientOnly] [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>]
 [[-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimInstance[<b>-CimClass</b>] <i>CimClass</i>
 <b>[</b> -ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-ClientOnly] [-OperationTimeoutSec <i>UInt32</i>]
 [-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimInstance <b>-ResourceUri</b> <i>Uri</i>
 <b>[</b> -ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Key <i>String[]</i>] [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>]
 [-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," [[-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i>CommonParameters</i>]
 
 Key
 -Key <i>String</i>
 Specifies the properties that are used as keys. -CimSession and -ComputerName cannot be used when -Key is specified.
 
 -Namespace <i>String</i>
 Specifies the namespace of the class for the new instance.
 
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -Property <i>IDictionary</i>
 Specifies the properties of the CIM instance using a hash table (name-value pairs).
 
 If you specify the CimClass parameter, then the New-CimInstance cmdlet performs a property validation on the 
 client to make sure that the properties specified are consistent with the class declaration on the server. If 
 the CimClass parameter is not specified, then the property validation is done on the server.
 
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the ResourceURI parameter.
 
 If both the -ResourceUri parameter and the -Filter parameter are specified, the -Filter parameter is ignored.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 <p>Use the Property parameter to set the initial values of the selected properties. By default, the New-CimInstance cmdlet creates an instance on the local computer.</p>
 <p>PS C:\&gt; $dyn = New-CimInstance -ClassName Win32_Process -Property @{Handle=0} -Key Handle -ClientOnly 
","https://ss64.com/ps/new-ciminstance.html","System Utility","CIM"
"ncim","Create a new instance of a class."," New-CimInstance [-<b>ClassName</b>] <i>String</i>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]
 </b>[-Key <i>String[]</i>] [-ClientOnly] [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>]
 [[-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimInstance[<b>-CimClass</b>] <i>CimClass</i>
 <b>[</b> -ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-ClientOnly] [-OperationTimeoutSec <i>UInt32</i>]
 [-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimInstance <b>-ResourceUri</b> <i>Uri</i>
 <b>[</b> -ComputerName <i>String[]</i>] <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Key <i>String[]</i>] [-Namespace <i>String</i>] [-OperationTimeoutSec <i>UInt32</i>]
 [-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," [[-Property] <i>IDictionary</i>] [-Confirm] [-WhatIf] [<i>CommonParameters</i>]
 
 Key
 -Key <i>String</i>
 Specifies the properties that are used as keys. -CimSession and -ComputerName cannot be used when -Key is specified.
 
 -Namespace <i>String</i>
 Specifies the namespace of the class for the new instance.
 
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -Property <i>IDictionary</i>
 Specifies the properties of the CIM instance using a hash table (name-value pairs).
 
 If you specify the CimClass parameter, then the New-CimInstance cmdlet performs a property validation on the 
 client to make sure that the properties specified are consistent with the class declaration on the server. If 
 the CimClass parameter is not specified, then the property validation is done on the server.
 
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the ResourceURI parameter.
 
 If both the -ResourceUri parameter and the -Filter parameter are specified, the -Filter parameter is ignored.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 <p>Use the Property parameter to set the initial values of the selected properties. By default, the New-CimInstance cmdlet creates an instance on the local computer.</p>
 <p>PS C:\&gt; $dyn = New-CimInstance -ClassName Win32_Process -Property @{Handle=0} -Key Handle -ClientOnly 
","https://ss64.com/ps/new-ciminstance.html","System Utility","CIM"
"Get-CimInstance","gcim  Get a managed resource (storage, network, software etc)."," Get-CimInstance [<b>-ClassName</b>] <i><b>String</b></i> [-Filter <i>String</i>]
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]
 </b> [-KeyOnly] [-Namespace <i>String</i>] [-Shallow]
 [-Property <i>String[]</i>] [-QueryDialect <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance <b>-ResourceUri <i>Uri</i></b> [-Filter <i>String</i>]
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-KeyOnly] [-Namespace <i>String</i>] [-Shallow]
 [-Property <i>String[]</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance <b>-Query <i>String</i></b>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Namespace <i>String</i>] [-Shallow] [-QueryDialect <i>String</i>]
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance [<b>-InputObject</b>] <i><b>CimInstance</b></i>
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," [-Property <i>String[]</i>] [-QueryDialect <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i>PS C:\&gt; Get-CimInstance -Class Win32_Process -KeyOnly</p>
","https://ss64.com/ps/get-ciminstance.html","System Utility","CIM"
"gcim","Get a managed resource (storage, network, software etc)."," Get-CimInstance [<b>-ClassName</b>] <i><b>String</b></i> [-Filter <i>String</i>]
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]
 </b> [-KeyOnly] [-Namespace <i>String</i>] [-Shallow]
 [-Property <i>String[]</i>] [-QueryDialect <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance <b>-ResourceUri <i>Uri</i></b> [-Filter <i>String</i>]
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-KeyOnly] [-Namespace <i>String</i>] [-Shallow]
 [-Property <i>String[]</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance <b>-Query <i>String</i></b>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Namespace <i>String</i>] [-Shallow] [-QueryDialect <i>String</i>]
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimInstance [<b>-InputObject</b>] <i><b>CimInstance</b></i>
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," [-Property <i>String[]</i>] [-QueryDialect <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [<i>PS C:\&gt; Get-CimInstance -Class Win32_Process -KeyOnly</p>
","https://ss64.com/ps/get-ciminstance.html","System Utility","CIM"
"Remove-CimInstance","Remove a CIM instance from a computer."," Remove-CimInstance [-InputObject] <i>CimInstance</i> [-ComputerName <i>String</i>[]] [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-InputObject] <i>CimInstance</i> <b>-CimSession <i>CimSession</i>[]</b> [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-Query] <i>String</i> [[-Namespace] <i>String</i>] [-ComputerName <i>String</i>[]]
 [-OperationTimeoutSec <i>UInt32</i>] [-QueryDialect <i>String</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-Query] <i>String</i> [[-Namespace] <i>String</i>] <b>-CimSession <i>CimSession</i>[]
 </b> [-OperationTimeoutSec <i>UInt32</i>] [-QueryDialect <i>String</i>][-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Run the command using the specified CIM session. Enter a variable that contains the CIM session, or a command
 that creates or gets the CIM session, such as the Get-CimSession cmdlets.
 See about_CimSessions.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), or a NetBIOS name.
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -InputObject <i>CimInstance</i>
 Specifies a CIM instance object to be removed from the CIM server.
 Note: The input object passed to the cmdlet is not changed, only the instance in the CIM server is removed. 
 -Namespace <i>String</i>
 Specifies the namespace for the CIM operation.
 
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -Query <i>String</i>
 A query to run on the CIM server. You can specify the query dialect using the -QueryDialect parameter.
 
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape 
 those characters by prefixing them with the backslash (\) character. If the value specified uses the WQL LIKE 
 operator, then you must escape the following characters by enclosing them in square brackets ([]): percent 
 (%), underscore (_), or opening square bracket ([).
 
 You cannot use a metadata query to retrieve a list of classes or an event query. To retrieve a list of 
 classes, use the Get-CimClass cmdlet. To retrieve an event query, use the Register-CimIndicationEvent cmdlet.
 
 You can specify the query dialect using the -QueryDialect parameter.
 
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter.
 
 psdx_paramvalues WQL or CQL.
 
 The default value is WQL.
 
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the -ResourceURI parameter.
 
 If both the ResourceUri parameter and the Filter parameter are specified, the Filter parameter is ignored.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-ciminstance.html","System Utility","CIM"
"rcim","Remove a CIM instance from a computer."," Remove-CimInstance [-InputObject] <i>CimInstance</i> [-ComputerName <i>String</i>[]] [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-InputObject] <i>CimInstance</i> <b>-CimSession <i>CimSession</i>[]</b> [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-Query] <i>String</i> [[-Namespace] <i>String</i>] [-ComputerName <i>String</i>[]]
 [-OperationTimeoutSec <i>UInt32</i>] [-QueryDialect <i>String</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-CimInstance [-Query] <i>String</i> [[-Namespace] <i>String</i>] <b>-CimSession <i>CimSession</i>[]
 </b> [-OperationTimeoutSec <i>UInt32</i>] [-QueryDialect <i>String</i>][-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Run the command using the specified CIM session. Enter a variable that contains the CIM session, or a command
 that creates or gets the CIM session, such as the Get-CimSession cmdlets.
 See about_CimSessions.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), or a NetBIOS name.
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -InputObject <i>CimInstance</i>
 Specifies a CIM instance object to be removed from the CIM server.
 Note: The input object passed to the cmdlet is not changed, only the instance in the CIM server is removed. 
 -Namespace <i>String</i>
 Specifies the namespace for the CIM operation.
 
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -Query <i>String</i>
 A query to run on the CIM server. You can specify the query dialect using the -QueryDialect parameter.
 
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape 
 those characters by prefixing them with the backslash (\) character. If the value specified uses the WQL LIKE 
 operator, then you must escape the following characters by enclosing them in square brackets ([]): percent 
 (%), underscore (_), or opening square bracket ([).
 
 You cannot use a metadata query to retrieve a list of classes or an event query. To retrieve a list of 
 classes, use the Get-CimClass cmdlet. To retrieve an event query, use the Register-CimIndicationEvent cmdlet.
 
 You can specify the query dialect using the -QueryDialect parameter.
 
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter.
 
 psdx_paramvalues WQL or CQL.
 
 The default value is WQL.
 
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the -ResourceURI parameter.
 
 If both the ResourceUri parameter and the Filter parameter are specified, the Filter parameter is ignored.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-ciminstance.html","System Utility","CIM"
"Set-CimInstance","Modify a CIM instance on a CIM server."," Set-CimInstance <b>-Query <i>String</i></b>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 -Property <i>IDictionary</i>
 [-Namespace <i>String</i>] [-QueryDialect <i>String</i>] [-PassThru] 
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-CimInstance [<b>-InputObject</b>] <i><b>CimInstance</b></i>
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Property <i>IDictionary</i>] [-ResourceUri <i>Uri</i>] [-PassThru]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Run the cmdlets on a remote computer. Enter a variable that contains the CIM session or a command 
 that creates or gets the CIM session, such as the Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), or a NetBIOS name.
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 -InputObject <i>CimInstance</i>
 Specifies a CIM instance object to use as input.
 -- If neither the -ComputerName parameter nor the -CimSession parameter is specified, then this cmdlet uses the CIM
 session or computer name from the input object.
 -- If the either the -ComputerName parameter or the -CimSession parameter is specified, then this cmdlet uses
 either the -CimSession parameter value or -ComputerName parameter value. Note: This is not very common.
 -Namespace <i>String</i>
 Specifies the namespace of CIM class.
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -PassThru
 Passthru the pipeline.
 -Property <i>IDictionary</i>[]
 Specifies the properties of the CIM instance as a hash table (using name-value pairs). Only the properties
 specified using this parameter are changed. Other properties of the CIM instance are not changed.
 -Query <i>String</i>
 Specifies a query to run on the CIM server to retrieve CIM instances on which to run the cmdlet.
 You can specify the query dialect using the -QueryDialect parameter.
 --If neither the -ComputerName parameter nor the -CimSession parameter is specified, then this cmdlet works on
 local Windows Management Instrumentation (WMI) using a Component Object Model (COM) session.
 --If either the -ComputerName parameter or the -CimSession parameter is specified, then this cmdlet works against
 the CIM server specified by either the -ComputerName parameter or the -CimSession parameter.
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape 
 those characters by prefixing them with the backslash (\) character. If the value specified uses the WQL LIKE 
 operator, then you must escape the following characters by enclosing them in square brackets ([]): percent 
 (%), underscore (_), or opening square bracket ([).
 You cannot use a metadata query to retrieve a list of classes or an event query. To retrieve a list of 
 classes, use the Get-CimClass cmdlet. To retrieve an event query, use the Register-CimIndicationEvent cmdlet.
 You can specify the query dialect using the -QueryDialect parameter.
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter.
 psdx_paramvalues WQL or CQL.
 The default value is WQL.
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 A URI consists of a prefix and a path to a resource. For example: 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the ResourceURI parameter.
 If both the -ResourceUri parameter and the -Filter parameter are specified, the -Filter parameter is ignored.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/set-ciminstance.html","System Utility","CIM"
"scim","Modify a CIM instance on a CIM server."," Set-CimInstance <b>-Query <i>String</i></b>
 <b>[ </b>-ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 -Property <i>IDictionary</i>
 [-Namespace <i>String</i>] [-QueryDialect <i>String</i>] [-PassThru] 
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-CimInstance [<b>-InputObject</b>] <i><b>CimInstance</b></i>
 <b>[</b> -ComputerName <i>String[]</i> <b>|</b> -CimSession <i>CimSession[]</i> <b>]</b>
 [-Property <i>IDictionary</i>] [-ResourceUri <i>Uri</i>] [-PassThru]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Run the cmdlets on a remote computer. Enter a variable that contains the CIM session or a command 
 that creates or gets the CIM session, such as the Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), or a NetBIOS name.
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 -InputObject <i>CimInstance</i>
 Specifies a CIM instance object to use as input.
 -- If neither the -ComputerName parameter nor the -CimSession parameter is specified, then this cmdlet uses the CIM
 session or computer name from the input object.
 -- If the either the -ComputerName parameter or the -CimSession parameter is specified, then this cmdlet uses
 either the -CimSession parameter value or -ComputerName parameter value. Note: This is not very common.
 -Namespace <i>String</i>
 Specifies the namespace of CIM class.
 The default namespace is root/cimv2. 
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces 
 from the local WMI server to provide the list of namespaces.
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -PassThru
 Passthru the pipeline.
 -Property <i>IDictionary</i>[]
 Specifies the properties of the CIM instance as a hash table (using name-value pairs). Only the properties
 specified using this parameter are changed. Other properties of the CIM instance are not changed.
 -Query <i>String</i>
 Specifies a query to run on the CIM server to retrieve CIM instances on which to run the cmdlet.
 You can specify the query dialect using the -QueryDialect parameter.
 --If neither the -ComputerName parameter nor the -CimSession parameter is specified, then this cmdlet works on
 local Windows Management Instrumentation (WMI) using a Component Object Model (COM) session.
 --If either the -ComputerName parameter or the -CimSession parameter is specified, then this cmdlet works against
 the CIM server specified by either the -ComputerName parameter or the -CimSession parameter.
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape 
 those characters by prefixing them with the backslash (\) character. If the value specified uses the WQL LIKE 
 operator, then you must escape the following characters by enclosing them in square brackets ([]): percent 
 (%), underscore (_), or opening square bracket ([).
 You cannot use a metadata query to retrieve a list of classes or an event query. To retrieve a list of 
 classes, use the Get-CimClass cmdlet. To retrieve an event query, use the Register-CimIndicationEvent cmdlet.
 You can specify the query dialect using the -QueryDialect parameter.
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter.
 psdx_paramvalues WQL or CQL.
 The default value is WQL.
 -ResourceUri <i>Uri</i>
 Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI is used to 
 identify a specific type of resource, such as disks or processes, on a computer.
 A URI consists of a prefix and a path to a resource. For example: 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 
 By default, if you do not specify this parameter, the DMTF standard resource URI 
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/ is used and the class name is appended to it.
 
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying the 
 ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter without 
 specifying the ComputerName parameter, or if you specify a CIM session created using DCOM protocol, you will 
 get an error, because the DCOM protocol does not support the ResourceURI parameter.
 If both the -ResourceUri parameter and the -Filter parameter are specified, the -Filter parameter is ignored.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/set-ciminstance.html","System Utility","CIM"
"Invoke-CimMethod","Invoke a method of a CIM class or CIM instance."," Invoke-CimMethod [<b>-ClassName</b>] <i>String</i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String
 </i> <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-Namespace <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [<b>-CimClass</b>] <i>CimClass</i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i>
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [-InputObject] <i><b>CimInstance</b></i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i>
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i> [-Namespace <i>String</i>]
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 <b>-ResourceUri</b> <i>Uri</i>
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i> [-Namespace <i>String</i>]
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-QueryDialect <i>String</i>] <b>-Query</b> <i>String
 </i> [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Arguments <i>IDictionary</i>
 Specifies the parameters to pass to the called method.
 Specify the values for this parameter as name-value pairs, stored in a hash table.
 The order of the values entered is not important.
 -CimClass <i>CimClass</i>
 Specifies a CIM class object that represents a CIM class definition on the server.
 Use this parameter when invoking a static method of a class.
 You can use the Get-CimClass cmdlet to retrieve a class definition from the server.
 Using this parameter results in better client side schema validations.
 -CimSession <i>CimSession</i>[]
 Run the command using the specified CIM session. Enter a variable that contains the CIM session, or a command
 that creates or gets the CIM session, such as the New-CimSession or Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 
 -ClassName <i>String</i>
 The name of the CIM class for which to perform the operation. This parameter is only used for static methods. 
 NOTE: You can use tab completion to browse the list of classes, because wps_2 gets a list of classes from the 
 local WMI server to provide a list of class names.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), a NetBIOS name, or an IP address.
 
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -InputObject <i>CimInstance</i>
 A CIM instance object to use as input to invoke a method.
 This parameter can only be used to invoke instance methods.
 To invoke class static methods, use the -Class parameter or the -CimClass parameter.
 -MethodName <i>String</i>
 The name of the CIM <i>method</i> to invoke. This parameter is mandatory and cannot be null or empty.
 To invoke static method of a CIM class use the ClassName or the CimClass parameter.
 -Namespace <i>String</i>
 Specifies the namespace for CIM operation. The default namespace is root/cimv2.
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -Query <i>String</i>
 Specifies a query to run on the CIM server.
 A method is invoked on the instances received as a result of the query.
 You can specify the query dialect using the -QueryDialect parameter.
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape
 those characters by prefixing them with the backslash (\) character.
 If the value specified uses the WQL LIKE operator, then you must escape the following characters by
 enclosing them in square brackets ([]): percent(%), underscore (_), or opening square bracket ([).
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter. psdx_paramvalues WQL or CQL.
 The default value is WQL.
 -ResourceUri <i>Uri
 </i> Specifies the resource uniform resource identifier (URI) of the resource class or instance.
 The URI is used to identify a specific type of resource, such as disks or processes, on a computer.
 A URI consists of a prefix and a path to a resource.
 For example:
 HYPERLINK &quot;http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk&quot;
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 HYPERLINK &quot;http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings&quot;
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 By default, if you do not specify this parameter, the DMTF standard resource URI
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/
 is used and the class name is appended to it.
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying
 the -ComputerName parameter, which creates a CIM session using WSMan.
 If you specify this parameter without specifying the -ComputerName parameter, or if you specify
 a CIM session created using DCOM protocol, you will get an error, because the DCOM protocol
 does not support the -ResourceURI parameter.
 If both -ResourceUri and -Filter are specified, the -Filter parameter is ignored.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
","https://ss64.com/ps/invoke-cimmethod.html","System Utility","CIM"
"icim","Invoke a method of a CIM class or CIM instance."," Invoke-CimMethod [<b>-ClassName</b>] <i>String</i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String
 </i> <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-Namespace <i>String</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [<b>-CimClass</b>] <i>CimClass</i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i>
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [-InputObject] <i><b>CimInstance</b></i> [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i>
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-ResourceUri <i>Uri</i>]
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i> [-Namespace <i>String</i>]
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 <b>-ResourceUri</b> <i>Uri</i>
 [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-CimMethod [[-Arguments] <i>IDictionary</i>] [-MethodName] <i>String</i> [-Namespace <i>String</i>]
 <b>[</b> [-ComputerName <i>String</i>[]] <b>|</b> -CimSession <i>CimSession</i>[] <b>]</b>
 [-QueryDialect <i>String</i>] <b>-Query</b> <i>String
 </i> [-OperationTimeoutSec <i>UInt32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Arguments <i>IDictionary</i>
 Specifies the parameters to pass to the called method.
 Specify the values for this parameter as name-value pairs, stored in a hash table.
 The order of the values entered is not important.
 -CimClass <i>CimClass</i>
 Specifies a CIM class object that represents a CIM class definition on the server.
 Use this parameter when invoking a static method of a class.
 You can use the Get-CimClass cmdlet to retrieve a class definition from the server.
 Using this parameter results in better client side schema validations.
 -CimSession <i>CimSession</i>[]
 Run the command using the specified CIM session. Enter a variable that contains the CIM session, or a command
 that creates or gets the CIM session, such as the New-CimSession or Get-CimSession cmdlets. For more 
 information, see about_CimSessions.
 
 -ClassName <i>String</i>
 The name of the CIM class for which to perform the operation. This parameter is only used for static methods. 
 NOTE: You can use tab completion to browse the list of classes, because wps_2 gets a list of classes from the 
 local WMI server to provide a list of class names.
 
 -ComputerName <i>String</i>[]
 The computer on which you want to run the CIM operation. You can specify a fully qualified domain name 
 (FQDN), a NetBIOS name, or an IP address.
 
 If you specify this parameter, the cmdlet creates a temporary session to the specified computer using the 
 WsMan protocol.If you do not specify this parameter, the cmdlet performs the operation on the local computer
 using Component Object Model (COM).
 If multiple operations are being performed on the same computer, using a CIM session gives better performance.
 
 -InputObject <i>CimInstance</i>
 A CIM instance object to use as input to invoke a method.
 This parameter can only be used to invoke instance methods.
 To invoke class static methods, use the -Class parameter or the -CimClass parameter.
 -MethodName <i>String</i>
 The name of the CIM <i>method</i> to invoke. This parameter is mandatory and cannot be null or empty.
 To invoke static method of a CIM class use the ClassName or the CimClass parameter.
 -Namespace <i>String</i>
 Specifies the namespace for CIM operation. The default namespace is root/cimv2.
 NOTE: You can use tab completion to browse the list of namespaces, because wps_2 gets a list of namespaces
 from the local WMI server to provide the list of namespaces.
 
 -OperationTimeoutSec <i>UInt32</i>
 Specifies the amount of time that the cmdlet waits for a response from the computer.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 
 -Query <i>String</i>
 Specifies a query to run on the CIM server.
 A method is invoked on the instances received as a result of the query.
 You can specify the query dialect using the -QueryDialect parameter.
 If the value specified contains double quotes (“), single quotes (‘), or a backslash (\), you must escape
 those characters by prefixing them with the backslash (\) character.
 If the value specified uses the WQL LIKE operator, then you must escape the following characters by
 enclosing them in square brackets ([]): percent(%), underscore (_), or opening square bracket ([).
 -QueryDialect <i>String</i>
 Specifies the query language used for the Query parameter. psdx_paramvalues WQL or CQL.
 The default value is WQL.
 -ResourceUri <i>Uri
 </i> Specifies the resource uniform resource identifier (URI) of the resource class or instance.
 The URI is used to identify a specific type of resource, such as disks or processes, on a computer.
 A URI consists of a prefix and a path to a resource.
 For example:
 HYPERLINK &quot;http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk&quot;
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 HYPERLINK &quot;http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings&quot;
 http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings
 By default, if you do not specify this parameter, the DMTF standard resource URI
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/
 is used and the class name is appended to it.
 ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying
 the -ComputerName parameter, which creates a CIM session using WSMan.
 If you specify this parameter without specifying the -ComputerName parameter, or if you specify
 a CIM session created using DCOM protocol, you will get an error, because the DCOM protocol
 does not support the -ResourceURI parameter.
 If both -ResourceUri and -Filter are specified, the -Filter parameter is ignored.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
","https://ss64.com/ps/invoke-cimmethod.html","System Utility","CIM"
"Get-CimSession","Get current CIM session objects."," Get-CimSession [[-ComputerName] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession [-Id] <i>UInt32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession -InstanceId <i>Guid</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession -Name <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>String</i>[]
 The name of the computer from which to get CIM sessions. range operator (..) to specify a range of IDs.
 An ID is an integer that uniquely identifies the CIM session in the current wps_2 session.
 It is easier to remember and type than InstanceId, but it is unique only within the current wps_2 session.
 
 -InstanceId <i>Guid</i>[]
 The instance IDs of the CIM session to get.
 
 InstanceID is a GUID that uniquely identifies a CIM session.
 The InstanceID is unique, even when you have multiple sessions running in wps_2.
 
 The InstanceID is stored in the InstanceID property of the object that represents a CIM session.
 
 -Name <i>String</i>[]
 Get one or more CIM sessions which contain the specified friendly names. Wildcard characters are permitted.
","https://ss64.com/ps/get-cimsession.html","System Utility, Enumeration","CIM"
"gcms","Get current CIM session objects."," Get-CimSession [[-ComputerName] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession [-Id] <i>UInt32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession -InstanceId <i>Guid</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-CimSession -Name <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>String</i>[]
 The name of the computer from which to get CIM sessions. range operator (..) to specify a range of IDs.
 An ID is an integer that uniquely identifies the CIM session in the current wps_2 session.
 It is easier to remember and type than InstanceId, but it is unique only within the current wps_2 session.
 
 -InstanceId <i>Guid</i>[]
 The instance IDs of the CIM session to get.
 
 InstanceID is a GUID that uniquely identifies a CIM session.
 The InstanceID is unique, even when you have multiple sessions running in wps_2.
 
 The InstanceID is stored in the InstanceID property of the object that represents a CIM session.
 
 -Name <i>String</i>[]
 Get one or more CIM sessions which contain the specified friendly names. Wildcard characters are permitted.
","https://ss64.com/ps/get-cimsession.html","System Utility, Enumeration","CIM"
"New-CimSession","Create a CIM session."," New-CimSession [[-ComputerName] <i>String[]</i>] [[<b>-Credential</b>] <i>PSCredential</i>] [-Name <i>String</i>]
 [-Port <i>UInt32</i>] [-SessionOption <i>CimSessionOptions</i>] [-Authentication <i>PasswordAuthenticationMechanism</i>]
 [-SkipTestConnection] [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimSession [[-ComputerName] <i>String[]</i>] [<b>-CertificateThumbprint</b> <i>String</i>] [-Name <i>String</i>] 
 [-Port <i>UInt32</i>] [-SessionOption <i>CimSessionOptions</i>]
 [-SkipTestConnection] [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Authentication <i>PasswordAuthenticationMechanism</i>
 The authentication type used for the user's credentials. psdx_paramvaluesDefault, Digest, Negotiate, 
 Basic, Kerberos, NtlmDomain and CredSsp.
 You cannot use the NtlmDomain authentication type for connection to the local computer. CredSSP authentication 
 is available only in firstref_vista, firstref_longhorn, and later versions of Windows.
 Caution: Credential Security Service Provider (CredSSP) authentication, in which the user’s credentials are 
 passed to a remote computer to be authenticated, is designed for commands that require authentication on more 
 than one resource, such as accessing a remote network share. This mechanism increases the security risk of the 
 remote operation. If the remote computer is compromised, the credentials that are passed to it can be used to 
 control the network session.
 -CertificateThumbprint <i>String</i>
 The digital public key certificate (X.509) of a user account that has permission to perform this action.
 Enter the certificate thumbprint of the certificate.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem cmdlets in the wps_1 Certificate provider. 
 For more information about using the wps_2 Certificate provider, type Get-Help Certificate, or see Get-CimSession cmdlet. 
 The name is not required to be unique to the computer or the current session.
 
 -OperationTimeoutSec <i>UInt32</i>
 Duration for which the cmdlet waits for a response from the server.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -Port <i>UInt32</i>
 Specifies the network port on the remote computer that is used for this connection. To connect to a remote 
 computer, the remote computer must be listening on the port that the connection uses. The default ports are 
 5985 (the WinRM port for HTTP) and 5986 (the WinRM port for HTTPS).
 Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that 
 port. Use the following commands to configure the listener: 
 
 1. winrm delete winrm/config/listener?Address=*+Transport=HTTP 
 2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port=<i>port-number</i>}
 
 Do not use the Port parameter unless you must. The port setting in the command applies to all computers or 
 sessions on which the command runs. An alternate port setting might prevent the command from running on all 
 computers.
 -SessionOption <i>CimSessionOptions</i>
 Sets advanced options for the new CIM session. Enter the name of a CimSessionOption object created by using 
 the New-CimSessionOption cmdlet.
 -SkipTestConnection
 By default, the New-CimSession cmdlet establishes a connection with a remote WS-Management endpoint for two 
 reasons: to verify that the remote server is listening on the port number that is specified by using the Port 
 parameter, and to verify the specified account credentials. The verification is accomplished by using a 
 standard WS-Identity operation. You can add the SkipTestConnection switch parameter if the remote 
 WS-Management endpoint cannot use WS-Identify, or if you want to reduce some data transmission time.
","https://ss64.com/ps/new-cimsession.html","System Utility","CIM"
"ncms","Create a CIM session."," New-CimSession [[-ComputerName] <i>String[]</i>] [[<b>-Credential</b>] <i>PSCredential</i>] [-Name <i>String</i>]
 [-Port <i>UInt32</i>] [-SessionOption <i>CimSessionOptions</i>] [-Authentication <i>PasswordAuthenticationMechanism</i>]
 [-SkipTestConnection] [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-CimSession [[-ComputerName] <i>String[]</i>] [<b>-CertificateThumbprint</b> <i>String</i>] [-Name <i>String</i>] 
 [-Port <i>UInt32</i>] [-SessionOption <i>CimSessionOptions</i>]
 [-SkipTestConnection] [-OperationTimeoutSec <i>UInt32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Authentication <i>PasswordAuthenticationMechanism</i>
 The authentication type used for the user's credentials. psdx_paramvaluesDefault, Digest, Negotiate, 
 Basic, Kerberos, NtlmDomain and CredSsp.
 You cannot use the NtlmDomain authentication type for connection to the local computer. CredSSP authentication 
 is available only in firstref_vista, firstref_longhorn, and later versions of Windows.
 Caution: Credential Security Service Provider (CredSSP) authentication, in which the user’s credentials are 
 passed to a remote computer to be authenticated, is designed for commands that require authentication on more 
 than one resource, such as accessing a remote network share. This mechanism increases the security risk of the 
 remote operation. If the remote computer is compromised, the credentials that are passed to it can be used to 
 control the network session.
 -CertificateThumbprint <i>String</i>
 The digital public key certificate (X.509) of a user account that has permission to perform this action.
 Enter the certificate thumbprint of the certificate.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem cmdlets in the wps_1 Certificate provider. 
 For more information about using the wps_2 Certificate provider, type Get-Help Certificate, or see Get-CimSession cmdlet. 
 The name is not required to be unique to the computer or the current session.
 
 -OperationTimeoutSec <i>UInt32</i>
 Duration for which the cmdlet waits for a response from the server.
 
 By default, the value of this parameter is 0, which means that the cmdlet uses the default timeout value for 
 the server.
 If the OperationTimeoutSec parameter is set to a value less than the robust connection retry timeout of 3 
 minutes, network failures that last more than the value of the OperationTimeoutSec parameter are not 
 recoverable, because the operation on the server times out before the client can reconnect.
 -Port <i>UInt32</i>
 Specifies the network port on the remote computer that is used for this connection. To connect to a remote 
 computer, the remote computer must be listening on the port that the connection uses. The default ports are 
 5985 (the WinRM port for HTTP) and 5986 (the WinRM port for HTTPS).
 Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that 
 port. Use the following commands to configure the listener: 
 
 1. winrm delete winrm/config/listener?Address=*+Transport=HTTP 
 2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port=<i>port-number</i>}
 
 Do not use the Port parameter unless you must. The port setting in the command applies to all computers or 
 sessions on which the command runs. An alternate port setting might prevent the command from running on all 
 computers.
 -SessionOption <i>CimSessionOptions</i>
 Sets advanced options for the new CIM session. Enter the name of a CimSessionOption object created by using 
 the New-CimSessionOption cmdlet.
 -SkipTestConnection
 By default, the New-CimSession cmdlet establishes a connection with a remote WS-Management endpoint for two 
 reasons: to verify that the remote server is listening on the port number that is specified by using the Port 
 parameter, and to verify the specified account credentials. The verification is accomplished by using a 
 standard WS-Identity operation. You can add the SkipTestConnection switch parameter if the remote 
 WS-Management endpoint cannot use WS-Identify, or if you want to reduce some data transmission time.
","https://ss64.com/ps/new-cimsession.html","System Utility","CIM"
"New-CimSessionOption","Advanced options for New-CimSession."," New-CimSessionOption [-Protocol] {Dcom | Default | Wsman}
 [-Culture <i>CultureInfo</i>] [-UICulture <i>CultureInfo</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 New-CimSessionOption [-Culture <i>CultureInfo</i>] [-EncodePortInServicePrincipalName] [-Encoding <i>PacketEncoding</i>] 
 [-HttpPrefix <i>Uri</i>] [-MaxEnvelopeSizeKB <i>UInt32</i>] [-NoEncryption] [-ProxyAuthentication <i>PasswordAuthenticationMechanism</i>]
 [-ProxyCertificateThumbprint <i>String</i>] [-ProxyCredential <i>PSCredential</i>] 
 [-ProxyType <i>ProxyType</i>] [-SkipCACheck] [-SkipCNCheck] [-SkipRevocationCheck] [-UICulture <i>CultureInfo</i>]
 [-UseSsl] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 New-CimSessionOption [-Culture <i>CultureInfo</i>] [-Impersonation <i>ImpersonationType</i>] [-PacketIntegrity] 
 [-PacketPrivacy] [-UICulture <i>CultureInfo</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Culture <i>CultureInfo</i>
 Specifies the user interface culture to use for the CIM session. Specify the value for this parameter using 
 one of the following formats:
 Enter a culture name in <i>languagecode2</i>-<i>country/regioncode2</i> format such as EN-US. 
 A variable that contains a CultureInfo object. 
 A command that gets a CultureInfo object, such as Get-Culture.
 -UseSsl
 Indicates that SSL should be used to establish a connection to the remote computer. By default, SSL is not used.
 WsMan encrypts all content that is transmitted over the network. This parameter lets you specify the 
 additional protection of HTTPS instead of HTTP. If SSL is not available on the port used for the connection 
 and you specify this parameter, then the command fails.
 It is recommended that you use this parameter only when the PacketPrivacy parameter is not specified.
","https://ss64.com/ps/new-cimsessionoption.html","System Utility","CIM"
"Remove-CimSession","Remove one or more CIM session objects."," Remove-CimSession [-CimSession] <i>CimSession</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession [-ComputerName] <i>String</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession [-Id] <i>UInt32</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession -InstanceId <i>Guid</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession -Name <i>String</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Runs the command using the specified CIM session. Enter a variable that contains the CIM session, or a command 
 that creates or gets the CIM session, such as the range operator (..) to specify a range of IDs.
 An ID is an integer that uniquely identifies the CIM session in the current wps_2 session.
 It is easier to remember and type than InstanceId, but it is unique only within the current wps_2 session.
 
 -InstanceId <i>Guid</i>[]
 The instance ID of the CIM session to remove.
 
 InstanceID is a GUID that uniquely identifies a CIM session.
 The InstanceID is unique, even when you have multiple sessions running in wps_2.
 
 The InstanceID is stored in the InstanceID property of the object that represents a CIM session.
 
 -Name <i>String</i>[]
 The friendly name of the CIM session to remove. You can use wildcard characters with this parameter.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-cimsession.html","System Utility","CIM"
"rcms","Remove one or more CIM session objects."," Remove-CimSession [-CimSession] <i>CimSession</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession [-ComputerName] <i>String</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession [-Id] <i>UInt32</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession -InstanceId <i>Guid</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-CimSession -Name <i>String</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession <i>CimSession</i>[]
 Runs the command using the specified CIM session. Enter a variable that contains the CIM session, or a command 
 that creates or gets the CIM session, such as the range operator (..) to specify a range of IDs.
 An ID is an integer that uniquely identifies the CIM session in the current wps_2 session.
 It is easier to remember and type than InstanceId, but it is unique only within the current wps_2 session.
 
 -InstanceId <i>Guid</i>[]
 The instance ID of the CIM session to remove.
 
 InstanceID is a GUID that uniquely identifies a CIM session.
 The InstanceID is unique, even when you have multiple sessions running in wps_2.
 
 The InstanceID is stored in the InstanceID property of the object that represents a CIM session.
 
 -Name <i>String</i>[]
 The friendly name of the CIM session to remove. You can use wildcard characters with this parameter.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-cimsession.html","System Utility","CIM"
"Get-Clipboard","Get the current Windows clipboard entry."," Get-Clipboard [-Format <i>ClipboardFormat</i>] [-TextFormatType <i>TextDataFormat</i>] [-Raw]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Format <i>ClipboardFormat</i>
 The type, or format, of the clipboard.
 Acceptable values for this are: Text, FileDropList, Image, Audio
 -Raw
 Ignore newline characters and get the entire content of the clipboard.
 -TextFormatType <i>TextDataFormat</i>
 The text data format type of the clipboard.
 Acceptable values for this are: Text, UnicodeText, Rtf, Html, CommaSeparatedValue
","https://ss64.com/ps/get-clipboard.html","Enumeration",
"Set-Clipboard","Set the current Windows clipboard entry."," Set-Clipboard [-Append] [-AsHtml] [-Confirm] -LiteralPath <i>String</i>[] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Clipboard [-Append] [-AsHtml] [-Confirm] -Path <i>String</i>[] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Clipboard [-Value] <i>String</i>[] [-Append] [-AsHtml] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Append
 Do not clear the clipboard but append content to it.
 -AsHtml
 Render the content as HTML to the clipboard.
 -LiteralPath <i>String</i>[]
 The path to the item that will be copied to the clipboard.
 Unlike Path, the value of LiteralPath is used exactly as it is typed.
 No characters are interpreted as wildcards.
 If the path includes escape characters, enclose it in single quotation marks this will
 tell PowerShell not to interpret any characters as escape sequences.
 -Path <i>String</i>[]
 The path to the item that will be copied to the clipboard.
 Wildcard characters are permitted.
 -Value <i>String</i>[] 
 Specify, as a string array, the content to copy to the clipboard.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/set-clipboard.html","System Utility",
"Get-Command","Retrieve basic information about a command."," Get-Command [<b>-Noun</b> <i>String</i>[] ] [<b>-Verb</b> <i>String</i>[] ] [[-ArgumentList] <i>Object</i>[] ]
 [-All] [-ListImported] [-Module <i>String</i>[] ] [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-ParameterName <i>String</i>[] ] [-ParameterType <i>PSTypeName</i>[] ] [-ShowCommandInfo]
 [-Syntax] [-TotalCount <i>Int32</i> ] [ <i>CommonParameters</i>]
 Get-Command [[<b>-Name</b>] <i>String</i>[] ] [-CommandType <i>CommandTypes</i> ] [[-ArgumentList] <i>Object</i>[] ]
 [-All] [-ListImported] [-Module <i>String</i>[] ] [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-ParameterName <i>String</i>[] ] [-ParameterType <i>PSTypeName</i>[] ] [-ShowCommandInfo]
 [-Syntax] [-TotalCount <i>Int32</i> ] [-UseFuzzyMatching] [-UseAbbreviationExpansion] [ <i>CommonParameters</i>]
 key
 -Syntax
 Describes the item:
 alias name, cmdlet syntax, function definition, filter definition,
 script path/filename.
 -UseAbbreviationExpansion
 Indicates using matching of the characters in the command to find with uppercase characters in a command.
 For example, i-psdf would match Import-PowerShellDataFile as each of the characters to find matches an
 uppercase character in the result. When using this type of match, any wildcards will result in no matches.
 -UseFuzzyMatching
 Indicates using a fuzzy matching algorithm when finding commands.
 The order of the output is from closest match to least likely match. Wildcards should not be used with fuzzy matching
 as it will attempt to match commands that may contain those wildcard characters.</pre>
","Not Available","https://ss64.com/ps/get-command.html","System Utility",
"gcm","Retrieve basic information about a command."," Get-Command [<b>-Noun</b> <i>String</i>[] ] [<b>-Verb</b> <i>String</i>[] ] [[-ArgumentList] <i>Object</i>[] ]
 [-All] [-ListImported] [-Module <i>String</i>[] ] [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-ParameterName <i>String</i>[] ] [-ParameterType <i>PSTypeName</i>[] ] [-ShowCommandInfo]
 [-Syntax] [-TotalCount <i>Int32</i> ] [ <i>CommonParameters</i>]
 Get-Command [[<b>-Name</b>] <i>String</i>[] ] [-CommandType <i>CommandTypes</i> ] [[-ArgumentList] <i>Object</i>[] ]
 [-All] [-ListImported] [-Module <i>String</i>[] ] [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-ParameterName <i>String</i>[] ] [-ParameterType <i>PSTypeName</i>[] ] [-ShowCommandInfo]
 [-Syntax] [-TotalCount <i>Int32</i> ] [-UseFuzzyMatching] [-UseAbbreviationExpansion] [ <i>CommonParameters</i>]
 key
 -Syntax
 Describes the item:
 alias name, cmdlet syntax, function definition, filter definition,
 script path/filename.
 -UseAbbreviationExpansion
 Indicates using matching of the characters in the command to find with uppercase characters in a command.
 For example, i-psdf would match Import-PowerShellDataFile as each of the characters to find matches an
 uppercase character in the result. When using this type of match, any wildcards will result in no matches.
 -UseFuzzyMatching
 Indicates using a fuzzy matching algorithm when finding commands.
 The order of the output is from closest match to least likely match. Wildcards should not be used with fuzzy matching
 as it will attempt to match commands that may contain those wildcard characters.</pre>
","Not Available","https://ss64.com/ps/get-command.html","System Utility",
"Invoke-Command","Run command."," 
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ComputerName] <i>string</i>[]</b>] 
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>] 
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-Session] <i>PSSession</i>[]</b>] [-AsJob]
 [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection]
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [<b>-ScriptBlock</b>] <i>scriptblock</i>
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-ComputerName] <i>string</i>[]</b>]
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] 
 [-Credential <i>PSCredential</i>] [-HideComputerName] [-JobName <i>string</i>]
 [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-Session] <i>PSSession</i>[]</b>]
 [-AsJob] [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [[<b>-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection] 
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>] [-CertificateThumbprint <i>string</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate URI. 
 When -ConnectionURI is used, the remote destination can return an instruction to
 redirect to a different URI. By default, PowerShell does not redirect connections,
 the AllowRedirection parameter changes this to allow the connection to redirect.
 The number of times that the connection is redirected can be limited by setting the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable,
 or the MaximumConnectionRedirectionCount property of the value of -SessionOption.
 The default value is 5. For more information, see preference variable, if set. Otherwise, the session uses the system defaults.
 -ThrottleLimit <i>int</i>
 The maximum number of concurrent connections that can be established to run this command.
 If you omit this parameter or enter a value of 0, the default value, 32, is used.
 The throttle limit applies only to the current command, not to the session or to the computer.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all PowerShell content transmitted over the network. -UseSSL is
 an additional protection that sends the data across an HTTPS, instead of HTTP.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
","https://ss64.com/ps/invoke-command.html","System Utility","Command Execution"
"icm","Run command."," 
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ComputerName] <i>string</i>[]</b>] 
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>] 
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-Session] <i>PSSession</i>[]</b>] [-AsJob]
 [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection]
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [<b>-ScriptBlock</b>] <i>scriptblock</i>
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-ComputerName] <i>string</i>[]</b>]
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] 
 [-Credential <i>PSCredential</i>] [-HideComputerName] [-JobName <i>string</i>]
 [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-Session] <i>PSSession</i>[]</b>]
 [-AsJob] [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [[<b>-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection] 
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>] [-CertificateThumbprint <i>string</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate URI. 
 When -ConnectionURI is used, the remote destination can return an instruction to
 redirect to a different URI. By default, PowerShell does not redirect connections,
 the AllowRedirection parameter changes this to allow the connection to redirect.
 The number of times that the connection is redirected can be limited by setting the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable,
 or the MaximumConnectionRedirectionCount property of the value of -SessionOption.
 The default value is 5. For more information, see preference variable, if set. Otherwise, the session uses the system defaults.
 -ThrottleLimit <i>int</i>
 The maximum number of concurrent connections that can be established to run this command.
 If you omit this parameter or enter a value of 0, the default value, 32, is used.
 The throttle limit applies only to the current command, not to the session or to the computer.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all PowerShell content transmitted over the network. -UseSSL is
 an additional protection that sends the data across an HTTPS, instead of HTTP.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
","https://ss64.com/ps/invoke-command.html","System Utility","Command Execution"
"Show-Command","Create PowerShell commands in a graphical command window."," Show-Command [[-Name] <i>String</i>] [-ErrorPopup] [-Height <i>Double</i>]
 [-NoCommonParameter] [-PassThru] [-Width <i>Double</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ErrorPopup
 Display errors in a pop-up window, in addition to displaying them at the command line.
 By default, when a command that is run in a Show-Command window generates an error, the error is 
 displayed only at the command line.
 
 Also, when you run the command (by using the Run button in the Show-Command window), the ErrorPopup parameter 
 returns the command results to the current command, instead of running the command and returning its output to 
 a new command. You can use this feature to save the command results in a variable.
 
 -Height <i>Double</i>
 The height of the Show-Command window in pixels. Enter a value between 300 and the number of pixels 
 in the screen resolution. If the value is too large to display the command window on the screen, Show-Command 
 generates an error. The default height is 600 pixels. For a Show-Command command that includes the -Name 
 parameter, the default height is 300 pixels.
 
 -Name <i>String</i>
 Display a command window for the specified command. Enter the name of one command, such as the name of a 
 cmdlet, function, workflow, or CIM command. If you omit this parameter, Show-Command displays a command window 
 that lists all of the PowerShell commands in all modules installed on the computer.
 
 -NoCommonParameter
 Omit the 'Common Parameters' section of the command display. By default, the Common Parameters
 appear in an expandable section at the bottom of the command window.
 
 -PassThru
 Return an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 
 To run the command string, copy and paste it at the command prompt or save it in a variable and use the 
 Invoke-Expression cmdlet to run the string in the variable.
 
 -Width <i>Double</i>
 The width of the Show-Command window in pixels. Enter a value between 300 and the number of pixels 
 in the screen resolution. If the value is too large to display the command window on the screen, Show-Command 
 generates an error. The default width is 300 pixels.
","https://ss64.com/ps/show-command.html","System Utility","Command Execution"
"shcm","Create PowerShell commands in a graphical command window."," Show-Command [[-Name] <i>String</i>] [-ErrorPopup] [-Height <i>Double</i>]
 [-NoCommonParameter] [-PassThru] [-Width <i>Double</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ErrorPopup
 Display errors in a pop-up window, in addition to displaying them at the command line.
 By default, when a command that is run in a Show-Command window generates an error, the error is 
 displayed only at the command line.
 
 Also, when you run the command (by using the Run button in the Show-Command window), the ErrorPopup parameter 
 returns the command results to the current command, instead of running the command and returning its output to 
 a new command. You can use this feature to save the command results in a variable.
 
 -Height <i>Double</i>
 The height of the Show-Command window in pixels. Enter a value between 300 and the number of pixels 
 in the screen resolution. If the value is too large to display the command window on the screen, Show-Command 
 generates an error. The default height is 600 pixels. For a Show-Command command that includes the -Name 
 parameter, the default height is 300 pixels.
 
 -Name <i>String</i>
 Display a command window for the specified command. Enter the name of one command, such as the name of a 
 cmdlet, function, workflow, or CIM command. If you omit this parameter, Show-Command displays a command window 
 that lists all of the PowerShell commands in all modules installed on the computer.
 
 -NoCommonParameter
 Omit the 'Common Parameters' section of the command display. By default, the Common Parameters
 appear in an expandable section at the bottom of the command window.
 
 -PassThru
 Return an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 
 To run the command string, copy and paste it at the command prompt or save it in a variable and use the 
 Invoke-Expression cmdlet to run the string in the variable.
 
 -Width <i>Double</i>
 The width of the Show-Command window in pixels. Enter a value between 300 and the number of pixels 
 in the screen resolution. If the value is too large to display the command window on the screen, Show-Command 
 generates an error. The default width is 300 pixels.
","https://ss64.com/ps/show-command.html","System Utility","Command Execution"
"Measure-Command","Measure running time."," Measure-Command [-expression] <i>scriptblock</i> 
 [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -expression 
 The expression to be timed.
 Enclose the expression in {curly braces}
 -inputObject
 An object that represents an expression.
 A command, expression or variable that contains the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Measure-Command receives one object that represents the collection.
 Because one collection object cannot be measured, Measure-Command returns the entire collection unchanged.
 To measure multiple items, pipe them to Measure-Command.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
","https://ss64.com/ps/measure-command.html","System Utility",
"Trace-Command","Trace an expression or command."," Trace-Command [-command] <i>string </i>[-argumentList <i>Object</i>[]] [-name] <i>string</i>[] 
 [-option] <i>PSTraceSourceOptions</i> [-FilePath <i>string</i>]
 [-debugger] [-PSHost] [-ListenerOption <i>TraceOptions</i>]
 [-inputObject <i>psobject</i>] 
 [-force] [<i><a href=""common.html"">CommonParameters</a></i>]
 Trace-Command [-Expression] <i>scriptblock</i> [-Name] <i>string</i>[] 
 [-Option] <i>PSTraceSourceOptions</i> [-FilePath <i>string</i>]
 [-Debugger] [-PSHost] [-ListenerOption <i>TraceOptions</i>]
 [-InputObject <i>psobject</i>] [-Force] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>[]
 Name of the trace source of each component to be traced.
 Wildcards are permitted.
 Use Get-TraceSource to find the trace sources on your computer.
 -ArgumentList <i>Object</i>[]
 Parameters and parameter values for the command being traced.
 This feature is especially useful for debugging dynamic parameters.
 -Command <i>string
","https://ss64.com/ps/trace-command.html","System Utility",
"Add-Computer","Add a computer to the domain."," Add-Computer [-DomainName] <i>string</i> [-ComputerName <i>String</i>[]]
 [-Force] [-LocalCredential <i>PSCredential</i>] [-NewName <i>String</i>]
 [-Options { AccountCreate | DeferSPNSet | InstallInvoke | JoinReadOnly
 | JoinWithNewName | PasswordPass | UnsecuredJoin | Win9XUpgrade} ]
 [-OUPath <i>String</i>] [-PassThru] [-Restart] [-Server <i>String</i>]
 [-UnjoinDomainCredential <i>PSCredential</i>] [-Unsecure]
 [-Credential <i>PSCredential</i>] 
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-Computer [-WorkGroupName] <i>string</i> [-ComputerName <i>String</i>[]]
 [-Credential <i>PSCredential</i>] [-Force] [-LocalCredential <i>PSCredential</i>]
 [-NewName <i>String</i>] [-PassThru] [-Restart] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/add-computer.html","System Administration","Domain"
"Checkpoint-Computer","Create a system restore point (XP)"," Checkpoint-Computer [-Description] <i>string</i> 
 [[-RestorePointType] <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Description <i>string</i>
 A descriptive name for the restore point. [required]
 
 -RestorePointType <i>string</i>
 The type of restore point:
 
 <u>APPLICATION_INSTALL</u>, APPLICATION_UNINSTALL, DEVICE_DRIVER_INSTALL,
 MODIFY_SETTINGS, or CANCELLED_OPERATION.
","https://ss64.com/ps/checkpoint-computer.html","System Administration",
"Remove-Computer","Remove the local computer from a workgroup or domain."," Remove-Computer [-UnjoinDomainCredential] <i>PSCredential</i> [-ComputerName <i>String</i>[]]
 [-LocalCredential <i>PSCredential</i>] [-WorkgroupName <i>String</i>]
 [-PassThru] [-Restart] [-Confirm] [-Force] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>String</i>[]
 Specify the computers to be removed from their domains. The default is the local computer.
 
 Type the NetBIOS name, an IP address, or a fully qualified domain name of the remote computers.
 To specify the local computer, type the computer name, a dot (.), or localhost.
 This parameter does not rely on PowerShell remoting. You can use the -ComputerName parameter of 
 Remove-Computer even if your computer is not configured to run remote commands.
 
 This parameter was introduced in PowerShell 3.0.
 -UnjoinDomainCredential <i>PSCredential</i>
 Specify a user account that has permission to remove the computers from their current domains. Explicit 
 credentials, as provided by this parameter, are required to remove remote computers from a domain, even when 
 the value is the credentials of the current user.
 
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a PSCredential object, such as one generated by 
 Get-Credential . If you type a user name, you will be prompted for a password.
 You can refer to this parameter by its name, -UnjoinDomainCredential , or its alias, -Credential.
 To specify a user account that has permission to connect to the remote computers, use the -LocalCredential 
 parameter. This parameter was introduced in PowerShell 3.0.
 -LocalCredential <i>PSCredential</i>
 Specify a user account that has permission to connect to the <i>-ComputerName</i>.
 The default is the current user.
 -Force
 Suppresses the user prompt. By default, Remove-Computer prompts for confirmation before removing each computer.
 -PassThru
 Return the results of the command. Otherwise, this cmdlet does not generate any output.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -WorkgroupName <i>String</i>
 Specify the name of a workgroup to which the computers are added when they are removed from their domains. 
 The default value is WORKGROUP. When you remove a computer from a domain, you must add it to a workgroup.
 
 This parameter was introduced in PowerShell 3.0.
","https://ss64.com/ps/remove-computer.html","System Administration",
"Rename-Computer","Rename a computer."," Rename-Computer [-NewName] <i>String</i> [-ComputerName <i>String</i>] [-Confirm] [-DomainCredential <i>PSCredential</i>]
 [-Force] [-LocalCredential <i>PSCredential</i>] [-PassThru] [-Protocol {DCOM | WSMan}] [-Restart] [-WhatIf]
 [-WsmanAuthentication {<u>Default</u> | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>String</i>
 Rename the specified remote computer. The default is the local computer.
 
 Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.
 To specify the local computer, type the computer name, a dot (.), or localhost.
 
 This parameter does not rely on PowerShell remoting. You can use the -ComputerName parameter of 
 Rename-Computer even if your computer is not configured to run remote commands.
 
 -Confirm
 Prompt for confirmation before running the cmdlet.
 
 -DomainCredential <i>PSCredential</i>
 Specify a user account that has permission to connect to the domain.
 Explicit credentials are required to rename a computer that is joined to a domain.
 Type a user name, such as User64 or Domain64\User64, or enter a PSCredential object, such as one generated by 
 the Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.
 To specify a user account that has permission to connect to the computer that is specified by the ComputerName 
 parameter, use the LocalCredential parameter.
 -Force
 Force the command to run without asking for user confirmation.
 -LocalCredential <i>PSCredential</i>
 Specifies a user account that has permission to connect to the computer specified by the ComputerName 
 parameter. The default is the current user.
 Type a user name, such as User64 or Domain64\User64, or enter a PSCredential object, such as one generated by 
 the Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.
 To specify a user account that has permission to connect to the domain, use the DomainCredential parameter.
 -NewName <i>String</i>
 Specify a new name for the computer. This parameter is required. The name cannot include control characters, 
 leading or trailing spaces, or any of the following characters: <b>/ \\ [ ]</b>.
 -PassThru
 Return the results of the command. Otherwise, this cmdlet does not generate any output.
 -Protocol <i>String</i>
 Specifies which protocol to use to rename the computer. The acceptable values for this parameter are: WSMan 
 and DCOM. The default value is DCOM.
 -Restart
 Restart the computer that was renamed. A restart is often required to make the change effective.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
 -WsmanAuthentication <i>String</i>
 The mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol.
 The acceptable values for this parameter are:
 - Basic
 - CredSSP
 - <u>Default</u>
 - Digest
 - Kerberos
 - Negotiate
 
 The default value is Default.
","https://ss64.com/ps/rename-computer.html","System Administration",
"Restart-Computer","Restart the operating system on a computer."," Restart-Computer [[-ComputerName] <i>string</i>[]] [[-Credential] <i>PSCredential</i>]
 [-AsJob] [-Authentication <i>AuthenticationLevel</i>] [-Delay <i>Int16</i>] [-For <i>WaitForServiceTypes</i>] [-Force]
 [-WsmanAuthentication <i>String</i>] [-Impersonation <i>ImpersonationLevel</i>] [-DcomAuthentication <i>AuthenticationLevel</i>] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsJob
 Run the command as a background job.
 When this parameter is used, Restart-Computer will immediately return an
 object that represents the background job.
 You can continue to work in the session while the job completes. 
 The job is created on the local computer and results from remote computers are
 automatically returned to the local computer.
 To manage the job, use the Job cmdlets.
 To get the job results, use Receive-Job.
 To use this parameter, the local and remote computers must be configured for remoting.
 On Windows Vista and later, you must open PowerShell with the &quot;Run as administrator&quot; option.
 -Authentication <i>AuthenticationLevel</i>
 The authentication level that is used for the WMI connection.
 (Restart-Computer uses WMI.) The default value is Packet.
 
 Valid values are:
 Unchanged The authentication level is the same as the previous command.
 Default Windows Authentication
 None No COM authentication
 Connect Connect-level COM authentication
 Call Call-level COM authentication
 <u>Packet</u> Packet-level COM authentication.
 PacketIntegrity Packet Integrity-level COM authentication
 PacketPrivacy Packet Privacy-level COM authentication.
 -ComputerName <i>string</i>[]
 One or more remote computers. The default is the local computer.
 Type the NETBIOS name, an IP address, or a fully qualified domain name
 of a remote computer. To specify the local computer, type the computer name,
 a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 The default is the current user.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a
 PSCredential object, such as one generated by Get-Credential.
 If you type a user name, you will be prompted for a password.
 -Delay
 The frequency of queries, in seconds. PowerShell queries the service specified by the For parameter to
 determine whether the service is available after the computer is restarted.
 This parameter is valid only together with the -Wait and -For parameters.
 This parameter was introduced in Windows PowerShell 3.0.
 If the Delay parameter isn’t specified, Restart-Computer uses a five second delay.
 -Force
 Force an immediate restart of the computer(s).
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use when calling WMI. (Restart-Computer uses WMI.)
 The default value is &quot;Impersonate&quot;.
 Valid values are:
 Default Default impersonation.
 Delegate Delegate impersonation.
 Anonymous Hide the identity of the caller.
 Identify Allow objects to query the credentials of the caller.
 <u>Impersonate</u> Allow objects to use the credentials of the caller.
 -ThrottleLimit <i>int</i>
 The maximum number of concurrent connections that can be established to run this command.
 If this parameter is set to 0, or omitted, the default value of 32, is used.
 The throttle limit applies only to the current command, not to the session.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/restart-computer.html","System Administration",
"Restore-Computer","Restore the computer to a previous state."," Restore-Computer [-RestorePoint] <i>int</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -RestorePoint <i>int</i>
 The sequence number of the restore point.
 To find the sequence number, use Get-ComputerRestorePoint
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/restore-computer.html","System Administration",
"Stop-Computer","Stop (shut down) a computer."," Stop-Computer [[-ComputerName] <i>string</i>[]] [[-Credential] <i>PSCredential</i>]
 [-Authentication <i>AuthenticationLevel</i>] [-Impersonation <i>ImpersonationLevel</i>]
 [-AsJob] [-Force] [-ThrottleLimit <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Authentication <i>AuthenticationLevel
","https://ss64.com/ps/stop-computer.html","System Administration",
"Get-ComputerInfo","Get system and operating system properties."," Get-ComputerInfo [[-Property] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," Property <i>String</i>[]
 A string array of the computer properties to be displayed.
","https://ss64.com/ps/get-computerinfo.html","Enumeration",
"Reset-ComputerMachinePassword","Reset the machine account password for the computer."," Reset-ComputerMachinePassword [-Server <i>string</i>] [-Confirm] [-Credential <i>PSCredential</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Server <i>string</i> The name of a domain controller to use when setting the machine account password.  This parameter is optional.
 If you omit this parameter, a domain controller is chosen to service the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -Credential <i>PSCredential</i>
 Specifies a user account that has permission to perform this action. The default is the current user.
 Type a user name, such as User64 or SS64Dom\User64, or enter a PSCredential object, such as one generated by
 the Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.
 This parameter was introduced in PowerShell 3.0
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/reset-computermachinepassword.html","System Administration",
"Test-ComputerSecureChannel","Test and repair the secure channel to the domain."," Test-ComputerSecureChannel [-Repair] [-Credential <i>PSCredential</i>] [-Server <i>string</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Repair
 Remove and then rebuild the secure channel established by the
 NetLogon service. Use this parameter to try to restore a connection
 that has failed the test (returned &quot;False&quot;.)  To use this parameter, the current user must be a member of
 the Administrators group on the local computer.
 -Credential <i>PSCredential</i>
 Specifies a user account that has permission to perform this action. The default is the current user.
 Type a user name, such as User64 or SS64Dom\User64, or enter a PSCredential object, such as one generated by
 the Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.
 This parameter was introduced in PowerShell 3.0
","https://ss64.com/ps/test-computersecurechannel.html","System Administration","Domain"
"Add-Content","Add to the content of the item."," Add-Content [<b>-Value</b>] <i>Object</i>[] [-Credential <i>PSCredential</i>]
 [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}]
 [-Exclude <i>string</i>[]] [-Filter <i>string</i>] [-Force] [-Include <i>string</i>[]] -LiteralPath <i>string</i>[]
 [-NoNewline] [-PassThru] [-Stream <i>string</i>] [-UseTransaction]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Add-Content [<b>-Path</b>] <i>string</i>[] [-Value] <i>Object</i>[] [-Credential <i>PSCredential</i>]
 [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}]
 [-Exclude <i>string</i>[]] [-Filter <i>string</i>] [-Force] [-Include <i>string</i>[]]
 [-NoNewline] [-PassThru] [-Stream <i>string</i>] [-UseTransaction]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Add-Content [<b>-Encoding</b> {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}]
 [-Force] [-Stream <i>string</i>]
 [-Confirm] [-WhatIf] [-UseTransaction] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Path <i>path</i>
 The path to the item {may be piped} Wildcards are permitted.
 If you specify multiple paths, use commas to separate the paths.
 -LiteralPath <i>string</i>[]
 Path to the items that receive the additional content. No wildcards.
 The value is used exactly as typed. 
 If the path includes escape characters, enclose it in single quotation marks.
 -Include <i>string</i>[]
 Qualify the Path parameter. Enter a path or wildcard pattern: *.txt
 -Exclude <i>string</i>[]
 Omit the specified items. Enter a path or wildcard pattern: *.txt 
 -Filter <i>string</i>[]
 A filter in the provider's format or language.
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved. 
 
 -Value <i>Object</i>[]
 The content to be added. Type a quoted string, such as Sample text
 or specify an object that contains content, such as the DateTime object
 that Get-Date generates. 
 You cannot specify the contents of a file by typing its path, because 
 the path is just a string, but you can use a alternate data stream.
 If the stream does not yet, exist, Add-Content creates it.
 Enter the stream name. Wildcards are not supported.
 Stream is a dynamic FileSystem parameter (PowerShell 3.0+)
","https://ss64.com/ps/add-content.html","File Manipulation",
"ac","Add to the content of the item."," Add-Content [<b>-Value</b>] <i>Object</i>[] [-Credential <i>PSCredential</i>]
 [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}]
 [-Exclude <i>string</i>[]] [-Filter <i>string</i>] [-Force] [-Include <i>string</i>[]] -LiteralPath <i>string</i>[]
 [-NoNewline] [-PassThru] [-Stream <i>string</i>] [-UseTransaction]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Add-Content [<b>-Path</b>] <i>string</i>[] [-Value] <i>Object</i>[] [-Credential <i>PSCredential</i>]
 [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}]
 [-Exclude <i>string</i>[]] [-Filter <i>string</i>] [-Force] [-Include <i>string</i>[]]
 [-NoNewline] [-PassThru] [-Stream <i>string</i>] [-UseTransaction]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Add-Content [<b>-Encoding</b> {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}]
 [-Force] [-Stream <i>string</i>]
 [-Confirm] [-WhatIf] [-UseTransaction] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Path <i>path</i>
 The path to the item {may be piped} Wildcards are permitted.
 If you specify multiple paths, use commas to separate the paths.
 -LiteralPath <i>string</i>[]
 Path to the items that receive the additional content. No wildcards.
 The value is used exactly as typed. 
 If the path includes escape characters, enclose it in single quotation marks.
 -Include <i>string</i>[]
 Qualify the Path parameter. Enter a path or wildcard pattern: *.txt
 -Exclude <i>string</i>[]
 Omit the specified items. Enter a path or wildcard pattern: *.txt 
 -Filter <i>string</i>[]
 A filter in the provider's format or language.
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved. 
 
 -Value <i>Object</i>[]
 The content to be added. Type a quoted string, such as Sample text
 or specify an object that contains content, such as the DateTime object
 that Get-Date generates. 
 You cannot specify the contents of a file by typing its path, because 
 the path is just a string, but you can use a alternate data stream.
 If the stream does not yet, exist, Add-Content creates it.
 Enter the stream name. Wildcards are not supported.
 Stream is a dynamic FileSystem parameter (PowerShell 3.0+)
","https://ss64.com/ps/add-content.html","File Manipulation",
"Get-Content","Get content from item (specific location)."," Get-Content <b>[</b> [-path] <b>|</b> -literalPath <b>]</b> <i>string</i>[]
 [-ReadCount <i>Int64</i>] [-TotalCount <i>Int64</i>]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>]
 [-force] [-credential <i>PSCredential</i>]
 [-Encoding] [-Delimiter <i>String</i>] [-Wait] [<abbr title=""PS 3.0"">-Raw</abbr>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -TotalCount <i>Int64</i>
 Number of lines of content to retrieve. The default is -1 (all lines).
 -ReadCount <i>Int64</i>
 Send <i>n</i> lines of content through the pipeline at a time.
 The default is 1, this will emit each text line separately which is ideal when using the pipeline.
 A value of 0 will send all the content at once, use this when storing the text in a variable.
 
 A low value for ReadCount will return the first line quickly,
 To minimise the total time for the operation choose a high value (or 0).
 -Include <i>string</i>
 Retrieve only the specified items from the Path. 
 Wildcards are permitted. e.g. *.txt
 -Exclude <i>string</i>
 Omit the specified items from the Path (this qualifies the Path parameter)
 Wildcards are permitted. e.g. *.log
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Present a user/password credential to validate access to the file.
 This is not yet supported in any Windows PowerShell core commands.
 -UseTransaction
 Include the command in the active transaction.
 -Encoding <i>CharSet</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 ASCII ASCII (7-bit) character set.
 -Delimiter <i>String</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 The delimiter to use when reading the file. The default is &quot;\n&quot; (end of line).
 -Raw
 Return multiple lines as a single string (PowerShell 3.0)
 In PowerShell 2.0 use the static method: [System.IO.File]::ReadAllText(<i>string path</i>)
 -Wait [<b>Dynamic Parameter (FileSystem Only)</b>]
 Wait for content to be appended to the file.
 If content is appended, the appended content is returned. If the content is changed,
 the entire file is returned. When waiting, Get-Content checks the file once each second until
 interrupted with CTRL+C.
","https://ss64.com/ps/get-content.html","Enumeration, System Utility",
"cat","Get content from item (specific location)."," Get-Content <b>[</b> [-path] <b>|</b> -literalPath <b>]</b> <i>string</i>[]
 [-ReadCount <i>Int64</i>] [-TotalCount <i>Int64</i>]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>]
 [-force] [-credential <i>PSCredential</i>]
 [-Encoding] [-Delimiter <i>String</i>] [-Wait] [<abbr title=""PS 3.0"">-Raw</abbr>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -TotalCount <i>Int64</i>
 Number of lines of content to retrieve. The default is -1 (all lines).
 -ReadCount <i>Int64</i>
 Send <i>n</i> lines of content through the pipeline at a time.
 The default is 1, this will emit each text line separately which is ideal when using the pipeline.
 A value of 0 will send all the content at once, use this when storing the text in a variable.
 
 A low value for ReadCount will return the first line quickly,
 To minimise the total time for the operation choose a high value (or 0).
 -Include <i>string</i>
 Retrieve only the specified items from the Path. 
 Wildcards are permitted. e.g. *.txt
 -Exclude <i>string</i>
 Omit the specified items from the Path (this qualifies the Path parameter)
 Wildcards are permitted. e.g. *.log
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Present a user/password credential to validate access to the file.
 This is not yet supported in any Windows PowerShell core commands.
 -UseTransaction
 Include the command in the active transaction.
 -Encoding <i>CharSet</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 ASCII ASCII (7-bit) character set.
 -Delimiter <i>String</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 The delimiter to use when reading the file. The default is &quot;\n&quot; (end of line).
 -Raw
 Return multiple lines as a single string (PowerShell 3.0)
 In PowerShell 2.0 use the static method: [System.IO.File]::ReadAllText(<i>string path</i>)
 -Wait [<b>Dynamic Parameter (FileSystem Only)</b>]
 Wait for content to be appended to the file.
 If content is appended, the appended content is returned. If the content is changed,
 the entire file is returned. When waiting, Get-Content checks the file once each second until
 interrupted with CTRL+C.
","https://ss64.com/ps/get-content.html","Enumeration, System Utility",
"type","Get content from item (specific location)."," Get-Content <b>[</b> [-path] <b>|</b> -literalPath <b>]</b> <i>string</i>[]
 [-ReadCount <i>Int64</i>] [-TotalCount <i>Int64</i>]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>]
 [-force] [-credential <i>PSCredential</i>]
 [-Encoding] [-Delimiter <i>String</i>] [-Wait] [<abbr title=""PS 3.0"">-Raw</abbr>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -TotalCount <i>Int64</i>
 Number of lines of content to retrieve. The default is -1 (all lines).
 -ReadCount <i>Int64</i>
 Send <i>n</i> lines of content through the pipeline at a time.
 The default is 1, this will emit each text line separately which is ideal when using the pipeline.
 A value of 0 will send all the content at once, use this when storing the text in a variable.
 
 A low value for ReadCount will return the first line quickly,
 To minimise the total time for the operation choose a high value (or 0).
 -Include <i>string</i>
 Retrieve only the specified items from the Path. 
 Wildcards are permitted. e.g. *.txt
 -Exclude <i>string</i>
 Omit the specified items from the Path (this qualifies the Path parameter)
 Wildcards are permitted. e.g. *.log
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Present a user/password credential to validate access to the file.
 This is not yet supported in any Windows PowerShell core commands.
 -UseTransaction
 Include the command in the active transaction.
 -Encoding <i>CharSet</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 ASCII ASCII (7-bit) character set.
 -Delimiter <i>String</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 The delimiter to use when reading the file. The default is &quot;\n&quot; (end of line).
 -Raw
 Return multiple lines as a single string (PowerShell 3.0)
 In PowerShell 2.0 use the static method: [System.IO.File]::ReadAllText(<i>string path</i>)
 -Wait [<b>Dynamic Parameter (FileSystem Only)</b>]
 Wait for content to be appended to the file.
 If content is appended, the appended content is returned. If the content is changed,
 the entire file is returned. When waiting, Get-Content checks the file once each second until
 interrupted with CTRL+C.
","https://ss64.com/ps/get-content.html","Enumeration, System Utility",
"gc","Get content from item (specific location)."," Get-Content <b>[</b> [-path] <b>|</b> -literalPath <b>]</b> <i>string</i>[]
 [-ReadCount <i>Int64</i>] [-TotalCount <i>Int64</i>]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>]
 [-force] [-credential <i>PSCredential</i>]
 [-Encoding] [-Delimiter <i>String</i>] [-Wait] [<abbr title=""PS 3.0"">-Raw</abbr>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The paths to the items from which content is to be retrieved.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -TotalCount <i>Int64</i>
 Number of lines of content to retrieve. The default is -1 (all lines).
 -ReadCount <i>Int64</i>
 Send <i>n</i> lines of content through the pipeline at a time.
 The default is 1, this will emit each text line separately which is ideal when using the pipeline.
 A value of 0 will send all the content at once, use this when storing the text in a variable.
 
 A low value for ReadCount will return the first line quickly,
 To minimise the total time for the operation choose a high value (or 0).
 -Include <i>string</i>
 Retrieve only the specified items from the Path. 
 Wildcards are permitted. e.g. *.txt
 -Exclude <i>string</i>
 Omit the specified items from the Path (this qualifies the Path parameter)
 Wildcards are permitted. e.g. *.log
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -Credential <i>PSCredential</i>
 Present a user/password credential to validate access to the file.
 This is not yet supported in any Windows PowerShell core commands.
 -UseTransaction
 Include the command in the active transaction.
 -Encoding <i>CharSet</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 ASCII ASCII (7-bit) character set.
 -Delimiter <i>String</i> [<b>Dynamic Parameter (FileSystem Only)</b>]
 The delimiter to use when reading the file. The default is &quot;\n&quot; (end of line).
 -Raw
 Return multiple lines as a single string (PowerShell 3.0)
 In PowerShell 2.0 use the static method: [System.IO.File]::ReadAllText(<i>string path</i>)
 -Wait [<b>Dynamic Parameter (FileSystem Only)</b>]
 Wait for content to be appended to the file.
 If content is appended, the appended content is returned. If the content is changed,
 the entire file is returned. When waiting, Get-Content checks the file once each second until
 interrupted with CTRL+C.
","https://ss64.com/ps/get-content.html","Enumeration, System Utility",
"Set-Content","Set content in the item (specific location)."," Set-Content [-path]<i> string</i>[]
 [-value] <i>Object</i>[] [-include <i>string</i>[]] [-exclude <i>string</i>[]] 
 [-filter <i>string</i>] [-NoNewline] [-Encoding <i>CharSet</i>]
 [-passThru] [-force] [-Stream <i>string</i>] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Content -literalPath <i>string</i>[]
 [-value] <i>Object</i>[] [-include <i>string</i>[]] [-exclude <i>string</i>[]] 
 [-filter <i>string</i>] [-NoNewline] [-Encoding <i>CharSet</i>]
 [-passThru] [-force] [-Stream <i>string</i>] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Content [-Stream <i>string</i>] [-Encoding <i>CharSet</i>] [-Force]
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path to the item that will receive the content.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Encoding <i>CharSet </i>[<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 UTF32 UTF-32 format.
 UTF8BOM UTF-8 format with transaction.
","https://ss64.com/ps/set-content.html","method             ",
"sc","Set content in the item (specific location)."," Set-Content [-path]<i> string</i>[]
 [-value] <i>Object</i>[] [-include <i>string</i>[]] [-exclude <i>string</i>[]] 
 [-filter <i>string</i>] [-NoNewline] [-Encoding <i>CharSet</i>]
 [-passThru] [-force] [-Stream <i>string</i>] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Content -literalPath <i>string</i>[]
 [-value] <i>Object</i>[] [-include <i>string</i>[]] [-exclude <i>string</i>[]] 
 [-filter <i>string</i>] [-NoNewline] [-Encoding <i>CharSet</i>]
 [-passThru] [-force] [-Stream <i>string</i>] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Content [-Stream <i>string</i>] [-Encoding <i>CharSet</i>] [-Force]
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path to the item that will receive the content.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Encoding <i>CharSet </i>[<b>Dynamic Parameter (FileSystem Only)</b>]
 Encode in a specific character set:
 Unknown Unknown or invalid. The data can be treated as binary.
 String Use the encoding type for a string. 
 Unicode UTF-16 format little-endian byte order.
 Byte Encode characters as a sequence of bytes.
 BigEndianUnicode UTF-16 format big-endian byte order.
 UTF8 UTF-8 format.
 UTF7 UTF-7 format.
 UTF32 UTF-32 format.
 UTF8BOM UTF-8 format with transaction.
","https://ss64.com/ps/set-content.html","File Manipulation",
"Clear-Content","Remove content from a file/item."," Clear-Content [ [-path] | -literalPath ] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Content [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>] (PowerShell 3.0+)
"," -path <i>string</i>[]
 The paths to the items (not containers) from which content is deleted.
 Wildcards are permitted.
 e.g., you may specify a path to one more files, but not a path to a folder.
 -literalPath <i>string</i>[]
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -include <i>string</i>[]
 Clear only the specified items. e.g. *.txt
 The value of this parameter qualifies the -Path parameter.
 -exclude <i>string</i>[]
 Omit the specified items. e.g. *.txt&quot;
 The value of this parameter qualifies the -Path parameter.
 -filter <i>string</i>
 A filter in the provider's format or language.
 The value of this parameter qualifies the -Path parameter. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Stream <i>string</i>
 Delete the content in the specified alternate data stream, but do not delete
 the alternate data stream. Enter the stream name. Wildcards are not supported.
 -Stream is a dynamic parameter that the FileSystem provider adds to the
 Set-Content cmdlet. This parameter works only in file system drives.
 You can use Clear-Content to clear the content of an alternate data stream. However,
 it is not the recommended way to eliminate security checks that block files
 that are downloaded from the Internet.
 If you verify that a downloaded file is safe, use transaction.
","https://ss64.com/ps/clear-content.html","File Manipulation",
"clc","Remove content from a file/item."," Clear-Content [ [-path] | -literalPath ] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Content [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>] (PowerShell 3.0+)
"," -path <i>string</i>[]
 The paths to the items (not containers) from which content is deleted.
 Wildcards are permitted.
 e.g., you may specify a path to one more files, but not a path to a folder.
 -literalPath <i>string</i>[]
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -include <i>string</i>[]
 Clear only the specified items. e.g. *.txt
 The value of this parameter qualifies the -Path parameter.
 -exclude <i>string</i>[]
 Omit the specified items. e.g. *.txt&quot;
 The value of this parameter qualifies the -Path parameter.
 -filter <i>string</i>
 A filter in the provider's format or language.
 The value of this parameter qualifies the -Path parameter. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Stream <i>string</i>
 Delete the content in the specified alternate data stream, but do not delete
 the alternate data stream. Enter the stream name. Wildcards are not supported.
 -Stream is a dynamic parameter that the FileSystem provider adds to the
 Set-Content cmdlet. This parameter works only in file system drives.
 You can use Clear-Content to clear the content of an alternate data stream. However,
 it is not the recommended way to eliminate security checks that block files
 that are downloaded from the Internet.
 If you verify that a downloaded file is safe, use transaction.
","https://ss64.com/ps/clear-content.html","File Manipulation",
"Continue","Skip just this iteration of a loop.","Not Available","Not Available","https://ss64.com/ps/continue.html","System Utility","Command Execution, Scripting"
"Enable-ComputerRestore","Enable System Restore on a drive."," Enable-ComputerRestore [-Drive] <i>string</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -drive <i>string</i>
 The file system drive, one or more drive letters, each followed by :\ and
 enclosed in quotation marks, such as &quot;C:\&quot; or &quot;D:\&quot;
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/enable-computerrestore.html","System Administration",
"Disable-ComputerRestore","Disable System Restore on a drive."," Disable-ComputerRestore [-Drive] <i>string</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -drive <i>string</i>
 The file system drive, one or more drive letters, each followed by :\ and
 enclosed in quotation marks, such as &quot;C:\&quot; or &quot;D:\&quot;
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/disable-computerrestore.html","System Administration",
"Get-ComputerRestorePoint","Get the restore points on the local computer."," Get-ComputerRestorePoint [[-RestorePoint] <i>Int32</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-ComputerRestorePoint -LastStatus [<i><a href=""common.html"">CommonParameters</a></i>]
"," -LastStatus
 Get the status of the most recent system restore operation.
 -RestorePoint <i>int</i>
 Get the restore points with the specified sequence numbers.
 Enter the sequence numbers of one or more restore points.
 By default, Get-ComputerRestorePoint gets all restore points on the local computer.
","https://ss64.com/ps/get-computerrestorepoint.html","System Administration, Enumeration",
"Test-Connection","Ping one or more computers."," Test-Connection [-ComputerName] <i>string</i>[] [[-Source] <i>string</i>[]]
 [-AsJob] [-Authentication <i>AuthenticationLevel</i>]
 [-BufferSize <i>int</i>] [-Count <i>int</i>] [-Credential <i>PSCredential</i>] [-Delay <i>int</i>]
 [-Impersonation <i>ImpersonationLevel</i>] [-Quiet]
 [-ThrottleLimit <i>int</i>] [-TimeToLive <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Authentication <i>AuthenticationLevel</i>
 The authentication level that is used for the WMI connection.
 Valid values:
 Unchanged The authentication level is the same as the previous command.
 Default Windows Authentication.
 None No COM authentication.
 Connect Connect-level COM authentication.
 Call Call-level COM authentication.
 Packet Packet-level COM authentication.
 PacketIntegrity Packet Integrity-level COM authentication.
 PacketPrivacy Packet Privacy-level COM authentication.
 -BufferSize <i>int</i>
 The size, in bytes, of the buffer sent with this command.
 The default value is 32.
 -ComputerName <i>string</i>[]
 The computers to ping.
 Type the computer names or type IP addresses in IPv4 or IPv6 format.
 Wildcard characters are not permitted. This parameter is required.
 This parameter does not rely on PowerShell remoting.
 -Count <i>int</i>
 The number of echo requests to send.
 The default value is 4.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter
 a PSCredential object, such as one from Get-Credential.
 -Delay <i>int</i>
 The interval between pings, in seconds.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use when calling WMI.
 Valid values:
 Default Default impersonation.
 Anonymous Hides the identity of the caller.
 Identify Allows objects to query the credentials of the caller.
 <u>Impersonate</u> Allows objects to use the credentials of the caller.
 -Quiet
 Suppress all errors and return $True if any pings succeeded
 and $False if all failed.
 -Source <i>string</i>[]
 The names of the computers where the ping originates.
 Enter a comma-separated list of computer names.
 The default is the local computer.
 -ThrottleLimit <i>int
","https://ss64.com/ps/test-connection.html","System Administration, Networking",
"ConvertFrom-CSV","Convert object properties (in CSV format) into CSV objects."," ConvertFrom-CSV [[-Delimiter] <i>char</i>]
 [-InputObject] <i>PSObject</i>[] [-Header <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 ConvertFrom-CSV -UseCulture
 [-InputObject] <i>PSObject</i>[] [-Header <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/convertfrom-csv.html","File Manipulation",
"ConvertTo-CSV","Convert .NET Framework objects into CSV variable-length strings."," ConvertTo-CSV [[-Delimiter] <i>char</i>]
 [-InputObject] <i>psobject</i> [-IncludeTypeInformation] [-NoTypeInformation]
 [-QuoteFields <i>String</i>[]] [-UseQuotes <i>QuoteKind</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 ConvertTo-CSV [-UseCulture]
 [-InputObject] <i>psobject</i> [-IncludeTypeInformation] [-NoTypeInformation]
 [-QuoteFields <i>String</i>[]] [-UseQuotes <i>QuoteKind</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/convertto-csv.html","File Manipulation",
"ConvertFrom-Json","Convert a JSON-formatted string to a custom object."," ConvertFrom-Json [-InputObject] <i>String</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -InputObject <i>String</i>
 The JSON strings to convert to JSON objects. Enter a variable that contains the string, or type a 
 command or expression that gets the string. You can also pipe a string to ConvertFrom-Json .
 
 The -InputObject parameter is required, but its value can be an empty string.
 When the input object is an empty string, ConvertFrom-Json does not generate any output.
 The -InputObject value cannot be $Null.
 <p>Standard '{ &quot;key&quot;:&quot;value1&quot;, &quot;Key&quot;:&quot;value2&quot; }' | ConvertFrom-Json -AsHashtable</p>
","https://ss64.com/ps/convertfrom-json.html","File Manipulation",
"ConvertTo-Json","Convert an object to a JSON-formatted string."," ConvertTo-Json [-InputObject] <i>Object</i>
 [-Compress] [-Depth <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -InputObject <i>Object</i>
 The objects to convert to JSON format. Enter a variable that contains the objects, or type a command 
 or expression that gets the objects. You can also pipe an object to ConvertTo-Json.
 The InputObject parameter is required, but its value can be null ($Null) or an empty string.
 When the input object is $Null, ConvertTo-Json does not generate any output.
 When the input object is an empty string, ConvertTo-Json returns an empty string.
 -Compress
 Omit white space and indented formatting in the output string.
 
 -Depth <i>Int32</i>
 How many levels of contained objects are included in the JSON representation.
 The default value is 2.
","https://ss64.com/ps/convertto-json.html","File Manipulation",
"ConvertTo-Html","Convert the input into an HTML table."," ConvertTo-Html [[-head] <i>string</i>[] ] [[-title] <i>string</i>] [[-body] <i>string</i>[] ]
 [-CssUri <i>Uri</i>] [[-property] <i>Object</i>[] ]
 [-As {<u>TABLE</u> | LIST}] [-inputObject <i>psobject</i>]
 [-PreContent <i>string</i>[]] [-PostContent <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 ConvertTo-Html [-Fragment] [[-property] <i>Object</i>[] ]
 [-As {<u>TABLE</u> | LIST}] [-inputObject <i>psobject</i>]
 [-PreContent <i>string</i>[]] [-PostContent <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -As <i>string</i> Format the object as a table or a list. Valid values are TABLE or LIST.
 -CssUri <i>Uri</i> The Uniform Resource Identifier (pipe them to ConvertTo-Html.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -property <i>Object</i>
 Properties of the input object to appear in the HTML table.
 
 -PreContent <i>string</i>[] Text to add before the opening &lt;TABLE&gt; tag.
 -PostContent <i>string</i>[] Text to add after the closing &lt;/TABLE&gt; tag. 
","https://ss64.com/ps/convertto-html.html","File Manipulation",
"ConvertTo-Xml","Convert the input into XML."," ConvertTo-XML [-InputObject] <i>psobject</i>
 [-As {String | <u>Stream</u> | Document} ]
 [-Depth <i>int</i>] [-NoTypeInformation] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -As <i>string</i> Format as: a String (returns a single string),a Stream (returns an array 
 of strings) or a Document (returns an XmlDocument)
 -CssUri <i>Uri</i> The Uniform Resource Identifier (CommonParameters:
 -Verbose, -Debug, -ErrorAction, -ErrorVariable, -WarningAction, -WarningVariable,
 -OutBuffer -OutVariable.
","https://ss64.com/ps/convertto-xml.html","File Manipulation",
"ConvertFrom-String","Extract and parse structured properties from a string.","Not Available","Not Available","Not Available","File Manipulation",
"cfs","Extract and parse structured properties from a string.","Not Available","Not Available","Not Available","File Manipulation",
"ConvertFrom-StringData","Convert a string containing key and value pairs into a hash table.","Not Available","Not Available","Not Available","File Manipulation",
"ConvertFrom-SecureString","Convert a secure string into an encrypted standard string."," ConvertFrom-SecureString [-secureString] <i>SecureString</i> 
 [[<b>-secureKey</b>] <i>SecureString</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 
 ConvertFrom-SecureString [-secureString] <i>SecureString</i> 
 [<b>-key</b> <i>Byte</i>[]]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," [<i>CommonParameters</i>]
 key
 -secureKey SecureString
 The encryption key as a secure string,
 this is converted to a byte array before being used as the key.
 -key <i>Byte</i>
 The encryption key as a byte array.
","https://ss64.com/ps/convertfrom-securestring.html","File Manipulation","Encryption."
"ConvertTo-SecureString","Convert an encrypted standard string into a secure string."," ConvertTo-SecureString [-String] <i>String</i> 
 [[<b>-secureKey</b>] <i>SecureString</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 
 ConvertTo-SecureString [-String] <i>String</i> 
 [<b>-key</b> <i>Byte</i>[]]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 ConvertTo-SecureString [-String] <i>String</i> 
 [[<b>-asPlainText</b>] [-force]]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," [<i>CommonParameters</i>]
 key
 -secureKey <i>SecureString</i>
 The encryption key as a secure string,
 this is converted to a byte array before being used as the key.
 Valid key lengths are 16, 24, and 32 bytes
 
 -key <i>Byte</i>
 The encryption key as a byte array.
 Valid key lengths are 16, 24, and 32 bytes
 -asPlainText 
 A plain text string to convert to a secure string.
 The text is not encrypted so the input is not protected/confidential
 To use this option, you must also specify -Force
 
 -force 
 Set this to confirm that you understand the security risks of using PlainText
","https://ss64.com/ps/convertto-securestring.html","File Manipulation","Encryption."
"Copy-Item","Copy an item from a namespace location."," Copy-item [[-path] | [-literalPath] ] <i>string</i>[]
 [[-destination] <i>string</i>[]] [-container] [-recurse] [-force]
 [-incude <i>string</i>[] ] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/copy-item.html","File Manipulation",
"copy","Copy an item from a namespace location."," Copy-item [[-path] | [-literalPath] ] <i>string</i>[]
 [[-destination] <i>string</i>[]] [-container] [-recurse] [-force]
 [-incude <i>string</i>[] ] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/copy-item.html","File Manipulation",
"cp","Copy an item from a namespace location."," Copy-item [[-path] | [-literalPath] ] <i>string</i>[]
 [[-destination] <i>string</i>[]] [-container] [-recurse] [-force]
 [-incude <i>string</i>[] ] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/copy-item.html","File Manipulation",
"ci","Copy an item from a namespace location."," Copy-item [[-path] | [-literalPath] ] <i>string</i>[]
 [[-destination] <i>string</i>[]] [-container] [-recurse] [-force]
 [-incude <i>string</i>[] ] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/copy-item.html","File Manipulation",
"Export-Counter","Export Performance Counter data to log files."," Export-Counter [-Path] <i>string</i> -InputObject <i>PerformanceCounterSampleSet</i>[]
 [-Circular] [-FileFormat <i>string</i>] [-Force] [-MaxSize <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Circular
 Indicates that output file should be a circular log with first in, first
 out (FIFO) format. When you include this parameter, the -MaxSize parameter is required.
 -FileFormat
 The output format of the output log file.
 Valid values are CSV, TSV, and BLG. The default value is BLG.
 -Force
 Overwrite and replace an existing file if one exists in the location specified by -Path.
 -InputObject <i>PerformanceCounterSampleSet</i>[]
 The counter data to export.
 Enter a variable that contains the data or a command that gets the data, 
 such as a Get-Counter or Import-Counter command.
 -MaxSize <i>int</i>
 The maximum size of the output file. 
 If the Circular parameter is specified, then when the log file reaches the
 specified maximum size, the oldest entries are deleted as newer ones are added.
 If the Circular parameter is not specified, then when the log file 
 reaches the specified maximum size, no new data is added and the cmdlet
 generates a non-terminating error.
 -Path <i>string</i>
 The path and file name of the output file.
 Enter a relative or absolute path on the local computer, or a UNC path to a remote computer,
 such as \\Computer\Share\file.blg. This parameter is required. 
 Note: The file format is determined by the value of -FileFormat, not by the file name extension.
","https://ss64.com/ps/export-counter.html","System Administration",
"Get-Counter","Get performance counter data."," Get-Counter [-Counter] <i>string</i>[] [-ComputerName <i>string</i>[]] [-Continuous]
 [-MaxSamples <i>Int64</i>] [-SampleInterval <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Counter -ListSet <i>string</i>[] [-ComputerName <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Get data from the specified computer(s).
 Type the NetBIOS name, an Internet Protocol (IP) address, or fully qualified domain names.
 The default value is the local computer.
 Note: Get-Counter does not rely on PowerShell remoting.
 -Continuous
 Get samples continuously until you press CTRL+C.
 By default, Get-Counter gets only one counter sample.
 Use -SampleInterval to set the interval for continuous sampling.
 -Counter <i>string</i>[]
 Get data from the specified performance counters.
 Enter one or more counter paths. Wildcards are permitted only in the Instance value.
 You can also pipe counter path strings to Get-Counter. 
 Each counter path has the following format:
 &quot;[\\&lt;ComputerName&gt;]\&lt;CounterSet&gt;(&lt;Instance&gt;)\&lt;CounterName&gt;&quot; 
 For example: 
 &quot;\\Server01\Processor(2)\% User Time&quot;. 
 The <i>ComputerName</i> element is optional. If you omit it, Get-Counter uses the value of -ComputerName.
 Note: To get correctly formatted counter paths, use -ListSet to get a performance counter set.
 The Paths and PathsWithInstances properties of each performance counter set contain
 the individual counter paths formatted as a string. You can save the counter path strings
 in a variable or pipe the string directly to another Get-Counter command. See the examples.
 -ListSet <i>string</i>[]
 Get the specified performance counter sets on the computers.
 Enter the names of the counter sets. Wildcards are permitted.
 You can also pipe counter set names to Get-Counter.
 -MaxSamples <i>Int64</i>
 The number of samples to get from each counter.
 The default is 1 sample. To get samples continuously (no max sample size), use -Continuous.
 To collect a very large data set, consider running a Get-Counter command as a PowerShell background job.
 For more information, see about_Jobs and Start-Job.
 -SampleInterval <i>int</i>
 The time between samples in seconds.
 The minimum value and the default value are 1 second.
","https://ss64.com/ps/get-counter.html","System Administration, Enumeration",
"Import-Counter","Import performance counter log files."," Import-Counter [-Path] <i>string</i>[] [-Counter <i>string</i>[]] [-EndTime <i>DateTime</i>]
 [-MaxSamples <i>Int64</i>] [-StartTime <i>DateTime</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-Counter [-Path] <i>string</i>[] -ListSet &lt;string[]&gt; [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-Counter [-Path] <i>string</i>[] -Summary [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Counter <i>string</i>[]
 Import data only for the specified performance counters.
 By default, Import-Counter imports all data from all counters in the input files.
 Enter one or more counter paths. Wildcards are permitted in the Instance part of
 the path. 
 Each counter path has the following format. Notice that the ComputerName value is
 required in the path, even on the local computer.
 &quot;\\<i>ComputerName</i>\<i>CounterSet</i>(<i>Instance</i>)\<i>CounterName</i>&quot;
 For example: 
 &quot;\\Server64\Processor(2)\% User Time&quot;
 &quot;\Processor(*)\% Processor Time
 -EndTime <i>DateTime</i>
 Imports only counter data with a timestamp &lt;= <i>DateTime</i>
 Enter a DateTime object, such as one created by Get-Date. 
 By default, all counter data will be imported from the files specified by -Path.
 -Summary
 Get a summary of the imported data, instead of getting individual counter data samples.
","https://ss64.com/ps/import-counter.html","System Administration",
"Get-Credential","Get a security credential (username/password)."," Get-Credential [-credential] <i>PSCredential</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Credential [[-UserName] <i>String</i>] -Message <i>String</i>
"," -credential 
 A user name e.g.User01 or Domain01\User01
 When you submit the command, you are prompted for a password.
 Starting in Windows PowerShell 3.0, if you enter a user name without a domain, Get-Credential no longer
 inserts a backslash before the name.
 If you omit this parameter, you are prompted for a user name and a password.
 -Message <i>String</i>
 A message to appear in the authentication prompt.
 This parameter is designed for use in a function or script.
 Use the message to explain to the user why you are requesting credentials and how they will be used.
 (PowerShell 3.0+)
 -UserName <i>String</i>
 A user name. The authentication prompt will then request a password for the user name.
 By default, the user name is blank and the authentication prompt requests both a user name and password.
 When the authentication prompt appears in a dialog box, the user can edit the specified user name.
 However, the user cannot change the user name when the prompt appears at the command line.
 When using this parameter in a shared function or script, consider all possible presentations.
 (PowerShell 3.0+)
","https://ss64.com/ps/get-credential.html","Enumeration",
"Get-Culture","Get region information (language and keyboard layout)."," Get-Culture [<i><a href=""common.html"">CommonParameters</a></i>]</pre>
","Not Available","https://ss64.com/ps/get-culture.html","Enumeration",
"Set-Culture","Set the user culture for the current user account.","Not Available","Not Available","Not Available","System Administration",
"Get-Date","Get current date and time."," Get-Date [[-date] <i>DateTime</i>]
 [-displayHint {Date | Time | DateTime}]
 {[-format <i>string</i>] | [-<b>u</b>Format <i>string</i>]}
 [-year <i>int</i>] [-month <i>int</i>] [-day <i>int</i>] [-hour <i>int</i>]
 [-minute <i>int</i>] [-second <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-date.html","Enumeration",
"Set-Date","Set system time on the host system."," Set-Date <b>{</b> [-date] <i>DateTime</i>] <b>|</b> [-adjust] <i>TimeSpan</i> <b>}</b>
 [-displayHint <b>{</b>Date <b>|</b> Time <b>|</b> DateTime<b>}</b>]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Date <i>DateTime</i>
 Change the date and time to <i>DateTime</i>.
 Pass a Date-Time object from New-TimeSpan.
 -DisplayHint <i>DisplayHintType</i>
 Display only the Date, only the Time or the DateTime.
 This does not affect the DateTime object that is retrieved.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/set-date.html","System Administration",
"Clear-Disk","Remove all partition information and un-initialize a disk, erasing all data."," Clear-Disk [-Number] <i>UInt32</i>[]
 [-RemoveData] [-RemoveOEM] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-AsJob]
 [-PassThru] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Disk -UniqueId <i>String</i>[]
 [-RemoveData] [-RemoveOEM] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-AsJob]
 [-PassThru] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Disk [-FriendlyName <i>String</i>[]]
 [-RemoveData] [-RemoveOEM] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-AsJob]
 [-PassThru] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Disk -Path <i>String</i>[]
 [-RemoveData] [-RemoveOEM] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-AsJob]
 [-PassThru] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-Disk -InputObject <i>CimInstance</i>[]
 [-RemoveData] [-RemoveOEM] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-AsJob]
 [-PassThru] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsJob Run the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.
 -CimSession Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -Confirm Prompts for confirmation before running the cmdlet.
 -FriendlyName A friendly name of the disk to clear.
 -InputObject The input object that is used in a pipeline command.
 You can pipe a Disk object to the -InputObject parameter.
 -Number The disk number of the disk on which to perform the clear operation.
 For a list of available disks, see the Get-Disk cmdlet.
 -PassThru The cmdlet should output an object representing a disk.
 By default, this cmdlet does not generate any output.
 -Path Specifies the path of the disk to clear.
 -RemoveData Enables the removal of all of the data on the disk.
 -RemoveOEM Enables the removal of any OEM recovery partitions from the disk.
 -ThrottleLimit Specifies the maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then Windows PowerShell calculates
 an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running
 on the computer. The throttle limit applies only to the current cmdlet, not to the session.
 -UniqueId Specifies the UniqueID of the disk to clear.
 -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/clear-disk.html","System Administration","Disk/Volume Management"
"Get-Disk","Get one or more disks visible to the OS.","Not Available","Not Available","Not Available","System Administration, Enumeration","Disk/Volume Management"
"Set-Disk","Set attributes and update a physical disk.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Initialize-Disk","Initialize a RAW disk for first use, this enables formatting.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Mount-DiskImage","Mount a previously created disk image (virtual HD or ISO)","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Remove-Item","Del/erase/rd/rm/rmdir   Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"del","Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"erase","Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"rd","Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"rm","Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"rmdir","Delete an item."," Remove-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-filter <i>string</i>] [-Stream <i>String</i>[]]
 [-recurse] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-Item [-Stream <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Recurse 
 Also delete child items from the specified location.
 When used with -Include, -Recurse may not delete all subfolders or all child items.
 This is a known issue.This behavior was fixed in Windows versions 1909 and newer.
 As a workaround, try piping results of the `Get-ChildItem -Recurse` command to Remove-Item
 -Force
 Override restrictions that prevent the command from succeeding, apart from 
 security settings. e.g. -force will override a files read-only or hidden
 attribute, but will not change file permissions.
 The cmdlet cannot remove constant aliases or variables.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Stream <i>string</i>
 Delete the specified alternate data stream from a file, but do not delete the file.
 Enter the stream name. Wildcards are supported. This parameter is not valid on folders.
 Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet.
 This parameter works only in file system drives.
 You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way 
 to eliminate security checks that block files that are downloaded from the Internet. To verify that a 
 downloaded file is safe, use the Unblock-File cmdlet. PowerShell 3.0+
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-item.html","File Manipulation","Disk/Volume Management"
"Compare-Object","Compare the properties of objects."," Compare-Object [-referenceObject] <i>PSObject</i>[] [-differenceObject] <i>PSObject</i>[] 
 [-syncWindow <i>int</i>] [-property <i>Object</i>[]] [-caseSensitive]
 [-culture <i>string</i>] [-excludeDifferent] [-includeEqual]
 [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -referenceObject <i>PSObject</i>[]
 Object(s) used as a reference for comparison.
 
 -differenceObject <i>PSObject</i>[]
 Object(s) to compare to the reference object(s).
 
 -syncWindow <i>int</i>
 The search region where an attempt is made to re-sync the order if there is no match.
 The Default=[Int32]::MaxValue
 (In PowerShell 1.0 this default was just 5 which is often too low)
 -property <i>Object</i>[]
 Properties of the objects to compare.
 
 -caseSensitive
 Make comparisons case-sensitive.
 
 -culture <i>string</i>
 The culture to use for comparisons.
 
 -excludeDifferent
 Display only the characteristics of compared objects that are equal.
 
 -includeEqual 
 Displays characteristics of compared objects that are equal.
 By default only differences are displayed.
 
 -passThru
 Pass the object created by this cmdlet through the pipeline.
","https://ss64.com/ps/compare-object.html","File Manipulation","File Analysis"
"diff","Compare the properties of objects."," Compare-Object [-referenceObject] <i>PSObject</i>[] [-differenceObject] <i>PSObject</i>[] 
 [-syncWindow <i>int</i>] [-property <i>Object</i>[]] [-caseSensitive]
 [-culture <i>string</i>] [-excludeDifferent] [-includeEqual]
 [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -referenceObject <i>PSObject</i>[]
 Object(s) used as a reference for comparison.
 
 -differenceObject <i>PSObject</i>[]
 Object(s) to compare to the reference object(s).
 
 -syncWindow <i>int</i>
 The search region where an attempt is made to re-sync the order if there is no match.
 The Default=[Int32]::MaxValue
 (In PowerShell 1.0 this default was just 5 which is often too low)
 -property <i>Object</i>[]
 Properties of the objects to compare.
 
 -caseSensitive
 Make comparisons case-sensitive.
 
 -culture <i>string</i>
 The culture to use for comparisons.
 
 -excludeDifferent
 Display only the characteristics of compared objects that are equal.
 
 -includeEqual 
 Displays characteristics of compared objects that are equal.
 By default only differences are displayed.
 
 -passThru
 Pass the object created by this cmdlet through the pipeline.
","https://ss64.com/ps/compare-object.html","File Manipulation","File Analysis"
"compare","Compare the properties of objects."," Compare-Object [-referenceObject] <i>PSObject</i>[] [-differenceObject] <i>PSObject</i>[] 
 [-syncWindow <i>int</i>] [-property <i>Object</i>[]] [-caseSensitive]
 [-culture <i>string</i>] [-excludeDifferent] [-includeEqual]
 [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -referenceObject <i>PSObject</i>[]
 Object(s) used as a reference for comparison.
 
 -differenceObject <i>PSObject</i>[]
 Object(s) to compare to the reference object(s).
 
 -syncWindow <i>int</i>
 The search region where an attempt is made to re-sync the order if there is no match.
 The Default=[Int32]::MaxValue
 (In PowerShell 1.0 this default was just 5 which is often too low)
 -property <i>Object</i>[]
 Properties of the objects to compare.
 
 -caseSensitive
 Make comparisons case-sensitive.
 
 -culture <i>string</i>
 The culture to use for comparisons.
 
 -excludeDifferent
 Display only the characteristics of compared objects that are equal.
 
 -includeEqual 
 Displays characteristics of compared objects that are equal.
 By default only differences are displayed.
 
 -passThru
 Pass the object created by this cmdlet through the pipeline.
","https://ss64.com/ps/compare-object.html","File Manipulation","File Analysis"
"Get-DnsClientCache","Retrieve the content of the local DNS client cache."," Get-DnsClientCache [[-Entry] <i>String</i>[]] [-CimSession <i>CimSession</i>[]] [-Data <i>String</i>[]]
 [-DataLength <i>UInt16</i>[]] [-Name <i>String</i>[]] [-Section <i>Section</i>[]] [-Status <i>Status</i>[]]
 [-ThrottleLimit <i>Int32</i>] [-TimeToLive <i>UInt32</i>[]] [-Type <i>Type</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -CimSession [CimSession[]]
 Runs the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such 
 as the output of a Get-CimSession cmdlet. The default is the current session on the local computer.
 
 -Data [<i>String</i>[]]
 Specifies the record data.
 
 -DataLength [<i>UInt16</i>[]]
 Specifies the record data length.
 
 -Entry [<i>String</i>[]]
 Specifies the cache entry name.
 
 -Name [<i>String</i>[]]
 Specifies the record name.
 
 -Section [<i>Section</i>[]]
 Specifies the record section. The acceptable values for this parameter are:
 
 -- Answer
 -- Authority
 -- Additional
 
 -Status [<i>Status</i>[]]
 Specifies the record status. The acceptable values for this parameter are:
 
 -- Success
 -- NotExist
 -- NoRecords
 
 -ThrottleLimit [<i>Int32</i>]
 Specifies the maximum number of concurrent operations that can be established to run the cmdlet. If this 
 parameter is omitted or a value of 0 is entered, then Windows PowerShell® calculates an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 
 -TimeToLive [<i>UInt32</i>[]]
 Specifies the record time-to-live, in seconds.
 
 -Type [<i>Type</i>[]]
 Specifies the record type. The acceptable values for this parameter are:
 
 -- A
 -- NS
 -- CNAME
 -- SOA
 -- PTR
 -- MX
 -- AAAA
 -- SRV
","https://ss64.com/ps/get-dnsclientcache.html","Enumeration","DNS"
"Clear-DnsClientCache","Clear the content of the DNS client cache."," Clear-DnsClientCache [-CimSession <i>CimSession</i>[]] [-ThrottleLimit <i>Int32</i>]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -CimSession [<i>CimSession</i>[]]
 Runs the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such 
 as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local 
 computer.
 
 -ThrottleLimit [<i>Int32</i>]
 Specifies the maximum number of concurrent operations that can be established to run the cmdlet. If this 
 parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 
 -Confirm
 Prompts for confirmation before running the cmdlet.
 
 -WhatIf
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/clear-dnsclientcache.html","File Manipulation, System Administration","DNS"
"Get-DnsClientServerAddress","Get a DNS server IP address from the interface TCP/IP properties.","Not Available","Not Available","Not Available","Enumeration","DNS"
"Set-DnsClientServerAddress","Set a DNS server IP address on the interface TCP/IP properties. ","Not Available","Not Available","Not Available","System Administration","DNS"
"Resolve-DnsName","Perform a DNS name query resolution for a specified name.  ","Not Available","Not Available","Not Available","Networking","DNS"
"Do","Loop while a condition is True."," [:<i>Loop_label</i>] <b>Do</b>
 {
 <i>command_block
 </i>} <b>while</b> (<i>condition</i>)
"," condition If this evaluates to TRUE the loop {<i>command_block</i>} runs.
 when the loop has run once the condition is evaluated again
 <i>command_block</i> Commands, separated by commas, to run each time the loop repeats.
 :<i>Loop_label</i> An optional label than can be used to break or continue.
","https://ss64.com/ps/do.html","System Utility","Command Execution, Scripting"
"Get-DscConfiguration","Get the current config. of a node."," Get-DscConfiguration [-AsJob] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit Int32] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -AsJob
 Run the cmdlet as a background job.
 Use this parameter to run commands that take a long time to complete. 
 The cmdlet immediately returns an object that represents the job and then displays the command prompt.
 You can continue to work in the session while the job completes. To manage the job, use the Get-CimSession.
 The default is the current session on the local computer.
 
 -ThrottleLimit <i>Int32</i>
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle 
 limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
","https://ss64.com/ps/get-dscconfiguration.html","Enumeration","DNS"
"Get-DscLocalConfigurationManager","Get Local Config Manager settings."," Get-DscLocalConfigurationManager [-AsJob] [-CimSession <i>CimSession</i>[]]
 [-ThrottleLimit Int32] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -AsJob
 Run the cmdlet as a background job.
 Use this parameter to run commands that take a long time to complete. 
 The cmdlet immediately returns an object that represents the job and then displays the command prompt.
 You can continue to work in the session while the job completes. To manage the job, use the Get-CimSession.
 The default is the current session on the local computer.
 
 -ThrottleLimit <i>Int32</i>
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle 
 limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
","https://ss64.com/ps/get-dsclocalconfigurationmanager.html","Enumeration",
"Get-DscResource","Get Desired State Config. resources from a computer."," Get-DscResource [[-Name] <i>String</i>[]] [-Syntax] [<a href=""common.html""><i>CommonParameters</i></a>]
 Key
 -Syntax Indicates that the cmdlet returns the syntax view of the specified
 Desired State Configuration resources.
 The returned syntax shows how to use the resources in a PowerShell script.</pre>
 <p>Get-DscResource retrieves the Desired State Configuration resources present on the computer. It shows built-in and custom providers (created by the user), as well as composite resources (other configurations that are packaged as module or created at run time in the session).</p>
 <span class=""code"">PS C:\&gt; Get-DscResource –Name WindowsFeature -Syntax</span>
"," -Name <i>String</i>[] An array of names of the Desired State Configuration resource to view.
 -Syntax Indicates that the cmdlet returns the syntax view of the specified
 Desired State Configuration resources.
 The returned syntax shows how to use the resources in a PowerShell script.
","https://ss64.com/ps/get-dscresource.html","Enumeration",
"New-DSCCheckSum","Create checksum files for DSC docs/resources."," New-DSCCheckSum [-ConfigurationPath] <i>String</i>[] [[-OutPath] <i>String</i>] [-Force] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -ConfigurationPath <i>String</i>[]
 An array of paths to the Desired State Configuration documents or resource archives.
 -Force
 Indicates that the cmdlet overwrites the specified output file if it already exists.
 -OutPath <i>String
","https://ss64.com/ps/new-dscchecksum.html","File Manipulation",
"Start-DscConfiguration","Apply Desired State config to nodes."," Start-DscConfiguration [[-ComputerName] <i>String</i>[]] [-Path] <i>String</i>
 [-Credential <PSCredential>] [-Force] [-JobName <String>] [-ThrottleLimit <i>Int32</i>]
 [-Wait] [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Start-DscConfiguration [-Path] <i>String</i> [-Force] [-JobName <i>String</i>]
 [-ThrottleLimit <Int32>] <b>-CimSession</b> <i>CimSession</i>[]
 [-Wait] [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -CimSession <i>CimSession</i>[]
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-Credential.
 
 -Force 
 Indicates that the cmdlet pushes configuration to computers.
 Some computers pull configuration data. If you do not specify this parameter and if the computer pulls
 its configuration, the configuration fails.
 
 -JobName <i>String</i>
 Specifies a friendly name for a job.
 If you specify this parameter, the cmdlet runs as a job, and it returns a Job object.
 By default, PowerShell assigns the name Job<i>N</i> where <i>N</i> is an integer.
 If you specify -Wait, do not specify -JobName.
 
 -Path <i>String</i>
 The file path of a folder that contains configuration settings files.
 The cmdlet publishes and applies this configuration to computers specified by -ComputerName.
 
 -ThrottleLimit <i>Int32</i>
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle
 limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
 -Wait
 Block the console until it completes all configuration tasks.
 If you specify this parameter, do not specify the JobName parameter.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/start-dscconfiguration.html","System Administration",
"Write-Output","Write an object to the pipeline."," Write-Output [-inputObject] <i>Object</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>Object</i>
 The object(s) to send along the pipeline.
 A variable, command or expression that gets the objects.
","https://ss64.com/ps/write-output.html","System Utility","Command Execution"
"echo","Write an object to the pipeline."," Write-Output [-inputObject] <i>Object</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>Object</i>
 The object(s) to send along the pipeline.
 A variable, command or expression that gets the objects.
","https://ss64.com/ps/write-output.html","System Utility","Command Execution"
"End","Function END block.","Not Available","Not Available","https://ss64.com/ps/syntax-function-input.html","System Utility","Command Execution, Scripting"
"Get-Event","Get events in the PowerShell event queue."," Get-Event [-EventIdentifier] <i>int</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Event [[-SourceIdentifier] <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -EventIdentifier <i>int</i>
 Get only the events with the specified event identifier.
 -SourceIdentifier <i>string</i>
 Get only events with the specified source identifier.
 The default is all events in the event queue.
 Wildcards are not permitted.
","https://ss64.com/ps/get-event.html","Logging, Enumeration",
"New-Event","Create a new event."," New-Event [[-SourceIdentifier] <i>string</i>] [[-Sender] <i>psobject</i>] [[-EventArguments] <i>PSObject</i>[]]
 [[-MessageData] <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -EventArguments <i>PSObject</i>[]
 An object that contains options for the event.
 -MessageData <i>psobject</i>
 Additional data associated with the event. The value of this parameter appears in the MessageData property of the event object.
 -Sender psobject
 The object that raises the event.
 The default is the Windows PowerShell engine.
 -SourceIdentifier <i>string</i>
 A a name for the new event.
 This parameter is required, and it must be unique in the session.
 The value of this parameter appears in the events SourceIdentifier property.
","https://ss64.com/ps/new-event.html","Logging, Enumeration",
"Remove-Event","Delete events from the event queue."," Remove-Event [-EventIdentifier] <i>int</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Event [[-SourceIdentifier] <i>string</i>]
 [-Confirm] [-WhatIf][<i><a href=""common.html"">CommonParameters</a></i>]
"," -EventIdentifier <i>int</i>
 Remove only the events with the specified event identifier.
 -SourceIdentifier <i>string</i>
 Remove only events with the specified source identifier.
 The default is all events in the event queue.
 Wildcards are not permitted.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describes what would happen if you executed the command
 without actually executing the command.
","https://ss64.com/ps/remove-event.html","File Manipulation, Logging",
"Unregister-Event","Cancel an event subscription."," Unregister-Event [-SubscriptionId] <i>int</i> [-Force]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Unregister-Event [-SourceIdentifier] <i>string</i> [-Force]
 [-Confirm] [-WhatIf][<i><a href=""common.html"">CommonParameters</a></i>]
"," -SubscriptionId <i>int</i>
 Cancel event subscriptions that have the subscription identifier <i>int</i>.
 -SourceIdentifier <i>string</i>
 Cancel event subscriptions that have the source identifier <i>string</i>. 
 -Force
 Cancel all event subscriptions, including subscriptions that were hidden by using the SupportEvent
 parameter of Register-ObjectEvent, Register-WmiEvent, and Register-EngineEvent.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describes what would happen if you executed the command
 without actually executing the command.
","https://ss64.com/ps/unregister-event.html","System Administration, Logging",
"Wait-Event","Wait until a particular event is raised."," Wait-Event [[-SourceIdentifier] <i>string</i>]
 [-Timeout <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -SourceIdentifier <i>string</i>
 Wait only for events with the specified source identifier.
 By default, Wait-Events waits for any event.
 -Timeout <i>int</i>
 The maximum time, in seconds, to wait for the event to occur.
 The default, -1, waits indefinitely.
 The timing starts when you submit the Wait-Event command.
 If the specified time is exceeded, the wait ends and the command prompt returns,
 even if the event has not been raised. No error message is displayed.
","https://ss64.com/ps/wait-event.html","System Utility","Command Execution, Scripting"
"Clear-EventLog","Delete all entries from an event log."," Clear-EventLog [-LogName] <i>string</i>[] [[-ComputerName] <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -logName <i>string</i>
 Name of the log file from which to clear log events.
 -ComputerName <i>string</i>[]
 Clear events from a remote computer.
 The default is the local computer.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
","https://ss64.com/ps/clear-eventlog.html","File Manipulation, Logging",
"Get-Eventlog","Get event log data (2003)."," Get-EventLog [-logName] <i>string</i> [-newest <i>int</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-EventLog [-list] [-asString]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -logName <i>string</i>
 Name of the log file from which to get log events.
 -list 
 Return a list of the log files available.
 -asString 
 Send the output as a string, instead of object(s).
 -newest 
 Gets the newest 'n' event log entries, where 
 'n' represents a numerical value for the newest 
 entries in the eventlog.
","https://ss64.com/ps/get-eventlog.html","Logging, Enumeration",
"Limit-EventLog","Limit the size of the event log."," Limit-EventLog [-LogName] <i>string</i>[] [-ComputerName <i>string</i>[]]
 [-MaximumSize <i>Int64</i>] [-OverFlowAction <i>OverflowAction</i>]
 [-RetentionDays <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 A remote computer. The default is the local computer.
 Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified
 domain name of a remote computer
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on Windows PowerShell remoting.
 -logName <i>string</i>
 The event logs.
 Enter the log name (the value of the Log property; not the LogDisplayName) of one or 
 more event logs , separated by commas. Wildcard characters are not permitted.
 This parameter is required.
 -OverFlowAction <i>OverflowAction</i>
 What happens when the event log reaches its maximum size.
 Valid values are:
 DoNotOverwrite Existing entries are retained and new entries are discarded.
 OverwriteAsNeeded Each new entry overwrites the oldest entry.
 OverwriteOlder New events overwrite events older than the value specified
 by the MinimumRetentionDays property.
 If there are no events older than specified by -MinimumRetentionDays,
 then new events are dicarded.
 This parameter specifies the value of the OverflowAction property of the
 System.Diagnostics.EventLog object that represents a classic event log.
 -RetentionDays <i>int</i>
 The minimum number of days that an event must remain in the event log.
 This parameter specifies the value of the MinimumRetentionDays property of the
 System.Diagnostics.EventLog object that represents a classic event log.
 -whatIf
 Describe the command without actually executing it.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/limit-eventlog.html","System Administration, Logging",
"New-Eventlog","Create a new event log and a new event source."," New-EventLog [-LogName] <i>string</i> [-Source] <i>string</i>[] [[-ComputerName] <i>string</i>[]]
 [-CategoryResourceFile <i>string</i>] [-MessageResourceFile <i>string</i>]
 [-ParameterResourceFile <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CategoryResourceFile <i>string</i>
 Path to the file that contains category strings for the source events.
 Also known as the Category Message File.
 The file must be present on the computer on which the event log is being
 created. This parameter does not create or move files.
 -ComputerName <i>string</i>[]
 Create the new event logs on the specified computers.
 The default is the local computer.
 Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified
 domain name of a remote computer.
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -LogName <i>string</i>
 The name of the event log.
 If the log does not exist, New-EventLog creates the log and uses this
 value for the Log and LogDisplayName properties of the new event log.
 If the log exists, New-EventLog registers a new source for the event log.
 -MessageResourceFile <i>string</i>
 The path to the file that contains message formatting strings for the
 source events. This file is also known as the Event Message File.
 The file must be present on the computer on which the event log is being
 created. This parameter does not create or move files.
 -ParameterResourceFile <i>string</i>
 The path to the file that contains strings used for parameter
 substitutions in event descriptions. 
 This file is also known as the Parameter Message File.
 The file must be present on the computer on which the event log is being
 created. This parameter does not create or move files.
 -Source <i>string</i>[]
 The names of the event log sources, such as application programs that
 write to the event log. This parameter is required.
","https://ss64.com/ps/new-eventlog.html","System Administration, Logging",
"Remove-EventLog","Delete an event log."," Remove-EventLog [-LogName] <i>string</i>[] [[-ComputerName] <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-EventLog [[-ComputerName] <i>string</i>[]] [-Source <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Specify a remote computer. The default is the local computer.
 Type the NetBIOS name, an Internet Protocol (IP) address, or a
 fully qualified domain name of a remote computer.
 This parameter does not rely on PowerShell remoting.
 -LogName <i>string</i>
 The event logs to delete.
 Enter the log name (not the Display Name) of one or 
 more event logs , separated by commas.
 Wildcard characters are not permitted. This parameter is required.
 -Source string[] Unregister the specified event sources.
 Enter the source names (not the executable name), separated by commas.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describes what would happen if you executed the command
 without actually executing the command.
","https://ss64.com/ps/remove-eventlog.html","File Manipulation, Logging",
"Show-EventLog","Display an event log."," Show-EventLog [[-ComputerName] <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Specify a remote computer. The default is the local computer.
 Type the NetBIOS name, an Internet Protocol (IP) address, or a
 fully qualified domain name of a remote computer.
 This parameter does not rely on PowerShell remoting.
","https://ss64.com/ps/show-eventlog.html","Logging, Enumeration",
"Write-EventLog","Write an event to an event log."," Write-EventLog [-LogName] <i>string</i> [-Source] <i>string</i>
 [-EventID] <i>int</i> [-Message] <i>string</i> 
 [[-EntryType] <i>EventLogEntryType</i>] [-Category <i>Int16</i>]
 [-ComputerName <i>string</i>] [-RawData <i>Byte</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Category <i>Int16</i>
 A task category for the event.
 Enter an integer that is associated with the strings in the
 category message file for the event log.
 -ComputerName <i>string</i> 
 Specify a remote computer. The default is the local computer.
 Type the NetBIOS name, an Internet Protocol (IP) address,
 or a fully qualified domain name of a remote computer.
 This parameter does not rely on Windows PowerShell remoting.
 -EntryType <i>EventLogEntryType</i>
 The entry type of the event.
 Valid values are: Error, Warning, <u>Information</u>, SuccessAudit, FailureAudit.
 -EventID <i>int</i>
 The event identifier. This parameter is required.
 -logName <i>string</i>
 Name of the log file to which the event will be written.
 Enter the log name (the value of the Log property, not the LogDisplayName).
 Wildcard characters are not permitted. This parameter is required.
 -Message <i>string</i>
 The event message. This parameter is required.
 -RawData <i>Byte</i>[]
 The binary data that is associated with the event, in bytes.
 -Source &lt;string&gt;
 The event source, which is typically the name of the application
 that is writing the event to the log
","https://ss64.com/ps/write-eventlog.html","File Manipulation, Logging",
"Get-WinEvent","Get event log data (Vista+)."," Get-WinEvent [-LogName] <i>string</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-FilterXPath <i>string</i>]
 [-Force] [-MaxEvents <i>int64</i>] [-Oldest] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent [-Path] <i>string</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-FilterXPath <i>string</i>]
 [-Force] [-MaxEvents <i>int64</i>] [-Oldest] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent [-ProviderName] <i>string</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-FilterXPath <i>string</i> ]
 [-Force] [-MaxEvents <i>int64</i>] [-Oldest] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent -FilterHashTable <i>Hashtable</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>]
 [-Force] [-MaxEvents <i>int64</i>] [-Oldest] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent [-ListLog] <i>string</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent [-ListProvider] <i>string</i>[] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WinEvent -FilterXml <i>XmlDocument</i> [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-Force] [-MaxEvents <i>int64</i>] [-Oldest] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>
 Get events from the event logs on the specified computer.
 Type the NetBIOS name, IP address, or the fully qualified domain name.
 The default is the local computer.
 This parameter accepts only one computer name at a time.
 To find event logs or events on multiple computers, use a complex query that contains several XPath statements. 
 The XML format also allows you to use a &quot;Suppress&quot; XML element that excludes events from the query.
 -FilterXPath <i>string
","https://ss64.com/ps/get-winevent.html","Logging, Enumeration",
"Get-EventSubscriber","Get event subscribers."," Get-EventSubscriber [-SubscriptionId] <i>int</i>
 [[-Force]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-EventSubscriber [[-SourceIdentifier] <i>string</i>]
 [[-Force]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Force
 Get all event subscribers, including subscribers for events that
 are hidden using Register-EngineEvent.
 -SourceIdentifier <i>string</i>
 Get only the event subscribers with the specified property value.
 The default is all event subscribers in the session.
 Wildcards are not permitted. This parameter is case-sensitive.
 -SubscriptionId <i>int</i>
 Get only the specified subscription identifier.
 The default is all event subscribers in the session.
","https://ss64.com/ps/get-eventsubscriber.html","Logging, Enumeration",
"Register-EngineEvent","Subscribe to PowerShell events."," Register-EngineEvent [-SourceIdentifier] <i>string</i> 
 [[-Action] <i>scriptblock</i>] [-Forward] [-MessageData <i>psobject</i>]
 [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>scriptblock</i> Commands to handle the events.
 The commands in the Action run when an event is raised, instead of
 sending the event to the event queue.
 Enclose the commands {in braces} to create a script block. 
 The value of the Action parameter can include the $Event,
 $EventSubscriber, $Sender, $SourceEventArgs, and $SourceArgs automatic variables,
 which provide information about the event to the Action script block.
 For more information, see about_Automatic_Variables.
 Register-EngineEvent will return an event job object that represents the action.
 -Forward
 Send events for this subscription to the session on the local computer.
 Use this parameter when registering for events on a remote computer
 or in a remote session.
 -MessageData <i>psobject</i>
 Additional data associated with the event.
 The value of this parameter appears in the MessageData property of the event object.
 -SourceIdentifier <i>string</i> The source identifier of the event to which you are subscribing.
 The source identifier must be unique in the current session.
 This parameter is required.
 The value of this parameter appears in the SourceIdentifier
 property of the subscriber object and of all event objects associated
 with this subscription.
 -SupportEvent
 Hide the event subscription.
 Use this parameter when the current subscription is part of
 a more complex event registration mechanism and it should not
 be discovered independently.
 To view or cancel a subscription that was created with -SupportEvent,
 use the Force parameter of Unregister-Event.
","https://ss64.com/ps/register-engineevent.html","System Administration, Logging",
"Register-ObjectEvent","Subscribe to .NET events."," Register-ObjectEvent [-InputObject] <i>psobject</i> [-EventName] <i>string</i>
 [[-SourceIdentifier] <i>string</i>] [[-Action] <i>scriptblock</i>]
 [-Forward] [-MessageData <i>psobject</i>]
 [-SupportEvent] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>scriptblock</i> Commands to handle the events.
 The commands in the Action run when an event is raised, instead of
 sending the event to the event queue.
 Enclose the commands in braces ( { } ) to create a script block. 
 The value of the Action parameter can include the $Event,
 $EventSubscriber, $Sender, $SourceEventArgs, and $SourceArgs automatic variables,
 which provide information about the event to the Action script block.
 For more information, see about_Automatic_Variables.
 Register-ObjectEvent will return an event job object that represents the action.
 -EventName <i>string</i> The event to which you are subscribing.
 Enter the event name. This parameter is required.  The value of this parameter is not a name that you select for the event subscription.
 It is the name of an event that the .NET Framework object exposes.
 For example, the ManagementEventWatcher class has events named &quot;Event Arrived&quot; and &quot;Stopped.&quot; To find the event name of an event, use Get-Member.
 -Forward
 Sends events for this subscription to the session on the local computer.
 Use this parameter when you are registering for events on a remote
 computer or in a remote session.
 -InputObject <i>psobject</i> The .NET Framework object that generates the events.
 Enter a variable that contains the object, or type a command or expression
 that gets the object. This parameter is required.
 -MessageData <i>psobject
","https://ss64.com/ps/register-objectevent.html","System Administration, Logging",
"Register-WmiEvent","Subscribe to a WMI event."," Register-WmiEvent [<b>-Class</b>] <i>string</i> [[-SourceIdentifier] <i>string</i>]
 [[-Action] <i>scriptblock</i>] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-Forward] [-MessageData <i>psobject</i>]
 [-Namespace <i>string</i>] [-SupportEvent] [-Timeout <i>Int64</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Register-WmiEvent [<b>-Query</b>] <i>string</i> [[-SourceIdentifier] <i>string</i>]
 [[-Action] <i>scriptblock</i>] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-Forward] [-MessageData <i>psobject</i>]
 [-Namespace <i>string</i>] [-SupportEvent] [-Timeout <i>Int64</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>scriptblock</i> Commands to handle the events.
 The commands in the Action run when an event is raised, instead of
 sending the event to the event queue.
 Enclose the commands {in braces} to create a script block. 
 The value of the Action parameter can include the $Event,
 $EventSubscriber, $Sender, $SourceEventArgs, and $SourceArgs automatic variables,
 which provide information about the event to the Action script block.
 For more information, see about_Automatic_Variables.
 Register-ObjectEvent will return an event job object that represents the action.
 -Class <i>string</i>
 The event to which you are subscribing.
 Enter the WMI class that generates the events. 
 A Class or Query parameter is required in every command.
 -ComputerName <i>string</i>
 Specify a remote computer.
 Enter a NetBIOS name, an IP address, or a fully qualified
 domain name. The default is the local computer. 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 Type a user name, such as &quot;User23&quot; or &quot;Domain64\User21&quot;. Or, enter a
 PSCredential object, such as one from Get-Credential.
 If you type a user name, you will be prompted for a password.
 -Forward
 Send events for this subscription to the session on the local computer.
 Use this parameter when registering for events on a remote computer
 or in a remote session.
 -InputObject <i>psobject</i> The .NET Framework object that generates the events.
 Enter a variable that contains the object, or type a command or expression
 that gets the object. This parameter is required.
 -MessageData <i>psobject
","https://ss64.com/ps/register-wmievent.html","System Administration, Logging",
"Get-ExecutionPolicy","Get the execution policy for the shell."," Get-ExecutionPolicy [[-Scope] <i>ExecutionPolicyScope</i>]
 [-List] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -List Get all execution policy values for the session listed in precedence order.
 By default gets only the effective execution policy.
 -Scope <i>ExecutionPolicyScope</i> Get the execution policy in the specified scope.
 By default gets only the effective execution policy for the current session.
 Valid values:  MachinePolicy Set by a Group Policy for all users of the computer. UserPolicy Set by a Group Policy for the current user of the computer. Process Set for the current PowerShell process. CurrentUser Set for the current user. LocalMachine Set for all users of the computer.
","https://ss64.com/ps/get-executionpolicy.html","Enumeration","Command Execution, Scripting"
"Set-ExecutionPolicy","Change the execution policy (user preference)."," Set-ExecutionPolicy [-executionPolicy] <i>Policy</i>
 <b>{ </b>Unrestricted <b>|</b> RemoteSigned <b>|</b> AllSigned <b>|</b> Restricted <b>|</b> Default <b>|</b> Bypass <b>|</b> Undefined<b>}</b>
 [[-Scope] <i>ExecutionPolicyScope</i> ] [-Force]
 [-whatIf] [-confirm] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -ExecutionPolicy <i>Policy</i>
 A new execution policy for the shell.
 Valid values:
 
 <u>Restricted</u>
 Do not load configuration files or run scripts.
 This is the default.
 
 AllSigned
 Require that all scripts and configuration files be signed
 by a trusted publisher, including scripts that you write on the
 local computer.
 
 RemoteSigned
 Require that all scripts and configuration files downloaded
 from the Internet be signed by a trusted publisher.
 
 Unrestricted
 Load all configuration files and run all scripts.
 If you run an unsigned script that was downloaded from the
 internet, you are prompted for permission before it runs.
 Bypass
 Nothing is blocked and there are no warnings or prompts.
 Undefined
 Remove the currently assigned execution policy from the
 current scope. This parameter will not remove an execution
 policy that is set in a Group Policy scope.
 -Force
 Suppress all prompts.
 By default, Set-ExecutionPolicy displays a warning whenever the
 execution policy is changed.
 -Scope <i>ExecutionPolicyScope</i>
 The scope of the execution policy.
 Valid values:
 Process Affect only the current PowerShell process.
 CurrentUser Affect only the current user.
 LocalMachine Affect all users of the computer.
 To remove an execution policy from a particular scope, set the
 execution policy for that scope to Undefined.
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/set-executionpolicy.html","System Administration","Command Execution, Scripting"
"Export-Clixml","Produce a clixml representation of PowerShell objects."," Export-Clixml [-path] <i>string</i> -inputObject <i>psobject</i>
 [-depth <i>int</i>] [-force] [-encoding <i>string</i>]
 [-noClobber] [-whatIf] [-confirm] [CommonParameters]
"," -Path <i>string
 </i> The XML file to be created.
 -inputObject <i>psobject</i>
 The object to be converted. {may be piped}
 A variable containing the object(s) 
 or a command/expression that returns the object(s).
 -depth <i>int</i> 
 How many levels of contained objects to include in the XML
 A depth of 1 will include Object &gt; properties
 a depth of 2 will include Object &gt; properties &gt;Objects &gt;Properties
 and so on *
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will override a files read-only attribute,
 but will attempt to reset the read-only attribute when the command completes.
 -noClobber
 Do not overwrite the contents of an existing file.
 The default is to overwrite without warning.
 -encoding <i>string</i>
 The type of encoding for the target file. Valid values are:
 ASCII, <u>UTF8</u>, UTF7, UTF32, <u>Unicode</u> , BigEndianUnicode, Default, and OEM.
 In PowerShell 7 and above the default changed from Unicode (UTF-16LE) to UTF8(NoBOM).
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/export-clixml.html","File Manipulation",
"Export-Console","Export console configuration to a file."," Export-Console [[-path] <i>string</i>] [-Force] [-NoClobber]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string
","https://ss64.com/ps/export-console.html","System Administration",
"Export-Csv","Export to Comma Separated Values (spreadsheet)."," Export-Csv [[-Path] <i>String</i>] [-LiteralPath <i>String</i>] [-Force]
 [-Append] [-Encoding <i>Encoding</i>] [-IncludeTypeInformation]
 -InputObject <i>PSObject</i> [-NoTypeInformation] [-NoClobber]
 [-QuoteFields <i>String</i>[]] [-UseQuotes <i>QuoteKind</i>]
 { [[-Delimiter] <i>Char</i>] | [-UseCulture] } 
 [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>] 
"," -Append
 Use this parameter so that Export-CSV adds CSV output to the end of the specified file.
 Without this parameter, Export-CSV replaces the file contents without warning.
 This parameter was introduced in Windows PowerShell 3.0.
 -Delimiter <i>char</i>
 A delimiter to separate the property values.
 The default is a comma (,). Enter a character, such as a colon (:). 
 To specify a semicolon (;), enclose it in quotation marks.
 -Encoding string
 The encoding for the exported CSV file.
 Valid values are: ASCII, Unicode, UTF7*, UTF8, utf8BOM, utf8NoBOM, UTF32, 
 BigEndianUnicode, bigendianutf32, and OEM.
 Defaults: PowerShell 1-6: ASCII, PowerShell 7+ = UTF8 (NoBOM).
 UTF-7* is no longer recommended 
 -Force
 Overwrite files with the Read Only attribute.
 -InputObject <i>psobject</i>
 The object(s) to export as CSV strings. Enter a variable that contains the
 object(s) or type a command or expression that gets the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Export-Csv receives one object that represents the collection.
 Because one object cannot be converted, Export-Csv returns the entire collection unchanged.
 To convert multiple items, Get-Culture).TextInfo.ListSeparator.
 -UseQuotes
 Specifies when quotes are used in the CSV files.
 Possible values are:
 Never - don’t quote anything
 Always - quote everything (default behavior)
 AsNeeded - only quote fields that contain a delimiter character
 This parameter was added in PowerShell 7.0.
 
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/export-csv.html","File Manipulation",
"epcsv","Export to Comma Separated Values (spreadsheet)."," Export-Csv [[-Path] <i>String</i>] [-LiteralPath <i>String</i>] [-Force]
 [-Append] [-Encoding <i>Encoding</i>] [-IncludeTypeInformation]
 -InputObject <i>PSObject</i> [-NoTypeInformation] [-NoClobber]
 [-QuoteFields <i>String</i>[]] [-UseQuotes <i>QuoteKind</i>]
 { [[-Delimiter] <i>Char</i>] | [-UseCulture] } 
 [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>] 
"," -Append
 Use this parameter so that Export-CSV adds CSV output to the end of the specified file.
 Without this parameter, Export-CSV replaces the file contents without warning.
 This parameter was introduced in Windows PowerShell 3.0.
 -Delimiter <i>char</i>
 A delimiter to separate the property values.
 The default is a comma (,). Enter a character, such as a colon (:). 
 To specify a semicolon (;), enclose it in quotation marks.
 -Encoding string
 The encoding for the exported CSV file.
 Valid values are: ASCII, Unicode, UTF7*, UTF8, utf8BOM, utf8NoBOM, UTF32, 
 BigEndianUnicode, bigendianutf32, and OEM.
 Defaults: PowerShell 1-6: ASCII, PowerShell 7+ = UTF8 (NoBOM).
 UTF-7* is no longer recommended 
 -Force
 Overwrite files with the Read Only attribute.
 -InputObject <i>psobject</i>
 The object(s) to export as CSV strings. Enter a variable that contains the
 object(s) or type a command or expression that gets the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Export-Csv receives one object that represents the collection.
 Because one object cannot be converted, Export-Csv returns the entire collection unchanged.
 To convert multiple items, Get-Culture).TextInfo.ListSeparator.
 -UseQuotes
 Specifies when quotes are used in the CSV files.
 Possible values are:
 Never - don’t quote anything
 Always - quote everything (default behavior)
 AsNeeded - only quote fields that contain a delimiter character
 This parameter was added in PowerShell 7.0.
 
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/export-csv.html","File Manipulation",
"Exit-PSSession","Exit a PowerShell session."," Exit-PSSession [<i><a href=""common.html"">CommonParameters</a></i>] <i>ErrorLevel</i>
"," <i>ErrorLevel</i> An exit code to return between 0 and 65535.
 An exit code of 0 indicates success.
 <p>Standard Exit - Keyword, Exit a script or exit PowerShell.
","https://ss64.com/ps/exit-pssession.html","System Utility",
"Exsn","Exit a PowerShell session."," Exit-PSSession [<i><a href=""common.html"">CommonParameters</a></i>] <i>ErrorLevel</i>
"," <i>ErrorLevel</i> An exit code to return between 0 and 65535.
 An exit code of 0 indicates success.
 <p>Standard Exit - Keyword, Exit a script or exit PowerShell.
","https://ss64.com/ps/exit-pssession.html","System Utility",
"Exit","Exit a script or exit PowerShell.","Not Available","Not Available","https://ss64.com/ps/exit.html","System Utility",
"Unblock-File","Unblock files downloaded from the Internet."," Unblock-File [ [-path] | -literalPath ] <i>string</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>[]
 The files to unblock. Wildcard characters are supported.
 -literalPath <i>string</i>[]
 The files to unblock, like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -confirm
 Prompt for confirmation before executing the cmdlet.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/unblock-file.html","System Administration, File Manipulation",
"Get-FileHash","Compute the hash value for a file."," Get-FileHash [-Path] <i>String</i>[]
 [-Algorithm {SHA1 | <u>SHA256</u> | SHA384 | SHA512 | MACTripleDES | MD5 | RIPEMD160}]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-FileHash <b>-LiteralPath</b> <i>String</i>[]
 [-Algorithm {SHA1 | <u>SHA256</u> | SHA384 | SHA512 | MACTripleDES | MD5 | RIPEMD160}]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-FileHash <b>-InputStream</b> <i>Stream</i>
 [-Algorithm {SHA1 | <u>SHA256</u> | SHA384 | SHA512 | MACTripleDES | MD5 | RIPEMD160}]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Algorithm <i>String</i>
 The cryptographic hash function to use for computing the hash value of the contents of the specified file.
 A cryptographic hash function includes the property that it is not possible to find two distinct inputs
 that generate the same hash values. Hash functions are commonly used with digital signatures and for data
 integrity.
 Accepted values:
 SHA1, <u>SHA256</u>, SHA384, SHA512, MD5, MACTripleDES, RIPEMD160
 The default value is SHA256.
 For security reasons, MD5 and SHA1, which are no longer considered secure, should only be used for simple change
 validation, and should not be used to generate hash values for files that require protection from attack or tampering.
 MACTripleDES and RIPEMD160 are no longer mentioned in the MS docs, but do still appear to work. MACTripleDES is a
 reversible encryption algorithm which will give a different hash each time it is run.
 -InputStream <i>Stream
 </i> The input stream.
 -LiteralPath <i>String</i>[]
 The path to a file. Unlike the -Path parameter, the value of -LiteralPath is used exactly as it is typed.
 No characters are interpreted as wildcard characters. If the path includes escape characters, enclose the path in
 single quotation marks. Single quotation marks instruct PowerShell not to interpret characters as escape sequences.
 -Path String[]
 The path to one or more files as an array. Wildcard characters are permitted.
","https://ss64.com/ps/get-filehash.html","File Manipulation",
"ForEach","Loop through each item in a collection."," <i>collection</i>.ForEach<b>(</b><i><a href=""syntax-scriptblock.html"">scriptblock_expression</a></i><b>)</b>
 <i>collection</i>.ForEach<b>(</b><i><a href=""syntax-scriptblock.html"">scriptblock_expression</a></i>, <i>object</i>[] <i>arguments</i><b>)</b>
 <i>collection</i>.ForEach(<i>type convertToType</i>)
 <i>collection</i>.ForEach(<i>string propertyName</i>)
 <i>collection</i>.ForEach(<i>string propertyName</i>, <i>object</i>[] <i>newValue</i>)
 <i>collection</i>.ForEach(<i>string methodName</i>)
 <i>collection</i>.ForEach(<i>string methodName</i>, <i>object</i>[] <i>arguments</i>)
"," <i>collection</i> A collection of objects e.g. filenames, registry keys, servernames
 <i>ScriptBlock</i> A block of script to run against each object. 
","https://ss64.com/ps/foreach-method.html","System Utility","Command Execution, Scripting"
"For","Loop through items that match a condition."," for (<i>init</i>; <i>condition</i>; <i>repeat</i>) 
 {<i>command_block</i>}
"," init Commands, separated by commas, to run before the loop begins.
 Typically used to initialize a variable with a starting value.
 condition If this evaluates to TRUE the for loop {<i>command_block</i>} runs
 when the loop has run once the condition is evaluated again
 repeat Commands, separated by commas, to run each time the loop repeats.
","https://ss64.com/ps/for.html","System Utility","Command Execution, Scripting"
"Format-Custom","Format output using a customized view."," Format-Custom [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>]
 [-view <i>string</i>] [-groupBy <i>Object</i>] [-force] [-expand <i>string</i>]
 [-displayError] [-showError]
 [-depth <i>int</i>] [<a href=""common.html"">CommonParameters</a>]
"," -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 -view <i>string</i>
 The name of an alternate format or view. 
 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -force 
 Override restrictions that prevent the command from succeeding, 
 without compromising security. Force will override read-only
 attributes but will not change file permissions.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 'CoreOnly' will format and display properties of the collection object itself, 
 while 'emumOnly' will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 
 -showError 
 Send errors through the pipeline.
 
 -depth <i>int</i>
 The number of columns in the display.
","https://ss64.com/ps/format-custom.html","System Utility","Command Execution, Scripting"
"fc","Format output using a customized view."," Format-Custom [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>]
 [-view <i>string</i>] [-groupBy <i>Object</i>] [-force] [-expand <i>string</i>]
 [-displayError] [-showError]
 [-depth <i>int</i>] [<a href=""common.html"">CommonParameters</a>]
"," -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 -view <i>string</i>
 The name of an alternate format or view. 
 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -force 
 Override restrictions that prevent the command from succeeding, 
 without compromising security. Force will override read-only
 attributes but will not change file permissions.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 'CoreOnly' will format and display properties of the collection object itself, 
 while 'emumOnly' will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 
 -showError 
 Send errors through the pipeline.
 
 -depth <i>int</i>
 The number of columns in the display.
","https://ss64.com/ps/format-custom.html","System Utility","Command Execution, Scripting"
"Format-Hex","Display a file or other input as hexadecimal."," Format-Hex [-Encoding {Ascii | UTF32 | UTF7 | UTF8 | BigEndianUnicode | Unicode}]
 -InputObject <i>Object</i> [-Raw] [<i><a href=""common.html"">CommonParameters</a></i>]
 Format-Hex -LiteralPath <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Format-Hex [-Path] <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Encoding <i>String</i>
 The type of character encoding used in the file that this cmdlet will format as hexadecimal. The 
 acceptable values for this parameter are: Ascii,UTF32,UTF7,UTF8,BigEndianUnicode,<u>Unicode</u> 
 The default value is Unicode.
 -InputObject <i>Object</i>
 The object(s) to format as hex. Enter a variable that contains the object(s) or type
 an expression that returns the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Format-Hex receives one object that represents the collection.
 Because one object cannot be formatted, Format-Hex returns the entire collection unchanged.
 To format multiple items, single quotation marks.
 To specify multiple paths to files, separate the paths with a comma.
 -Raw
 By default Format-Hex opts for compact output of numeric data types: single-byte or double-byte sequences
 are used if the value is small enough. The Raw parameter deactivates this behavior.
","https://ss64.com/ps/format-hex.html","File Manipulation",
"fhx","Display a file or other input as hexadecimal."," Format-Hex [-Encoding {Ascii | UTF32 | UTF7 | UTF8 | BigEndianUnicode | Unicode}]
 -InputObject <i>Object</i> [-Raw] [<i><a href=""common.html"">CommonParameters</a></i>]
 Format-Hex -LiteralPath <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Format-Hex [-Path] <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Encoding <i>String</i>
 The type of character encoding used in the file that this cmdlet will format as hexadecimal. The 
 acceptable values for this parameter are: Ascii,UTF32,UTF7,UTF8,BigEndianUnicode,<u>Unicode</u> 
 The default value is Unicode.
 -InputObject <i>Object</i>
 The object(s) to format as hex. Enter a variable that contains the object(s) or type
 an expression that returns the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Format-Hex receives one object that represents the collection.
 Because one object cannot be formatted, Format-Hex returns the entire collection unchanged.
 To format multiple items, single quotation marks.
 To specify multiple paths to files, separate the paths with a comma.
 -Raw
 By default Format-Hex opts for compact output of numeric data types: single-byte or double-byte sequences
 are used if the value is small enough. The Raw parameter deactivates this behavior.
","https://ss64.com/ps/format-hex.html","File Manipulation",
"Format-List","Format output as a list of properties, each on a new line."," Format-List [[-Property] <i>Object</i>[]] [-view <i>string</i>]
 [-groupBy <i>Object</i>] [-force] [-inputObject <i>psobject</i>]
 [-expand <i>string</i>] [-displayError]
 [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/format-list.html","System Utility",
"fl","Format output as a list of properties, each on a new line."," Format-List [[-Property] <i>Object</i>[]] [-view <i>string</i>]
 [-groupBy <i>Object</i>] [-force] [-inputObject <i>psobject</i>]
 [-expand <i>string</i>] [-displayError]
 [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/format-list.html","System Utility",
"Format-Table","Format output as a table."," Format-Table [-AutoSize] [[-property] <i>Object</i>[]] [-RepeatHeader] [-hideTableHeaders]
 [-groupBy <i>Object</i>] [-wrap] [-view <i>string</i>] [-force]
 [-inputObject <i>psobject</i>] [-expand <i>string</i>]
 [-displayError] [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AutoSize
 Adjust the column sizes based on the width of the data.
 Ignore any column details in the view.
 By default, the column size and number are determined by the view.
 -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 -hideTableHeaders
 Omit column headings from the table.
 -view <i>string</i>
 The name of an alternate format or view. 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -RepeatHeader
 Repeat displaying the header of a table after every screen full.
 The repeated header is useful when the output is piped to a pager such
 as 'less' or 'more' or paging with a screen reader.
 -wrap
 Display text that exceeds the column width on the next line. 
 By default, text that exceeds the column width is truncated.
 -force 
 Directs the cmdlet to display all of the error information.
 Use with -DisplayError or -ShowError.  By default, when an error object is written to the error or display streams,
 only some of the error information is displayed.
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 &quot;CoreOnly&quot; will format and display properties of the collection object itself, 
 while &quot;emumOnly&quot; will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 -showError 
 Send errors through the pipeline.
","https://ss64.com/ps/format-table.html","System Utility","Command Execution, Scripting"
"ft","Format output as a table."," Format-Table [-AutoSize] [[-property] <i>Object</i>[]] [-RepeatHeader] [-hideTableHeaders]
 [-groupBy <i>Object</i>] [-wrap] [-view <i>string</i>] [-force]
 [-inputObject <i>psobject</i>] [-expand <i>string</i>]
 [-displayError] [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AutoSize
 Adjust the column sizes based on the width of the data.
 Ignore any column details in the view.
 By default, the column size and number are determined by the view.
 -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 -hideTableHeaders
 Omit column headings from the table.
 -view <i>string</i>
 The name of an alternate format or view. 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -RepeatHeader
 Repeat displaying the header of a table after every screen full.
 The repeated header is useful when the output is piped to a pager such
 as 'less' or 'more' or paging with a screen reader.
 -wrap
 Display text that exceeds the column width on the next line. 
 By default, text that exceeds the column width is truncated.
 -force 
 Directs the cmdlet to display all of the error information.
 Use with -DisplayError or -ShowError.  By default, when an error object is written to the error or display streams,
 only some of the error information is displayed.
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 &quot;CoreOnly&quot; will format and display properties of the collection object itself, 
 while &quot;emumOnly&quot; will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 -showError 
 Send errors through the pipeline.
","https://ss64.com/ps/format-table.html","System Utility","Command Execution, Scripting"
"Format-Wide","Format output as a table listing one property only."," Format-Wide [[-property] <i>Object</i>] [-autosize] [-column <i>int</i>]
 [-groupBy <i>Object</i>] [-view <i>string</i>] [-force]
 [-inputObject <i>psobject</i>] [-expand <i>string</i>]
 [-displayError] [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 -autosize
 Adjust the column sizes based on the width of the data.
 By default, the column size and number are determined by the view.
 You cannot use the AutoSize and Column parameters in the same command.
 -column <i>int</i>
 The number of columns in the display.
 Cannot be combined with the -Autosize parameter
 -hideTableHeaders
 Omit column headings from the table.
 -view <i>string</i>
 The name of an alternate format or view. 
 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -force 
 Override restrictions that prevent the command from succeeding, 
 without compromising security. Force will override read-only
 attributes but will not change file permissions.
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 &quot;CoreOnly&quot; will format and display properties of the collection object itself, 
 while 'emumOnly' will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 
 -showError 
 Send errors through the pipeline.
","https://ss64.com/ps/format-wide.html","System Utility","Command Execution, Scripting"
"fw","Format output as a table listing one property only."," Format-Wide [[-property] <i>Object</i>] [-autosize] [-column <i>int</i>]
 [-groupBy <i>Object</i>] [-view <i>string</i>] [-force]
 [-inputObject <i>psobject</i>] [-expand <i>string</i>]
 [-displayError] [-showError] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -property <i>Object</i>[]
 The object properties to display (in order)
 Wildcards are permitted.
 You cannot use -Property and -View in the same command.
 -autosize
 Adjust the column sizes based on the width of the data.
 By default, the column size and number are determined by the view.
 You cannot use the AutoSize and Column parameters in the same command.
 -column <i>int</i>
 The number of columns in the display.
 Cannot be combined with the -Autosize parameter
 -hideTableHeaders
 Omit column headings from the table.
 -view <i>string</i>
 The name of an alternate format or view. 
 
 -groupBy <i>Object</i>
 Format the output in groups based on a shared property or value.
 
 -force 
 Override restrictions that prevent the command from succeeding, 
 without compromising security. Force will override read-only
 attributes but will not change file permissions.
 -inputObject <i>psobject</i>
 The objects to format. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 
 -expand <i>string</i>
 Where string is either &quot;EnumOnly&quot; (the default), &quot;CoreOnly&quot; or &quot;Both&quot;
 &quot;CoreOnly&quot; will format and display properties of the collection object itself, 
 while 'emumOnly' will enumerate and display the object properties. 
 (designed around the ICollection (System.Collections) interface.)
 -displayError 
 Display errors at the command line.
 
 -showError 
 Send errors through the pipeline.
","https://ss64.com/ps/format-wide.html","System Utility","Command Execution, Scripting"
"Export-FormatData","Save formatting data from the current session."," Export-FormatData [-Force] [-IncludeScriptBlock] [-InputObject <i>ExtendedTypeDefinition</i>[]]
 [-NoClobber] [-Path <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>] 
"," -Force
 Overwrite an existing output file, even if the file has the read-only attribute.
 -IncludeScriptBlock
 Include script blocks in the format data exported.
 Because script blocks contain code and can be used maliciously, they are not exported by default.
 -InputObject <i>ExtendedTypeDefinition</i>[]
 The format data objects to be exported.
 Enter a variable that contains the objects or a command that gets the objects,
 such as a Get-FormatData command.
 Objects can also be piped from Get-FormatData to Export-FormatData.
 -NoClobber
 Prevent the cmdlet from overwriting existing files.
 By default, Export-FormatData overwrites files without warning unless
 the file has the read-only attribute.
 To overwrite read-only files, use -Force.
 -Path <i>string</i>
 A location for the output file.
 Enter a path (optional) and filename with a format.ps1xml file extension.
 The default path is the current directory.
 Export-FormatData will overwrite any existing file without warning unless
 the file has the read-only attribute.
 To overwrite read-only files, use -Force.
 To prevent files from being overwritten, use -NoClobber.
","https://ss64.com/ps/export-formatdata.html","System Utility",
"Get-FormatData","Get the formatting data in the current session."," Get-FormatData [[-TypeName] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>] 
"," -TypeName <i>string</i>[]
 Get only the formatting data with the specified type names.
 Enter the type names. Wildcards are permitted.
","https://ss64.com/ps/get-formatdata.html","Enumeration, System Utility",
"Get-Item","Get a file/registry object (or any other namespace object)."," Get-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] 
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-item.html","Enumeration, System Utility",
"gi","Get a file/registry object (or any other namespace object)."," Get-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] 
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-item.html","Enumeration, System Utility",
"Backup-GPO","Backup group policy objects (GPOs)."," Backup-GPO [-Name] <i>string</i> -Path <i>string</i>
 [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Backup-GPO <b>-All</b> -Path <i>string
 </i> [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Backup-GPO <b>-Guid</b> &lt;Guid&gt; -Path <i>string</i>
 [-Comment <i>string</i>] [-Domain <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -All Backup all GPOs in the domain.
 -Comment <i>string</i> 
 Include a comment for the backed-up GPO.
 -Domain string
 The domain containing the GPOs to backup, requires a trust relationship if not the current domain.
 -Guid <i>Guid</i>
 Specify the GPO to backup by its globally unique identifier (GUID).
 -Name <i>string
","https://ss64.com/ps/backup-gpo.html","System Administration","GPO"
"Restore-GPO","Restore one or all GPOs from a GPO backup."," Restore-GPO <b>-All</b> -Path <i>string</i> [-Domain <i>string</i>]
 [-Server <i>string</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Restore-GPO <b>-BackupId</b> <i>Guid</i> -Path <i>string</i> [-Domain <i>string</i>]
 [-Server <i>string</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Restore-GPO <b>-Guid</b> <i>Guid</i> -Path <i>string</i> [-Domain <i>string</i>]
 [-Server <i>string</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Restore-GPO [<b>-Name</b>] <i>Name</i> -Path <i>string</i> [-Domain <i>string</i>]
 [-Server <i>string</i>] [-Confirm] [-WhatIf][<i><a href=""common.html"">CommonParameters</a></i>]
"," -All Restore all GPOs in the domain that have backups in the backup directory.
 Each GPO is restored from its most recent backup in the directory.
 -BackupId <i>Guid</i>
 The backup ID of a GPO backup.
 The backup ID is a globally unique identifier (GUID) that uniquely identifies the backup. 
 -Domain <i>string</i>
 The domain in which you want to restore the GPO, requires a trust relationship if
 not the current domain.
 -Guid <i>Guid</i>
 Specifies the GPO to restore by its globally unique identifier (GUID).
 -Name<i> Name
","https://ss64.com/ps/restore-gpo.html","System Administration","GPO"
"Import-GPO","Import Group Policy settings into a specified GPO from a GPO backup."," Import-GPO <b>-BackupId <i>Guid</i></b> [-TargetGuid <i>Guid</i>] [-TargetName <i>string</i>] -Domain <i>string
 </i> [-CreateIfNeeded] [-MigrationTable <i>string</i>] [-Path <i>string</i>] [-Server <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-GPO [-BackupGpoName <i>string</i>] [-TargetGuid <i>Guid</i>] [-TargetName <i>string</i>] -Domain <i>string</i>
"," -BackupGpoName
 The display name of the backed-up GPO from which to import the settings. 
 -BackupId <i>Guid</i>
 The backup ID of a GPO backup. Use this to specify a particular version of a backed-up GPO.
 -CreateIfNeeded
 Create a new GPO from the backup if the specified target GPO does not exist.
 -Domain string
 The domain containing the GPOs to restore, requires a trust relationship if not the current domain.
 -MigrationTable
 Specifies the path to a migration table file. You can use a migration table to map security
 principals and UNC paths across domains.
 -Path <i>string</i>
 The path to the backup directory; for example, &quot;C:\Backups&quot; or &quot;\\Server64\Backups&quot;.
 -Server <i>string</i>
 The name of the domain controller that should complete the operation.
 Specify either a fully qualified domain name (FQDN) or the host name.
 For example: 
 FQDN: DomainController1.europe.ss64.com
 Host Name: DomainController1
 -TargetGuid <i>Guid</i>
 Specifies the GUID of the GPO into which the settings are to be imported.
 You must specify either the -TargetGuid or -TargetName.
 -TargetName <i>string</i>
 The display name of the GPO into which the settings are to be imported.
 You must specify either the -TargetGuid or -TargetName.
","https://ss64.com/ps/import-gpo.html","System Administration","GPO"
"Group-Object","group  Group objects that contain the same value."," Group-Object [-AsHashTable] [-AsString] [[-property] <i>Object</i>[]]
 [-caseSensitive] [-noElement] [-culture <i>string</i>]
 [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsHashTable
 Return the group as a pipe them to Group-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
","https://ss64.com/ps/group-object.html","System Administration","GPO"
"New-Guid","Create a GUID.","Not Available","Not Available","Not Available","System Administration",
"Get-Help","Open the help file."," Get-Help [[-name] <i>string</i>] [-component <i>string</i>[]]
 [-functionality <i>string</i>[]]
 [-role <i>string</i>[]] [-category <i>string</i>[]]
 [ {-full | -detailed | -examples | -parameter <i>string</i>}]
 [-Online] [-ShowWindow] [-Path <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Key
 <p>Syntax is one of many properties of help objects; others are: 
"," -name 
 Request help about <i>string</i>
 A cmdlet name, topic, alias, script or function name. Wildcards are permitted. 
 e.g. -name Get-Member, -name About_Object, -name ls 
 The -Name is optional.
 -category 
 Display help for items in the specified category.
 Valid values: Alias, Cmdlet, Provider, General, FAQ, Glossary, HelpFile, ScriptCommand, Function
 Filter, ExternalScript, All, DefaultHelp, Workflow, DscResource, Class, Configuration
 Conceptual topics are in the HelpFile category.
 -component 
 Display a list of cmdlets with the specified component value,
 such as Exchange.
 -detailed 
 Display additional information about a cmdlet, including
 descriptions of the parameters and examples of using
 the cmdlet. This parameter has no effect on displays
 of conceptual (About_) help.
 -examples 
 Display examples of using the cmdlet. 
 To display only the examples, type 
 (get-help <i>cmdlet-name</i>).examples.
 -full 
 Display the entire help file for a cmdlet, including
 technical information about the parameters.
 This parameter has no effect on displays of
 conceptual (About_) help.
 -functionality 
 Display help for cmdlets with the specified functionality.
 Wildcards are permitted.
 -Online
 Display the online version of a help topic in the default Internet browser. 
 This parameter is valid only for cmdlet, function, and script help topics.
 see Help about_Comment_Based_Help
 -parameter 
 Display a detailed description of the specified parameter.
 These descriptions are included in the Full view of help.
 Wildcards are permitted.
 -Path <i>string</i> Get help that explains how the cmdlet works in the specified provider path.
 Enter a Windows PowerShell provider path.  This parameter is effective only for help about a provider cmdlet and only when
 the provider includes a custom version of the provider cmdlet help topic.  Go to the provider path location and enter Get-Help or, from any path location,
 use Get-Help -Path. For more information, see about_Providers.
 -role <i>String</i>
 Display help customized for the specified user role. 
 The role that the user plays in an organization.
 This parameter has no effect for the core cmdlets.
 -ShowWindow
 Display the help text in a popup GUI window. (PowerShell 3.0+)
","https://ss64.com/ps/get-help.html","System Utility",
"help","Open the help file."," Get-Help [[-name] <i>string</i>] [-component <i>string</i>[]]
 [-functionality <i>string</i>[]]
 [-role <i>string</i>[]] [-category <i>string</i>[]]
 [ {-full | -detailed | -examples | -parameter <i>string</i>}]
 [-Online] [-ShowWindow] [-Path <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Key
 <p>Syntax is one of many properties of help objects; others are: 
"," -name 
 Request help about <i>string</i>
 A cmdlet name, topic, alias, script or function name. Wildcards are permitted. 
 e.g. -name Get-Member, -name About_Object, -name ls 
 The -Name is optional.
 -category 
 Display help for items in the specified category.
 Valid values: Alias, Cmdlet, Provider, General, FAQ, Glossary, HelpFile, ScriptCommand, Function
 Filter, ExternalScript, All, DefaultHelp, Workflow, DscResource, Class, Configuration
 Conceptual topics are in the HelpFile category.
 -component 
 Display a list of cmdlets with the specified component value,
 such as Exchange.
 -detailed 
 Display additional information about a cmdlet, including
 descriptions of the parameters and examples of using
 the cmdlet. This parameter has no effect on displays
 of conceptual (About_) help.
 -examples 
 Display examples of using the cmdlet. 
 To display only the examples, type 
 (get-help <i>cmdlet-name</i>).examples.
 -full 
 Display the entire help file for a cmdlet, including
 technical information about the parameters.
 This parameter has no effect on displays of
 conceptual (About_) help.
 -functionality 
 Display help for cmdlets with the specified functionality.
 Wildcards are permitted.
 -Online
 Display the online version of a help topic in the default Internet browser. 
 This parameter is valid only for cmdlet, function, and script help topics.
 see Help about_Comment_Based_Help
 -parameter 
 Display a detailed description of the specified parameter.
 These descriptions are included in the Full view of help.
 Wildcards are permitted.
 -Path <i>string</i> Get help that explains how the cmdlet works in the specified provider path.
 Enter a Windows PowerShell provider path.  This parameter is effective only for help about a provider cmdlet and only when
 the provider includes a custom version of the provider cmdlet help topic.  Go to the provider path location and enter Get-Help or, from any path location,
 use Get-Help -Path. For more information, see about_Providers.
 -role <i>String</i>
 Display help customized for the specified user role. 
 The role that the user plays in an organization.
 This parameter has no effect for the core cmdlets.
 -ShowWindow
 Display the help text in a popup GUI window. (PowerShell 3.0+)
","https://ss64.com/ps/get-help.html","System Utility",
"Update-Help","Download and install the newest help files on your computer."," Update-Help [[-Module] <i>String</i>[]] [<b>-LiteralPath</b> <i>String</i>[]]
 [[-UICulture] <i>CultureInfo</i>[]] [-Credential <i>PSCredential</i>] [-UseDefaultCredentials]
 [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-Force] [-Recurse] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Update-Help [[-Module] <i>String</i>[]] [[<b>-SourcePath</b>] <i>String</i>[]]
 [[-UICulture] <i>CultureInfo</i>[]] [-Credential <i>PSCredential</i>] [-UseDefaultCredentials]
 [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-Recurse] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Credential <i>PSCredential</i>
 Specify credentials of a user who has permission to access the file system location specified by -SourcePath.
 This parameter is valid only when the -SourcePath or -LiteralPath parameter is used in the command.
 
 This parameter enables you to run Update-Help commands that have -SourcePath on remote computers.
 By providing explicit credentials, you can run the command on a remote computer and access a file
 share on a third computer without an access denied error or using CredSSP authentication to delegate credentials.
 
 -Force
 Ignore the once-per-day update limitation, skip version checking, and allow downloading help files that exceed 1 GB.
 
 Without this parameter, Update-Help runs only once in each 24-hour period, downloads are limited to 1 GB of 
 uncompressed content per module and help files are installed only when they are newer than the files on the 
 computer.
 
 The once-per-day limit protects the servers that host the help files and makes it practical for you to add an 
 Update-Help command to your Windows PowerShell profile without incurring the resource cost of repeated 
 connections or downloads.
 
 To update help for a module in multiple UI cultures without the Force parameter, include all UI cultures in 
 the same command, such as: `Update-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR`
 
 -FullyQualifiedModule <i>ModuleSpecification</i>[]
 Specifies modules with names that are specified in the form of ModuleSpecification objects. These are 
 described in the Remarks section of about_Group_Policy_Settings.
 
 -UICulture <i>CultureInfo</i>[]
 Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, 
 such as es-ES, a variable that contains culture objects, or a command that gets culture objects, such as a 
 Get-Culture or Get-UICulture command. Wildcard characters are not permitted and you cannot submit a partial 
 language code, such as de.
 
 By default, Update-Help gets help files in the UI culture set for Windows or its fallback culture.
 If you specify -UICulture, Update-Help looks for help only for the specified UI culture, not in any 
 fallback culture.
 
 Commands that use the UICulture parameter succeed only when the module provides help files for the specified 
 UI culture. If the command fails because the specified UI culture is not supported, the error message includes 
 a list of UI cultures that the module supports.
 
 -UseDefaultCredentials
 Indicates that this cmdlet runs the command, including the Internet download, by using the credentials of the 
 current user. By default, the command runs without explicit credentials.
 
 This parameter is effective only when the Web download uses NTLM, negotiate, or Kerberos-based authentication.
 
 -confirm
 Prompt for confirmation before executing the command.
 
 -WhatIf
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/update-help.html","System Utility",
"Add-History","Add entries to the session history."," Add-History [[-inputObject] <i>PSObject</i>[]] [-passthru] [<a href=""common.html""><i>CommonParameters</i></a>]
","Not Available","https://ss64.com/ps/add-history.html","System Utility",
"Clear-History","Delete entries from the session history."," Clear-History [[-Id] <i>Int32</i>[]] [[-Count] <i>int</i>] [-Newest]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-History [[-Count] <i>int</i>] [-CommandLine <i>string</i>[]] [-Newest]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CommandLine <i>string</i>[] Delete commands matching <i>string</i>. If you enter more than one string, 
 Clear-History will delete commands matching any of the strings.  -Count <i>int</i> Clear <i>int</i> number of history entries, beginning with the oldest entry
 in the history. If -Id <i>Int32</i> is given in the same command, Clear-History will begin at <i>Int32</i>.
","https://ss64.com/ps/clear-history.html","System Utility, Command Obfuscation",
"clhy","Delete entries from the session history."," Clear-History [[-Id] <i>Int32</i>[]] [[-Count] <i>int</i>] [-Newest]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Clear-History [[-Count] <i>int</i>] [-CommandLine <i>string</i>[]] [-Newest]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CommandLine <i>string</i>[] Delete commands matching <i>string</i>. If you enter more than one string, 
 Clear-History will delete commands matching any of the strings.  -Count <i>int</i> Clear <i>int</i> number of history entries, beginning with the oldest entry
 in the history. If -Id <i>Int32</i> is given in the same command, Clear-History will begin at <i>Int32</i>.
","https://ss64.com/ps/clear-history.html","System Utility, Command Obfuscation",
"Get-History","Get a listing of the session history."," Get-History [ [-count] <i>int</i> ]
 [ [-id] <i>Int64</i>[] ]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -count 
 Display <i>n</i> of most-recent history entries.
 The default is 32. 
 -id <i>Int64</i>
 The ID number of a command in the session history.
 Get-History gets only the specified command.
 <p>Standard Windows Keyboard shortcuts
","https://ss64.com/ps/get-history.html","System Utility, Enumeration",
"history","Get a listing of the session history."," Get-History [ [-count] <i>int</i> ]
 [ [-id] <i>Int64</i>[] ]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -count 
 Display <i>n</i> of most-recent history entries.
 The default is 32. 
 -id <i>Int64</i>
 The ID number of a command in the session history.
 Get-History gets only the specified command.
 <p>Standard Windows Keyboard shortcuts
","https://ss64.com/ps/get-history.html","System Utility, Enumeration",
"h","Get a listing of the session history."," Get-History [ [-count] <i>int</i> ]
 [ [-id] <i>Int64</i>[] ]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -count 
 Display <i>n</i> of most-recent history entries.
 The default is 32. 
 -id <i>Int64</i>
 The ID number of a command in the session history.
 Get-History gets only the specified command.
 <p>Standard Windows Keyboard shortcuts
","https://ss64.com/ps/get-history.html","System Utility, Enumeration",
"ghy","Get a listing of the session history."," Get-History [ [-count] <i>int</i> ]
 [ [-id] <i>Int64</i>[] ]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -count 
 Display <i>n</i> of most-recent history entries.
 The default is 32. 
 -id <i>Int64</i>
 The ID number of a command in the session history.
 Get-History gets only the specified command.
 <p>Standard Windows Keyboard shortcuts
","https://ss64.com/ps/get-history.html","System Utility, Enumeration",
"Invoke-History","Invoke a previously executed Cmdlet."," Invoke-History [[-id] <i>string</i>]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -id
 The ID number, or the first few characters of a command in the
 session history.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/invoke-history.html","System Utility","Command Execution"
"r","Invoke a previously executed Cmdlet."," Invoke-History [[-id] <i>string</i>]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -id
 The ID number, or the first few characters of a command in the
 session history.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/invoke-history.html","System Utility","Command Execution"
"ihy","Invoke a previously executed Cmdlet."," Invoke-History [[-id] <i>string</i>]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -id
 The ID number, or the first few characters of a command in the
 session history.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/invoke-history.html","System Utility","Command Execution"
"Get-Host","Get host information (PowerShell Version and Region)."," Get-Host [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-host.html","Enumeration",
"Out-Host","Send output to the host."," Out-Host [-inputObject <i>psobject</i>] [-paging] [<i><a href=""common.html"">CommonParameters</a></i>]"," -inputObject <i>psobject</i>
 The object(s) to be written to the console. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 {may also be piped}
 -paging 
 Display one page of output at a time, and wait for user input before 
 displaying more. By default, all output is displayed on a single page. 
 The page size is determined by the characteristics of the host.
","https://ss64.com/ps/out-host.html","System Utility",
"oh","Send output to the host."," Out-Host [-inputObject <i>psobject</i>] [-paging] [<i><a href=""common.html"">CommonParameters</a></i>]"," -inputObject <i>psobject</i>
 The object(s) to be written to the console. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 {may also be piped}
 -paging 
 Display one page of output at a time, and wait for user input before 
 displaying more. By default, all output is displayed on a single page. 
 The page size is determined by the characteristics of the host.
","https://ss64.com/ps/out-host.html","System Utility",
"Read-Host","Read a line of user input from the host console."," Read-Host [[-prompt] <i>Object</i>] [-asSecureString] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -prompt <i>Object</i>
 The string that will become the prompt object. If the prompt 
 string includes spaces, it must be surrounded by quotes.
 
 -asSecureString 
 If set to true, the input will be echoed as star characters (*). 
 The output will then be a Securestring object.
 <p>Password data should never be stored as a regular string, as it would be visible in memory.
 ::IsKeyDown - Key press detection via WPF.
","https://ss64.com/ps/read-host.html","System Utility",
"Write-Host","Write customized output to the host/screen."," Write-Host [[-object] <i>Object</i>] [-noNewLine] [-separator <i>Object</i>]
 [-foregroundcolor <i>ConsoleColor</i>] [-backgroundColor <i>ConsoleColor</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -object Object
 Object to display, typically a string.
 
 -noNewLine 
 Do not end with a newline character.
 
 -separator
 String to output between objects displayed on the console.
 -foregroundcolor <i>ConsoleColor</i>
 The text color
 -backgroundcolor <i>ConsoleColor</i>
 Background color
 <i>ConsoleColors:</i>
 Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow,
 Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White
","https://ss64.com/ps/write-host.html","System Utility",
"Get-HotFix","Get Installed hotfixes."," Get-HotFix [[<b>-Id</b>] <i>string</i>[]] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]<br> <br> Get-HotFix [<b>-Description</b> <i>string</i>[]] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[] Specify a remote computer.
 Type a NetBIOS name, an Internet Protocol (IP) address, or a fully
 qualified domain name of a remote computer'
 The default is the local computer.
 This parameter does not rely on PowerShell remoting.
 -Credential <i>PSCredential</i>
 Specify a user account that has permission to perform this action.
 The default is the current user.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter
 a PSCredential object, such as one generated by Get-Credential.
 If you type a user name, you will be prompted for a password.
 -Description <i>string</i>[]
 Get only hotfixes with the specified descriptions.
 Wildcards are permitted.
 The default is all hotfixes on the computer.
 -Id <i>string</i>[]
 Get only hotfixes with the specified hotfix IDs. The default is all hotfixes on the computer.
","https://ss64.com/ps/get-hotfix.html","Enumeration, System Administration",
"if","Conditionally perform a command."," if (<i> condition </i>) { <i>commands_to_execute</i> }
 [ elseif ( <i>condition2</i> ) { <i>commands_to_execute</i> } ]
 [ else {<i>commands_to_execute</i>} ]
"," <i>Condition</i> An expression that will evaluate to true or false,
 often utilising one or more comparison operators.
 <i>commands_to_execute
 </i> A PowerShell or external command to run if the condition is true.
","https://ss64.com/ps/if.html","System Utility","Command Execution, Scripting"
"Import-Clixml","Import a clixml file and rebuild the PS object."," Import-Clixml { [-path] | -literalpath } <i>string</i>[]
 [-IncludeTotalCount] [-Skip <i>UInt64</i>] [-First <i>UInt64</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]
 The path to the XML files {may be piped}
 -LiteralPath <i>path</i>
 The path to the XML file to import.
 Unlike -Path, the value of the -LiteralPath parameter is used exactly as it is typed.
 If the path includes escape characters, enclose it in single quotation marks. 
 -First
 Get only the specified number of objects. Enter the number of objects to get.
 -IncludeTotalCount
 Report the total number of objects in the data set followed by the selected objects.
 If the cmdlet can’t determine the total count, it displays Unknown total count.
 The integer has an Accuracy property that indicates the reliability of the total count value.
 The value of Accuracy ranges from 0.0 to 1.0 where 0.0 means that the cmdlet couldn’t count the
 objects, 1.0 means that the count is exact, and a value between 0.0 and 1.0 indicates an increasingly reliable estimate.
 -Skip
 Ignore the specified number of objects and then get the remaining objects.
 Enter the number of objects to skip.
","https://ss64.com/ps/import-clixml.html","File Manipulation",
"Import-Csv","Take values from a CSV list and send objects down the pipeline."," Import-Csv [[-Delimiter] <i>char</i>] [-path] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-Csv [[-Delimiter] <i>char</i>] [-LiteralPath] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-CSV -UseCulture [-Path] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-CSV -UseCulture [-LiteralPath] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Delimiter &lt;char&gt;
 The delimiter that separates the property values in the CSV file.
 The default is a comma (,).
 Enter a character, such as a colon (:). To specify a semicolon (;), enclose it in quotation marks.
 If a character is specified which is not the string delimiter in the file,
 Import-CSV cannot create objects from the CSV strings. Instead, it returns the strings.
 -Header <i>string</i>[]
 An alternate column header row for the imported file.
 The column header determines the names of the properties of the object created.
 Enter a comma-separated list of the column headers.
 Enclose each item in quotation marks (single or double).
 Do not enclose the header string in quotation marks. If fewer column headers are
 entered than there are columns, the remaining columns will have no header.
 If more headers are entered than there are columns, the extra headers are ignored.
 When using -Header, delete the original header row from the CSV file. Otherwise,
 Import-CSV will create an extra object from the items in the header row.
 -Path <i>path</i>
 The path to the CSV file {may be piped}
 -LiteralPath <i>path</i>
 The path to the CSV file to import.
 Unlike -Path, the value of the -LiteralPath parameter is used exactly as it is typed.
 No characters are interpreted as wildcards. If the path includes Encoding.CodePage.
 -UseCulture
 Use the list separator for the current culture as the item delimiter.
 The default is a comma (,).
 To find the list separator for a culture, use the following command:
 (Get-Culture).TextInfo.ListSeparator. 
 If a character is specified which is not the delimiter used in the CSV strings,
 ConvertFrom-CSV cannot create objects from the CSV strings. Instead, it returns the strings.
","https://ss64.com/ps/import-csv.html","File Manipulation",
"ipcsv","Take values from a CSV list and send objects down the pipeline."," Import-Csv [[-Delimiter] <i>char</i>] [-path] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-Csv [[-Delimiter] <i>char</i>] [-LiteralPath] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-CSV -UseCulture [-Path] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
 Import-CSV -UseCulture [-LiteralPath] <i>string</i>[]
 [-Header <i>string</i>[]] [-Encoding <i>CharSet</i >] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Delimiter &lt;char&gt;
 The delimiter that separates the property values in the CSV file.
 The default is a comma (,).
 Enter a character, such as a colon (:). To specify a semicolon (;), enclose it in quotation marks.
 If a character is specified which is not the string delimiter in the file,
 Import-CSV cannot create objects from the CSV strings. Instead, it returns the strings.
 -Header <i>string</i>[]
 An alternate column header row for the imported file.
 The column header determines the names of the properties of the object created.
 Enter a comma-separated list of the column headers.
 Enclose each item in quotation marks (single or double).
 Do not enclose the header string in quotation marks. If fewer column headers are
 entered than there are columns, the remaining columns will have no header.
 If more headers are entered than there are columns, the extra headers are ignored.
 When using -Header, delete the original header row from the CSV file. Otherwise,
 Import-CSV will create an extra object from the items in the header row.
 -Path <i>path</i>
 The path to the CSV file {may be piped}
 -LiteralPath <i>path</i>
 The path to the CSV file to import.
 Unlike -Path, the value of the -LiteralPath parameter is used exactly as it is typed.
 No characters are interpreted as wildcards. If the path includes Encoding.CodePage.
 -UseCulture
 Use the list separator for the current culture as the item delimiter.
 The default is a comma (,).
 To find the list separator for a culture, use the following command:
 (Get-Culture).TextInfo.ListSeparator. 
 If a character is specified which is not the delimiter used in the CSV strings,
 ConvertFrom-CSV cannot create objects from the CSV strings. Instead, it returns the strings.
","https://ss64.com/ps/import-csv.html","File Manipulation",
"Import-PfxCertificate","Import certificates and keys from a Personal Information Exchange(PFX) file.","Not Available","Not Available","Not Available","System Administration",
"Write-Information","Specify how PowerShell should handle information stream data.","Not Available","Not Available","Not Available","System Administration",
"Get-InitiatorPort","Get one or more host bus adapter (HBA) initiator ports.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Install-Module","Download and install one or more modules from an online gallery.","Not Available","Not Available","Not Available","System Administration",
"Install-Package","Install one or more software packages.","Not Available","Not Available","Not Available","System Administration",
"Invoke-Command","Run commands on local and remote computers."," 
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ComputerName] <i>string</i>[]</b>] 
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>] 
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-Session] <i>PSSession</i>[]</b>] [-AsJob]
 [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-FilePath] <i>string</i> [<b>[-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection]
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [<b>-ScriptBlock</b>] <i>scriptblock</i>
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-ComputerName] <i>string</i>[]</b>]
 [-ApplicationName <i>string</i>] [-AsJob] [-Authentication <i>AuthenticationMechanism</i>]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] 
 [-Credential <i>PSCredential</i>] [-HideComputerName] [-JobName <i>string</i>]
 [-Port <i>int</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-UseSSL] [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [<b>[-Session] <i>PSSession</i>[]</b>]
 [-AsJob] [-HideComputerName] [-JobName <i>string</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-Command [-ScriptBlock] <i>scriptblock</i> [[<b>-ConnectionURI] <i>Uri</i>[]</b>] [-AllowRedirection] 
 [-AsJob] [-Authentication <i>AuthenticationMechanism</i>] [-CertificateThumbprint <i>string</i>]
 [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-HideComputerName]
 [-JobName <i>string</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>int</i>]
 [-ArgumentList <i>Object</i>[]] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate URI. 
 When -ConnectionURI is used, the remote destination can return an instruction to
 redirect to a different URI. By default, PowerShell does not redirect connections,
 the AllowRedirection parameter changes this to allow the connection to redirect.
 The number of times that the connection is redirected can be limited by setting the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable,
 or the MaximumConnectionRedirectionCount property of the value of -SessionOption.
 The default value is 5. For more information, see preference variable, if set. Otherwise, the session uses the system defaults.
 -ThrottleLimit <i>int</i>
 The maximum number of concurrent connections that can be established to run this command.
 If you omit this parameter or enter a value of 0, the default value, 32, is used.
 The throttle limit applies only to the current command, not to the session or to the computer.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all PowerShell content transmitted over the network. -UseSSL is
 an additional protection that sends the data across an HTTPS, instead of HTTP.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
","https://ss64.com/ps/invoke-command.html","System Utility","Command Execution, Scripting"
"Invoke-Expression","Run a PowerShell expression."," Invoke-Expression [-command] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -command <i>string</i>
 A literal string (or variable that contains a string) that is a
 valid PowerShell expression.
","https://ss64.com/ps/invoke-expression.html","System Utility","Command Execution, Scripting"
"iex","Run a PowerShell expression."," Invoke-Expression [-command] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -command <i>string</i>
 A literal string (or variable that contains a string) that is a
 valid PowerShell expression.
","https://ss64.com/ps/invoke-expression.html","System Utility","Command Execution, Scripting"
"Invoke-WebRequest","Get content from a web page."," Invoke-WebRequest [-Uri] <i>Uri</i> [-Body <i>Object</i>] [-Certificate <i>X509Certificate</i>] [-CertificateThumbprint <i>String</i>] 
 [-ContentType <i>String</i>] [-Credential <i>PSCredential</i>] [-DisableKeepAlive] [-Headers <i>IDictionary</i>]
 [-InFile <i>String</i>] [-MaximumRedirection <i>Int32</i>]
 [-Method <b>{</b>Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch<b>}</b>]
 [-OutFile <i>String</i>] [-PassThru] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>] 
 [-ProxyUseDefaultCredentials] [-SessionVariable <i>String</i>] [-TimeoutSec <i>Int32</i>]
 [-TransferEncoding <b>{</b>chunked | compress | deflate | gzip | identity<b>}</b>]
 [-UseBasicParsing] [-UseDefaultCredentials] [-UserAgent <i>String</i>] 
 [-WebSession <i>WebRequestSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Body <i>Object</i>
 The body of the request. The body is the content of the request that follows the headers.
 You can also pipe a body value to Invoke-WebRequest.
 The Body parameter can be used to specify a list of query parameters or specify the content of the response.
 When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to 
 the URI as query parameters. For other GET requests, the body is set as the value of the request body in the 
 standard name=value format.
 When the body is a form, or it is the output of an Invoke-WebRequest call, Windows PowerShell sets the request 
 content to the form fields.
 For example:
 
 `$R = Invoke-WebRequest http://website.com/login.aspx` `$R.Forms[0].Name = MyName` `$R.Forms[0].Password = 
 MyPassword` `Invoke-RestMethod http://website.com/service.aspx -Body $R`
 - or -
 `Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]`
 -Certificate <i>X509Certificate</i>
 The client certificate that is used for a secure web request. Enter a variable that contains a certificate
 or a command or expression that gets the certificate.
 To find a certificate, use Get-PfxCertificate or use the Get-ChildItem cmdlet in the Certificate (Cert:) 
 drive. If the certificate is not valid or does not have sufficient authority, the command fails.
 -CertificateThumbprint <i>String</i>
 The digital public key certificate (X509) of a user account that has permission to send the request. 
 Enter the certificate thumbprint of the certificate.
 Certificates are used in client certificate-based authentication. They can be mapped only to local user 
 accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the PowerShell Cert: drive.
 -ContentType <i>String</i>
 The content type of the web request.
 If this parameter is omitted and the request method is POST, Invoke-WebRequest sets the content type to 
 application/x-www-form-urlencoded. Otherwise, the content type is not specified in the call.
 -Credential <i>PSCredential</i>
 A user account that has permission to send the request. The default is the current user.
 Type a user name, such as User64 or ss64Dom\User64, or enter a PSCredential object, such as one generated by 
 the Get-Credential cmdlet.
 -DisableKeepAlive
 Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. 
 KeepAlive establishes a persistent connection to the server to facilitate subsequent requests.
 -Headers <i>IDictionary</i>
 The headers of the web request. Enter a hash table or dictionary.
 To set UserAgent headers, use the UserAgent parameter. You cannot use this parameter to specify UserAgent or 
 cookie headers.
 -InFile <i>String</i>
 Gets the content of the web request from a file.
 Enter a path and file name. If you omit the path, the default is the current location.
 -MaximumRedirection <i>Int32</i>
 Specifies how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier 
 (URI) before the connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.
 -Method <i>WebRequestMethod</i>
 The method used for the web request. The acceptable values for this parameter are:
 - Default
 - Delete
 - Get
 - Head
 - Merge
 - Options
 - Patch
 - Post
 - Put
 - Trace
 -OutFile <i>String</i>
 The output file for which this cmdlet saves the response body. Enter a path and file name.
 If you omit the path, the default is the current location.
 By default, Invoke-WebRequest returns the results to the pipeline. To send the results to a file and to the 
 pipeline, use the Passthru parameter.
 -PassThru
 Indicates that the cmdlet returns the results, in addition to writing them to a file. This parameter is valid 
 only when the OutFile parameter is also used in the command.
 -Proxy <i>Uri</i>
 A proxy server for the request, rather than connecting directly to the Internet resource. Enter the 
 URI of a network proxy server.
 -ProxyCredential <i>PSCredential</i>
 A user account that has permission to use the proxy server that is specified by the -Proxy parameter. 
 The default is the current user.
 Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated 
 by the Get-Credential cmdlet.
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 -ProxyUseDefaultCredentials
 Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is 
 specified by the Proxy parameter.
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 -SessionVariable <i>String</i>
 Specifies a variable for which this cmdlet creates a web request session and saves it in the value. Enter a 
 variable name without the dollar sign ($) symbol.
 When you specify a session variable, Invoke-WebRequest creates a web request session object and assigns it to 
 a variable with the specified name in your Windows PowerShell session. You can use the variable in your 
 session as soon as the command completes.
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 To use the web request session in subsequent web requests, specify the session variable in the value of the 
 WebSession parameter. Windows PowerShell uses the data in the web request session object when establishing the 
 new connection. To override a value in the web request session, use a cmdlet parameter, such as UserAgent or 
 Credential . Parameter values take precedence over values in the web request session.
 You cannot use the SessionVariable and WebSession parameters in the same command.
 -TimeoutSec <i>Int32</i>
 How long the request can be pending before it times out. Enter a value in seconds. The default 
 value, 0, specifies an indefinite time-out.
 A Domain Name System (DNS) query can take up to 15 seconds to return or time out. If your request contains a 
 host name that requires resolution, and you set TimeoutSec to a value greater than zero, but less than 15 
 seconds, it can take 15 seconds or more before a WebException is thrown, and your request times out.
 -TransferEncoding <i>String</i>
 A value for the transfer-encoding HTTP response header. The acceptable values for this parameter are:
 - Chunked
 - Compress
 - Deflate
 - GZip
 - Identity
 -Uri <i>Uri</i>
 The Uniform Resource Identifier (URI) of the Internet resource to which the web request is sent. 
 Enter a URI. This parameter supports HTTP, HTTPS, FTP, and FILE values.
 This parameter is required. The parameter name ( Uri ) is optional.
 -UseBasicParsing
 This parameter has been deprecated. Beginning with PowerShell 6.0.0, all Web requests use basic parsing only.
 This parameter is included for backwards compatibility only and any use of it has no effect on the operation
 of the cmdlet.
 Indicates that the cmdlet uses the response object for HTML content without using the Internet Explorer
 Document Object Model (DOM) parsing.
 -UseDefaultCredentials
 Indicates that the cmdet uses the credentials of the current user to send the web request.
 Use this when downloading files from SharePoint.
 -UserAgent <i>String</i>
 A user agent string for the web request.
 The default user agent is similar to Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) WindowsPowerShell/3.0 
 with slight variations for each operating system and platform.
 To test a website with the standard user agent string that is used by most Internet browsers, use the 
 properties of the PSUserAgent class, such as Chrome, FireFox, InternetExplorer, Opera, and Safari.
 For example, the following command uses the user agent string for Internet Explorer:
 `Invoke-WebRequest -Uri http://website.com/ -UserAgent 
 ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)`
 -WebSession <i>WebRequestSession</i>
 A web request session. Enter the variable name, including the dollar sign ($).
 To override a value in the web request session, use a cmdlet parameter, such as UserAgent or Credential . 
 Parameter values take precedence over values in the web request session.
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 To create a web request session, enter a variable name (without a dollar sign) in the value of the 
 SessionVariable parameter of an Invoke-WebRequest command. Invoke-WebRequest creates the session and saves it 
 in the variable. In subsequent commands, use the variable as the value of the WebSession parameter.
 You cannot use the SessionVariable and WebSession parameters in the same command.
","https://ss64.com/ps/invoke-webrequest.html","System Utility, Remote Connection","Web"
"Invoke-RestMethod","Send an HTTP or HTTPS request to a RESTful web service."," Invoke-RestMethod [-Uri] <i><b>Uri</b></i> [-Body <i>Object</i>] [-Certificate <i>X509Certificate</i>] [-CertificateThumbprint <i>String</i>] 
 [-ContentType <i>String</i>] [-Credential <i>PSCredential</i>] [-DisableKeepAlive] [-Headers <i>IDictionary</i>]
 [-InFile <i>String</i>] [-MaximumRedirection <i>Int32</i>]
 [-Method {Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch}]
 [-OutFile <i>String</i>] [-PassThru] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>] 
 [-ProxyUseDefaultCredentials] [-SessionVariable <i>String</i>] [-TimeoutSec <i>Int32</i>]
 [-TransferEncoding {chunked | compress | deflate | gzip | identity}]
 [-UseBasicParsing] [-UseDefaultCredentials] [-UserAgent <i>String</i>] 
 [-WebSession <i>WebRequestSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Body <i>Object</i>
 The body of the request. The body is the content of the request that follows the headers.
 You can also pipe a body value to Invoke-RestMethod.
 
 The Body parameter can be used to specify a list of query parameters or specify the content of the response.
 
 When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to 
 the URI as query parameters. For other GET requests, the body is set as the value of the request body in the 
 standard name=value format.
 
 When the body is a form, or it is the output of an Invoke-WebRequest call, PowerShell sets the request 
 content to the form fields.
 
 For example:
 
 `$R = Invoke-WebRequest http://website.com/login.aspx` `$R.Forms[0].Name = MyName` `$R.Forms[0].Password = 
 MyPassword` `Invoke-RestMethod http://website.com/service.aspx -Body $R`
 
 - or -
 
 `Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]`
 -Certificate <i>X509Certificate</i>
 The client certificate that is used for a secure web request. Enter a variable that contains a certificate
 or a command or expression that gets the certificate.
 
 To find a certificate, use Get-PfxCertificate or use the Get-ChildItem cmdlet in the Certificate (Cert:) 
 drive. If the certificate is not valid or does not have sufficient authority, the command fails.
 
 -CertificateThumbprint <i>String</i>
 The digital public key certificate (X509) of a user account that has permission to send the request. 
 Enter the certificate thumbprint of the certificate.
 
 Certificates are used in client certificate-based authentication. They can be mapped only to local user 
 accounts; they do not work with domain accounts.
 
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the PowerShell Cert: drive.
 
 -ContentType <i>String</i>
 The content type of the web request.
 
 If this parameter is omitted and the request method is POST, Invoke-RestMethod sets the content type to 
 application/x-www-form-urlencoded. Otherwise, the content type is not specified in the call.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to send the request. The default is the current user.
 
 Type a user name, such as User64 or ss64Dom\User64, or enter a PSCredential object, such as one generated by 
 the Get-Credential cmdlet.
 
 -DisableKeepAlive
 Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. 
 KeepAlive establishes a persistent connection to the server to facilitate subsequent requests.
 
 -Headers <i>IDictionary</i>
 The headers of the web request. Enter a hash table or dictionary.
 
 To set UserAgent headers, use the UserAgent parameter. You cannot use this parameter to specify UserAgent or 
 cookie headers.
 
 -InFile <i>String</i>
 Gets the content of the web request from a file.
 
 Enter a path and file name. If you omit the path, the default is the current location.
 
 -MaximumRedirection <i>Int32</i>
 Specifies how many times PowerShell redirects a connection to an alternate Uniform Resource Identifier 
 (URI) before the connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.
 
 -Method <i>WebRequestMethod</i>
 The method used for the web request. The acceptable values for this parameter are:
 
 - Default
 - Delete
 - Get
 - Head
 - Merge
 - Options
 - Patch
 - Post
 - Put
 - Trace
 
 -OutFile <i>String</i>
 The output file for which this cmdlet saves the response body. Enter a path and file name.
 If you omit the path, the default is the current location.
 
 By default, Invoke-RestMethod returns the results to the pipeline. To send the results to a file and to the 
 pipeline, use the Passthru parameter.
 
 -PassThru
 Indicates that the cmdlet returns the results, in addition to writing them to a file. This parameter is valid 
 only when the OutFile parameter is also used in the command.
 -Proxy <i>Uri</i>
 A proxy server for the request, rather than connecting directly to the Internet resource. Enter the 
 URI of a network proxy server.
 
 -ProxyCredential <i>PSCredential</i>
 A user account that has permission to use the proxy server that is specified by the -Proxy parameter. 
 The default is the current user.
 
 Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated 
 by the Get-Credential cmdlet.
 
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 
 -ProxyUseDefaultCredentials
 Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is 
 specified by the Proxy parameter.
 
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 
 -SessionVariable <i>String</i>
 Specifies a variable for which this cmdlet creates a web request session and saves it in the value. Enter a 
 variable name without the dollar sign ($) symbol.
 
 When you specify a session variable, Invoke-RestMethod creates a web request session object and assigns it to 
 a variable with the specified name in your Windows PowerShell session. You can use the variable in your 
 session as soon as the command completes.
 
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 
 To use the web request session in subsequent web requests, specify the session variable in the value of the 
 WebSession parameter. Windows PowerShell uses the data in the web request session object when establishing the 
 new connection. To override a value in the web request session, use a cmdlet parameter, such as UserAgent or 
 Credential . Parameter values take precedence over values in the web request session.
 You cannot use the SessionVariable and WebSession parameters in the same command.
 
 -TimeoutSec <i>Int32</i>
 How long the request can be pending before it times out. Enter a value in seconds. The default 
 value, 0, specifies an indefinite time-out.
 
 A Domain Name System (DNS) query can take up to 15 seconds to return or time out. If your request contains a 
 host name that requires resolution, and you set TimeoutSec to a value greater than zero, but less than 15 
 seconds, it can take 15 seconds or more before a WebException is thrown, and your request times out.
 
 -TransferEncoding <i>String</i>
 A value for the transfer-encoding HTTP response header. The acceptable values for this parameter are:
 - Chunked
 - Compress
 - Deflate
 - GZip
 - Identity
 -Uri <i>Uri</i>
 The Uniform Resource Identifier (URI) of the Internet resource to which the web request is sent. 
 Enter a URI. This parameter supports HTTP, HTTPS, FTP, and FILE values.
 
 This parameter is required. The parameter name ( Uri ) is optional.
 
 -UseBasicParsing
 Indicates that the cmdlet uses basic parsing.
 The Body parameter can be used to specify a list of query parameters or specify the content of the response.
 When the input is a GET request, and the body is an IDictionary (typically, a hash table), the body is added
 to the URI as query parameters. For other request types (such as POST), the body is set as the value of the
 request body in the standard name=value format.
 When the body is a form, or it is the output of another Invoke-WebRequest call, PowerShell sets the request
 content to the form fields.
 For example:
 `$R = Invoke-WebRequest http://website.com/login.aspx`
 `$R.Forms[0].Name = &quot;MyName&quot;`
 `$R.Forms[0].Password = &quot;MyPassword&quot;`
 `Invoke-RestMethod http://website.com/service.aspx -Body $R`
 - or -
 `Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]`
 
 -UseDefaultCredentials
 Indicates that the cmdet uses the credentials of the current user to send the web request.
 
 -UserAgent <i>String</i>
 A user agent string for the web request.
 
 The default user agent is similar to Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) WindowsPowerShell/3.0 
 with slight variations for each operating system and platform.
 
 To test a website with the standard user agent string that is used by most Internet browsers, use the 
 properties of the PSUserAgent
 class, such as Chrome, FireFox, InternetExplorer, Opera, and Safari.
 
 For example, the following command uses the user agent string for Internet
 
 `Invoke-WebRequest -Uri http://website.com/ -UserAgent 
 ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)`
 
 -WebSession <i>WebRequestSession</i>
 A web request session. Enter the variable name, including the dollar sign ($).
 
 To override a value in the web request session, use a cmdlet parameter, such as UserAgent or Credential . 
 Parameter values take precedence over values in the web request session.
 
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 
 To create a web request session, enter a variable name (without a dollar sign) in the value of the 
 SessionVariable parameter of an Invoke-RestMethod command. Invoke-RestMethod creates the session and saves it 
 in the variable. In subsequent commands, use the variable as the value of the WebSession parameter.
 
 You cannot use the SessionVariable and WebSession parameters in the same command.
","https://ss64.com/ps/invoke-restmethod.html","System Utility, Remote Connection","Web"
"Get-NetIPAddress","Get IPAddress configuration"," Get-NetIPAddress [[-IPAddress] <i>String</i>[]&gt;] [-InterfaceIndex <i>UInt32</i>[]] [-InterfaceAlias <i>String</i>[]]
 [-AddressFamily <i>AddressFamily</i>[]] [-Type <i>Type</i>[]] [-PrefixLength <i>Byte</i>[]] [-PrefixOrigin <i>PrefixOrigin</i>[]]
 [-SuffixOrigin <i>SuffixOrigin</i>[]&gt;] [-AddressState <i>AddressState</i>[]] [-ValidLifetime <i>TimeSpan</i>[]]
 [-PreferredLifetime <i>TimeSpan</i>[]&gt;] [-SkipAsSource <i>Boolean</i>[]] [-AssociatedIPInterface <i>CimInstance</i>]
 [-PolicyStore <i>String</i>] [-IncludeAllCompartments] [-CimSession <i>CimSession</i>[]] [-ThrottleLimit <i>Int32</i>]
 [-AsJob] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AddressFamily
 Gets the IP address configurations that match the address families.
 Accepted values: IPv4, IPv6 (either or both as an array).
 -AddressState
 An array of duplicate address detection (DAD) state values for the IP address.
 Use this parameter to filter the output based on addresses that are valid and available for use.
 Accepted values: 
 -- Invalid. IP address configuration information for addresses that are not valid and will not be used.
 -- Tentative. IP address configuration information for addresses that are not used for communication,
 as the uniqueness of those IP addresses is being verified.
 -- Duplicate. IP address configuration information for addresses for which a duplicate IP address has been
 detected and the current IP address will not be used.
 -- Deprecated. IP address configuration information for addresses that will no longer be used to establish new
 connections, but will continue to be used with existing connections.
 -- Preferred. IP address configuration information for addresses that are valid and available for use.
 -AsJob
 Run the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.
 -AssociatedIPInterface
 Specify an IP interface as a CIM object. To obtain an IP interface, use the Get-NetIPInterface cmdlet.
 -CimSession
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -IncludeAllCompartments
 Indicates that the cmdlet includes addresses from all configured network compartments.
 If you do not specify this parameter, the cmdlet gets only addresses in the default network compartment.
 -InterfaceAlias
 Specifies an array of aliases of network interfaces. The cmdlet gets IP addresses that match the aliases.
 -InterfaceIndex
 Specifies an array of indexes of network interfaces. The cmdlet gets IP addresses that match the indexes.
 -IPAddress
 Specifies an array of IPv4 or IPv6 addresses.
 -PolicyStore
 Specifies a PolicyStore value.
 Accepted values:
 <u>ActiveStore</u> The IP address information is valid.
 PersistentStore The computer saves IP address information across restarts.
 When the computer restarts, it copies the saved settings to the ActiveStore.
 The default value is ActiveStore.
 -PreferredLifetime
 Specifies an array of values of preferred lifetimes, as TimeSpan objects, for an IP address.
 To obtain a TimeSpan object, use the New-TimeSpan cmdlet.
 -PrefixLength
 Specifies an array of prefix lengths. This parameter defines the local subnet size, and is also known as a subnet mask.
 -PrefixOrigin
 Specifies an array of origins for address prefixes. IP addresses are divided into two parts, the prefix and the suffix.
 The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion.
 Accepted values:
 Manual The IP address prefix was manually specified. 
 WellKnown The IP address prefix is from a well-known source. 
 DHCP The IP address prefix was provided by DHCP settings. 
 RouterAdvertisement The IP address prefix was obtained through a router advertisement (RA). 
 Other The IP address prefix was obtained from another source, such as a VPN.
 -SkipAsSource
 Indicates whether an address is a primary IP address.
 This parameter identifies the primary IP address for outgoing traffic in a multiple IP address scenario.
 If this parameter is set to True, the addresses are not used for outgoing traffic and are not registered in DNS.
 -SuffixOrigin
 Specifies an array of origins for address suffixes.
 IP addresses are divided into two parts, the prefix and the suffix.
 The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion. 
 Accepted values:
 Manual The IP address suffix was manually specified.
 WellKnown The IP address suffix is from a well-known source.
 DHCP The IP address suffix was provided by DHCP settings.
 Link The IP address suffix was obtained from the link-layer address.
 Random The IP address suffix was obtained from a random source.
 Other The IP address suffix was obtained from another source, such as a VPN.
 -ThrottleLimit
 Specifies the maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle limit for
 the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
 -Type
 Specifies an array of IP address types.
 Accepted values: <u>Unicast</u> or Anycast, default = Unicast.
 -ValidLifetime
 Specifies an array of values for valid lifetimes, as TimeSpan objects, for an IP address.
 To obtain a TimeSpan object, use the New-TimeSpan cmdlet.
","https://ss64.com/ps/get-netipaddress.html","Networking, Enumeration",
"Invoke-Item","ii   Invoke an executable or open a file (START)."," Invoke-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-whatIf] [-confirm] [-UseTransaction]
 [-credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
 This parameter is valid only when a transaction is in progress.
 For more, see help about_Transactions.
","https://ss64.com/ps/invoke-item.html","System Utility","Command Execution, Scripting"
"si   ","Change the value of an item."," Set-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b> 
 [[-value] <i>Object</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Value <i>Object</i>
 A new value for the item.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -Exclude <i>string</i>
 Omit the specified items from the Path.
 Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.
 
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Option <i>ScopedItemOptions</i>
 Possible values include None,ReadOnly,Constant,AllScope and Private.
 (only valid when used with the Alias or Function provider)
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -PassThru
 Pass an object representing the item to the pipeline.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-item.html","System Utility",
"Set-Item","Change the value of an item."," Set-Item <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b> 
 [[-value] <i>Object</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Value <i>Object</i>
 A new value for the item.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -Exclude <i>string</i>
 Omit the specified items from the Path.
 Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.
 
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Option <i>ScopedItemOptions</i>
 Possible values include None,ReadOnly,Constant,AllScope and Private.
 (only valid when used with the Alias or Function provider)
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -PassThru
 Pass an object representing the item to the pipeline.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-item.html","System Utility",
"Clear-ItemProperty","clp   Remove the property value from a property."," Clear-ItemProperty [[-path]| [-literalPath] ] [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-passThru] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>[]
 The paths to the items from which content is deleted.
 Wildcards are permitted.
 -literalPath <i>string</i>[]
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -name <i>string</i>
 The name of the property to be cleared, wildcards are not permitted.
 -include <i>string</i>[]
 Clear only the specified items from the Path. e.g. ora*
 
 -exclude <i>string</i>[]
 Omits the specified items from the Path e.g. *SS64*&quot;
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 
 -force <i>SwitchParameter</i>
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 
 -credential <i>PSCredential</i>
 Uses a <i>credential</i> to validate access to the file. Credential represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved using Aliases for Clear-ItemProperty:  <b>clp</b></p>
 <p>Delete data in the 'Spud' registry value under 'DemoKey' in HKEY_LOCAL_MACHINE</p>
","https://ss64.com/ps/clear-itemproperty.html","System Utility",
"Clear-ItemProperty","Remove the property value from a property."," Clear-ItemProperty [[-path]| [-literalPath] ] [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-passThru] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>[]
 The paths to the items from which content is deleted.
 Wildcards are permitted.
 -literalPath <i>string</i>[]
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -name <i>string</i>
 The name of the property to be cleared, wildcards are not permitted.
 -include <i>string</i>[]
 Clear only the specified items from the Path. e.g. ora*
 
 -exclude <i>string</i>[]
 Omits the specified items from the Path e.g. *SS64*&quot;
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 
 -force <i>SwitchParameter</i>
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 
 -credential <i>PSCredential</i>
 Uses a <i>credential</i> to validate access to the file. Credential represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved using Aliases for Clear-ItemProperty:  <b>clp</b></p>
 <p>Delete data in the 'Spud' registry value under 'DemoKey' in HKEY_LOCAL_MACHINE</p>
","https://ss64.com/ps/clear-itemproperty.html","System Utility",
"clp","Remove the property value from a property."," Copy-ItemProperty [[-path] | [-literalPath] ] <i>string</i>[]
 [[-destination] <i>string</i>[]] [-name <i>string</i>] [-force]
 [-incude <i>string</i>[] ] [-exclude <i>string</i>[] ]
 [-filter <i>string</i>] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The items to copy, Wildcards are permitted.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination <i>string</i>
 Where the items are to be copied.
 -name <i>string</i> 
 The name of the property to copy.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -include <i>string</i>
 Copy only the specified items from the Path. e.g. May*
 -exclude <i>string</i>
 Omits the specified items from the Path e.g. *SS64*&quot;
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -credential <i>PSCredential</i>
 Uses a <i>credential</i> to validate access to the file. Credential represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved using transaction.
","https://ss64.com/ps/copy-itemproperty.html","System Utility",
"Get-ItemProperty","Retrieve the properties of an object."," Get-ItemProperty { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-name] <i>string</i>[]] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-credential <i>PSCredential</i>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -name <i>string</i>
 The name(s) of the property to retrieve.
 n.b. -name '(default)' will retrieve all properties, not just the default value.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-itemproperty.html","Enumeration",
"gp","Retrieve the properties of an object."," Get-ItemProperty { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-name] <i>string</i>[]] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-credential <i>PSCredential</i>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -name <i>string</i>
 The name(s) of the property to retrieve.
 n.b. -name '(default)' will retrieve all properties, not just the default value.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-itemproperty.html","Enumeration",
"Move-ItemProperty","Move a property from one location to another."," Move-ItemProperty { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction][<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination <i>string</i>
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 -name <i>string</i>
 The name of the property to be moved.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-itemproperty.html","File Manipulation",
"mp","Move a property from one location to another."," Move-ItemProperty { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction][<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. 
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination <i>string</i>
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 -name <i>string</i>
 The name of the property to be moved.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-itemproperty.html","File Manipulation",
"New-ItemProperty","Set a new property."," New-ItemProperty { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-name] <i>string</i>[]] [-propertyType <i>string</i>] [-value <i>Object</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the item for which a new property is to be created.
 Wildcards are permitted.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -name <i>string</i>
 The name of the property to create.
 -propertyType <i>string</i>
 The Type of the property.
 -value <i>Object</i>
 The Value of the property.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force 
 Override restrictions such as renaming existing files as long
 as security is not compromised.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/new-itemproperty.html","File Manipulation",
"Remove-ItemProperty","Remove a property and its value."," Remove-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [[-name] <i>string</i>[]] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the item whose properties are being removed.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property to be retrieved.
 -Include <i>string</i>
 Delete only the specified items from the Path e.g. May*
 this only works when the path includes a wildcard character.
 
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as one retrieved by Get-Credential.
 If you type a user name, you will be prompted for a password.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-itemproperty.html","File Manipulation",
"rp","Remove a property and its value."," Remove-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [[-name] <i>string</i>[]] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-whatIf] [-confirm]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the item whose properties are being removed.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property to be retrieved.
 -Include <i>string</i>
 Delete only the specified items from the Path e.g. May*
 this only works when the path includes a wildcard character.
 
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as one retrieved by Get-Credential.
 If you type a user name, you will be prompted for a password.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-itemproperty.html","File Manipulation",
"Rename-ItemProperty","Renames a property at its location."," Rename-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [[-name] <i>string</i>[]] [-newName] <i>string</i>
 [-passThru] [-force] [-filter <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the item to be renamed. Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property to rename.
 -NewName <i>string</i>
 The new name for the property.
 -PassThru 
 Pass the object created by Rename-ItemProperty along the pipeline. 
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-itemproperty.html","File Manipulation",
"rnp","Renames a property at its location."," Rename-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [[-name] <i>string</i>[]] [-newName] <i>string</i>
 [-passThru] [-force] [-filter <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the item to be renamed. Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property to rename.
 -NewName <i>string</i>
 The new name for the property.
 -PassThru 
 Pass the object created by Rename-ItemProperty along the pipeline. 
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-itemproperty.html","File Manipulation",
"Set-ItemProperty","Set a property at the specified location to a specified value."," Set-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 <b>[-name] <i>string</i> [-value] Object</b> [-Type <i>registry_data_type</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 <b>-inputObject psobject</b> [-Type <i>registry_data_type</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items with the property to be set.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property.
 -Value <i>Object</i>
 The value of the property.
 -inputObject <i>psobject</i>
 The object that has the properties to be changed.
 Enter a variable that contains the object or a command that gets the object.
 -Type <i>registry_data_type</i>
 A dynamic parameter that is only available in registry drives.
 Values:
 String A null-terminated string. Equivalent to REG_SZ.
 ExpandString A null-terminated string that contains unexpanded references to environment variables that
 are expanded when the value is retrieved. Equivalent to REG_EXPAND_SZ.
 Binary Binary data in any form. Equivalent to REG_BINARY.
 DWord A 32-bit binary number. Equivalent to REG_DWORD.
 MultiString An array of null-terminated strings terminated by two null characters. Equivalent to REG_MULTI_SZ.
 Qword A 64-bit binary number. Equivalent to REG_QWORD.
 Unknown An unsupported registry data type, such as REG_RESOURCE_LIST.
 -include <i>string</i>
 Specify only those items upon which the cmdlet will act, excluding all others.
 -Exclude <i>string</i>
 Specify items upon which the cmdlet is <i>not</i> to act, and include all others.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, but will
 not override security settings.
 -PassThru
 Return an object representing the item property.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-itemproperty.html","File Manipulation",
"Split-Path","Set a property at the specified location to a specified value."," Set-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 <b>[-name] <i>string</i> [-value] Object</b> [-Type <i>registry_data_type</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 <b>-inputObject psobject</b> [-Type <i>registry_data_type</i>] [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-passThru] [-credential <i>PSCredential</i>]
 [-whatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the items with the property to be set.
 Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property.
 -Value <i>Object</i>
 The value of the property.
 -inputObject <i>psobject</i>
 The object that has the properties to be changed.
 Enter a variable that contains the object or a command that gets the object.
 -Type <i>registry_data_type</i>
 A dynamic parameter that is only available in registry drives.
 Values:
 String A null-terminated string. Equivalent to REG_SZ.
 ExpandString A null-terminated string that contains unexpanded references to environment variables that
 are expanded when the value is retrieved. Equivalent to REG_EXPAND_SZ.
 Binary Binary data in any form. Equivalent to REG_BINARY.
 DWord A 32-bit binary number. Equivalent to REG_DWORD.
 MultiString An array of null-terminated strings terminated by two null characters. Equivalent to REG_MULTI_SZ.
 Qword A 64-bit binary number. Equivalent to REG_QWORD.
 Unknown An unsupported registry data type, such as REG_RESOURCE_LIST.
 -include <i>string</i>
 Specify only those items upon which the cmdlet will act, excluding all others.
 -Exclude <i>string</i>
 Specify items upon which the cmdlet is <i>not</i> to act, and include all others.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Force
 Override restrictions that prevent the command from succeeding, but will
 not override security settings.
 -PassThru
 Return an object representing the item property.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/set-itemproperty.html","File Manipulation",
"Get-ItemPropertyValue","Get the value for one or more properties of a specified item.","Not Available","Not Available","Not Available","Enumeration, File Manipulation",
"gpv","Get the value for one or more properties of a specified item.","Not Available","Not Available","Not Available","Enumeration, File Manipulation",
"Get-Job","Get PowerShell background jobs that are running."," Get-Job [-Command <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-InstanceId] <i>Guid</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-Name] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-Id] <i>Int32</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Get the jobs that include the specified command.
 The default is all jobs. Enter a command (as a string).
 You can use wildcards to specify a command pattern.
 -Id <i>Int32</i>[]
 Get only jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Get jobs with the specified instance IDs. The default is all jobs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Name <i>string</i>[]
 Get the job with the specified friendly names.
 Enter a job name, or use wildcard characters to enter a job name pattern.
 By default, Get-Job gets all jobs in the current session.
 -State <i>JobState</i>
 Get only jobs in the specified state.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 By default, Get-Job gets all the jobs in the current session.
","https://ss64.com/ps/get-job.html","System Administration, Enumeration",
"gjb","Get PowerShell background jobs that are running."," Get-Job [-Command <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-InstanceId] <i>Guid</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-Name] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [[-Id] <i>Int32</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Get the jobs that include the specified command.
 The default is all jobs. Enter a command (as a string).
 You can use wildcards to specify a command pattern.
 -Id <i>Int32</i>[]
 Get only jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Get jobs with the specified instance IDs. The default is all jobs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Name <i>string</i>[]
 Get the job with the specified friendly names.
 Enter a job name, or use wildcard characters to enter a job name pattern.
 By default, Get-Job gets all jobs in the current session.
 -State <i>JobState</i>
 Get only jobs in the specified state.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 By default, Get-Job gets all the jobs in the current session.
","https://ss64.com/ps/get-job.html","System Administration, Enumeration",
"Receive-Job","Get PowerShell background job results."," Receive-Job [-Job] Job[] [[-ComputerName] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [[-InstanceId] <i>Guid</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Job] <i>Job</i>[] [[-Location] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [[-Name] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Job] <i>Job</i>[] [[-Session] <i>PSSession</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Id] <i>Int32</i>[] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName<i>string</i>[]
 Get the results of jobs that were run on the specified computers.
 Enter the computer names. The default is all jobs in the current session.
 This parameter selects from among the job results that are stored on the local computer.
 It does not get data from remote computers. To get job results that are stored on remote
 computers, use the Invoke-Command cmdlet to run a Receive-Job command remotely.
 -Id <i>Int32</i>[]
 Get the results of only jobs with the specified IDs.
 The default is all jobs in the current session.
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Get the results of jobs with the specified instance IDs.
 The default is all jobs in the current session.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The job for which results are being retrieved.
 This parameter is required in a Receive-Job command.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Keep
 Save the job results in the system, even after you have received them.
 By default, the job results are deleted when they are retrieved. 
 To delete the results, use Receive-Job to receive them again without the
 Keep parameter, close the session, or use Remove-Job to delete the job from the session.
 -Location <i>string</i>[]
 Get only the results of jobs with the specified location.
 The default is all jobs in the current session.
 -Name <i>string</i>[]
 Get the results of jobs with the specified friendly name.
 The default is all jobs in the current session.
 -NoRecurse
 Get results only from the specified job.
 By default, Receive-Job also gets the results of all child jobs of the specified job.
 -Session <i>PSSession</i>[]
 Get the results of jobs that were run in the specified PowerShell session (PSSession).
 Enter a variable that contains the PSSession or a command that gets the PSSession,
 such as a Get-PSSession command.
 The default is all jobs in the current session.
","https://ss64.com/ps/receive-job.html","System Utility","Command Execution, Scripting"
"rcjb  ","Get PowerShell background job results."," Receive-Job [-Job] Job[] [[-ComputerName] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [[-InstanceId] <i>Guid</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Job] <i>Job</i>[] [[-Location] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [[-Name] <i>string</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Job] <i>Job</i>[] [[-Session] <i>PSSession</i>[]] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
 Receive-Job [-Id] <i>Int32</i>[] [-Keep] [-NoRecurse] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName<i>string</i>[]
 Get the results of jobs that were run on the specified computers.
 Enter the computer names. The default is all jobs in the current session.
 This parameter selects from among the job results that are stored on the local computer.
 It does not get data from remote computers. To get job results that are stored on remote
 computers, use the Invoke-Command cmdlet to run a Receive-Job command remotely.
 -Id <i>Int32</i>[]
 Get the results of only jobs with the specified IDs.
 The default is all jobs in the current session.
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Get the results of jobs with the specified instance IDs.
 The default is all jobs in the current session.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The job for which results are being retrieved.
 This parameter is required in a Receive-Job command.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Keep
 Save the job results in the system, even after you have received them.
 By default, the job results are deleted when they are retrieved. 
 To delete the results, use Receive-Job to receive them again without the
 Keep parameter, close the session, or use Remove-Job to delete the job from the session.
 -Location <i>string</i>[]
 Get only the results of jobs with the specified location.
 The default is all jobs in the current session.
 -Name <i>string</i>[]
 Get the results of jobs with the specified friendly name.
 The default is all jobs in the current session.
 -NoRecurse
 Get results only from the specified job.
 By default, Receive-Job also gets the results of all child jobs of the specified job.
 -Session <i>PSSession</i>[]
 Get the results of jobs that were run in the specified PowerShell session (PSSession).
 Enter a variable that contains the PSSession or a command that gets the PSSession,
 such as a Get-PSSession command.
 The default is all jobs in the current session.
","https://ss64.com/ps/receive-job.html","System Utility, Enumeration","Command Execution, Scripting"
"Remove-Job","Delete a PowerShell background job."," Remove-Job [-Id] <i>Int32</i>[] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-Command <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [[-InstanceId] <i>Guid</i>[]] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-Job] <i>Job</i>[] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [[-Name] <i>string</i>[]] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Remove jobs that include the specified words in the command.
 -Force
 Delete the job even if the status is &quot;Running&quot;.
 Without -Force, Remove-Job will not delete a running job.
 -Id <i>Int32</i>[]
 Delete background jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Delete jobs with the specified instance IDs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The the jobs to be deleted.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Name <i>string</i>[]
 Delete only the jobs with the specified friendly names.
 Wildcards are permitted.
 Because the friendly name is not guaranteed to be unique, even within
 the session, use -WhatIf and -Confirm parameters when deleting jobs by name.
 
 -State <i>JobState</i>
 Delete only jobs with the specified status.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 To delete jobs with a status of Running, use -Force.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if the command was executed without actually executing the command.
","https://ss64.com/ps/remove-job.html","System Utility","Command Execution, Scripting"
"rjb   ","Delete a PowerShell background job."," Remove-Job [-Id] <i>Int32</i>[] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-Command <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [[-InstanceId] <i>Guid</i>[]] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-Job] <i>Job</i>[] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [[-Name] <i>string</i>[]] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Remove jobs that include the specified words in the command.
 -Force
 Delete the job even if the status is &quot;Running&quot;.
 Without -Force, Remove-Job will not delete a running job.
 -Id <i>Int32</i>[]
 Delete background jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Delete jobs with the specified instance IDs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The the jobs to be deleted.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Name <i>string</i>[]
 Delete only the jobs with the specified friendly names.
 Wildcards are permitted.
 Because the friendly name is not guaranteed to be unique, even within
 the session, use -WhatIf and -Confirm parameters when deleting jobs by name.
 
 -State <i>JobState</i>
 Delete only jobs with the specified status.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 To delete jobs with a status of Running, use -Force.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if the command was executed without actually executing the command.
","https://ss64.com/ps/remove-job.html","System Utility","Command Execution, Scripting"
"Resume-Job","Restart a suspended job.","Not Available","Not Available","Not Available","System Utility","Command Execution, Scripting"
"ruib","Restart a suspended job.","Not Available","Not Available","Not Available","System Utility","Command Execution, Scripting"
"Start-Job","Start a PowerShell background job."," Start-Job [<b>-ScriptBlock</b>] <i>scriptblock</i> [[-InitializationScript] <i>scriptblock</i>]
 [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-InputObject <i>psobject</i>]
 [-Name <i>string</i>] [-RunAs32] [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Job [[<b>-FilePath</b>] <i>string</i>] [[-InitializationScript] <i>scriptblock</i>]
 [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-InputObject <i>psobject</i>]
 [-Name <i>string</i>] [-RunAs32] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>Object</i>[]
 The arguments (parameter values) for the script specified by the -FilePath parameter. 
 Because all of the values that follow -ArgumentList are interpreted as being values
 of ArgumentList, the ArgumentList parameter should be the last parameter in the command.
 -Authentication <i>AuthenticationMechanism</i>
 The mechanism that is used to authenticate the user's credentials.
 Valid values are Default, Basic, Credssp, Digest, Kerberos, Negotiate, and
 NegotiateWithImplicitCredential. The default value is Default.
 CredSSP authentication is available only in Vista, Windows Server 2008, and later.
 automatic variable to represent the input objects.
","https://ss64.com/ps/start-job.html","System Utility","Command Execution, Scripting"
"sajb","Start a PowerShell background job."," Start-Job [<b>-ScriptBlock</b>] <i>scriptblock</i> [[-InitializationScript] <i>scriptblock</i>]
 [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-InputObject <i>psobject</i>]
 [-Name <i>string</i>] [-RunAs32] [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Job [[<b>-FilePath</b>] <i>string</i>] [[-InitializationScript] <i>scriptblock</i>]
 [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-InputObject <i>psobject</i>]
 [-Name <i>string</i>] [-RunAs32] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>Object</i>[]
 The arguments (parameter values) for the script specified by the -FilePath parameter. 
 Because all of the values that follow -ArgumentList are interpreted as being values
 of ArgumentList, the ArgumentList parameter should be the last parameter in the command.
 -Authentication <i>AuthenticationMechanism</i>
 The mechanism that is used to authenticate the user's credentials.
 Valid values are Default, Basic, Credssp, Digest, Kerberos, Negotiate, and
 NegotiateWithImplicitCredential. The default value is Default.
 CredSSP authentication is available only in Vista, Windows Server 2008, and later.
 automatic variable to represent the input objects.
","https://ss64.com/ps/start-job.html","System Utility","Command Execution, Scripting"
"Stop-Job","Stop a PowerShell background job."," Stop-Job [-Job <i>job</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-InstanceId] <i>Guid</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-Name] <i>string</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-Id] <i>Int32</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Job <i>Job</i>[]
 The jobs to be stopped.
 Enter a variable that contains the jobs or a command that gets the jobs.
 Jobs can also be piped to Stop-Job.
 By default, will delete all jobs that were started in the current session.
 -Id <i>Int32</i>[]
 Stop only jobs with the specified IDs. The default is all jobs in the current session.
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Stop jobs with the specified instance IDs. The default is all jobs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Name <i>string</i>[]
 Stop the job(s) with the specified friendly names.
 Enter a job name, or use wildcard characters to enter a job name pattern.
 By default, stops all jobs in the current session.
 The friendly name is not guaranteed to be unique, use the -WhatIf and -Confirm parameters
 -PassThru Return an object representing the new background job. By default, this cmdlet does not generate any output.
 -State <i>JobState</i>
 Stop only jobs in the specified state.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 -Confirm
 Prompt for confirmation before executing the command.
 
 -WhatIf
 Describe what would happen without actually executing the command.
","https://ss64.com/ps/stop-job.html","System Utility","Command Execution, Scripting"
"spib","Stop a PowerShell background job."," Stop-Job [-Job <i>job</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-InstanceId] <i>Guid</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-Name] <i>string</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [[-Id] <i>Int32</i>[]] [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Stop-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Job <i>Job</i>[]
 The jobs to be stopped.
 Enter a variable that contains the jobs or a command that gets the jobs.
 Jobs can also be piped to Stop-Job.
 By default, will delete all jobs that were started in the current session.
 -Id <i>Int32</i>[]
 Stop only jobs with the specified IDs. The default is all jobs in the current session.
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Stop jobs with the specified instance IDs. The default is all jobs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Name <i>string</i>[]
 Stop the job(s) with the specified friendly names.
 Enter a job name, or use wildcard characters to enter a job name pattern.
 By default, stops all jobs in the current session.
 The friendly name is not guaranteed to be unique, use the -WhatIf and -Confirm parameters
 -PassThru Return an object representing the new background job. By default, this cmdlet does not generate any output.
 -State <i>JobState</i>
 Stop only jobs in the specified state.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 -Confirm
 Prompt for confirmation before executing the command.
 
 -WhatIf
 Describe what would happen without actually executing the command.
","https://ss64.com/ps/stop-job.html","System Utility","Command Execution, Scripting"
"Wait-Job","Wait for a background job."," Wait-Job [-Id] <i>Int32</i>[] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-Filter] <i>Hashtable</i> [-Any] [-Force] [-Timeout <i>Int32</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [[-InstanceId] <i>Guid</i>[]] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-Job] <i>Job</i>[] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [[-Name] <i>string</i>[]] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}]
 [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Any
 Display the command prompt (and return the job object) when any job completes.
 By default, Wait-Job waits until <b>all</b> of the specified jobs are complete.
 -Filter <i>Hashtable</i>
 Wait for jobs that satisfy all of the conditions established in the associated hash table.
 Enter a hash table where the keys are job properties and the values are job property values.
 This parameter works only on custom job types, such as workflow jobs and scheduled jobs.
 It does not work on standard background jobs, such as those created by using Start-Job.
 (PowerShell 3.0+)
 -Id <i>Int32</i>[]
 Wait for jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Wait for jobs with the specified instance IDs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The the jobs to be deleted.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Name <i>string</i>[]
 Wait for jobs with the specified friendly name(s).
 
 -State <i>JobState</i>
 Wait for jobs with the specified status.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 -Force
 Continue waiting if jobs are in the Suspended or Disconnected state.
 By default, Wait-Job returns (terminates the wait) when jobs are in one of the
 following states: Completed, Failed, Stopped, Suspended, or Disconnected. 
 (PowerShell 3.0+) 
 -Timeout <i>int</i> The maximum wait time for each background job, in seconds.
 The default, -1, waits until the job completes, no matter how long it runs.
 The timing starts when you submit the Wait-Job command.   If this time is exceeded, the wait will end and the command prompt returns, 
 even if the job is still running. No error message is displayed.
","https://ss64.com/ps/wait-job.html","System Utility","Command Execution, Scripting"
"wjb","Wait for a background job."," Wait-Job [-Id] <i>Int32</i>[] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-Filter] <i>Hashtable</i> [-Any] [-Force] [-Timeout <i>Int32</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [[-InstanceId] <i>Guid</i>[]] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-Job] <i>Job</i>[] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [[-Name] <i>string</i>[]] [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Wait-Job [-State {NotStarted | Running | Completed | Failed | Stopped | Blocked}]
 [-Any] [-Force] [-Timeout <i>int</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Any
 Display the command prompt (and return the job object) when any job completes.
 By default, Wait-Job waits until <b>all</b> of the specified jobs are complete.
 -Filter <i>Hashtable</i>
 Wait for jobs that satisfy all of the conditions established in the associated hash table.
 Enter a hash table where the keys are job properties and the values are job property values.
 This parameter works only on custom job types, such as workflow jobs and scheduled jobs.
 It does not work on standard background jobs, such as those created by using Start-Job.
 (PowerShell 3.0+)
 -Id <i>Int32</i>[]
 Wait for jobs with the specified IDs. 
 The ID is an integer that uniquely identifies the job within the current session.
 It is easier to remember and to type than the instance ID, but it is unique only
 within the current session. You can type one or more IDs (separated by commas).
 To find the ID of a job, type &quot;Get-Job&quot; without parameters.
 -InstanceId <i>Guid</i>[]
 Wait for jobs with the specified instance IDs.
 An instance ID is a GUID that uniquely identifies the job on the computer.
 To find the instance ID of a job, use Get-Job.
 -Job <i>Job</i>[]
 The the jobs to be deleted.
 Enter a variable that contains the job or a command that gets the job.
 You can also pipe a job object to Receive-Job.
 -Name <i>string</i>[]
 Wait for jobs with the specified friendly name(s).
 
 -State <i>JobState</i>
 Wait for jobs with the specified status.
 Valid values are NotStarted, Running, Completed, Stopped, Failed, and Blocked.
 -Force
 Continue waiting if jobs are in the Suspended or Disconnected state.
 By default, Wait-Job returns (terminates the wait) when jobs are in one of the
 following states: Completed, Failed, Stopped, Suspended, or Disconnected. 
 (PowerShell 3.0+) 
 -Timeout <i>int</i> The maximum wait time for each background job, in seconds.
 The default, -1, waits until the job completes, no matter how long it runs.
 The timing starts when you submit the Wait-Job command.   If this time is exceeded, the wait will end and the command prompt returns, 
 even if the job is still running. No error message is displayed.
","https://ss64.com/ps/wait-job.html","System Utility","Command Execution, Scripting"
"Job","Get/Set Scheduled job triggers.","Not Available","Not Available","https://ss64.com/ps/scheduler.html","System Utility, Enumeration",
"Stop-Process","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Utility","Command Execution"
"kill","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Utility","Command Execution"
"spps","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Utility","Command Execution"
"Add-KdsRootKey","Generate a new root key for the MS.Group KdsSvc within AD.","Not Available","Not Available","Not Available","System Administration",
"Update-List","Add and remove items from a collection."," Update-List [-Add <i>Object</i>[]] [-Remove <i>Object</i>[]]
 [[-Property] <i>string</i>] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Update-List -Replace <i>Object</i>[]
 [[-Property] <i>string</i>] [-InputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Add <i>Object</i>[]
 The property values to be added to the collection.
 Enter the values in the order that they should appear in the collection.
 -InputObject <i>psobject
","https://ss64.com/ps/update-list.html","System Utility",
"New-LocalGroup","Add a new local security group."," New-Localgroup [-Description <i>String</i>] [-Name] <i>String</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Description
 Set a comment for the group. The maximum length is 48 characters.
 -name
 Set a name for the group. The maximum length is 256 characters.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/new-localgroup.html","System Administration",
"Get-LocalGroup","Get the local security groups."," Get-Localgroup [[-Name] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Localgroup [[-SID] <i>SecurityIdentifier</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 An array of names of security groups to get. Accepts wildcards.
 -SID
 An array of security IDs (SIDs) of security groups to get.
","https://ss64.com/ps/get-localgroup.html","System Administration, Enumeration",
"Remove-LocalGroup","Remove a local security group.","Not Available","Not Available","Not Available","System Administration",
"Rename-LocalGroup","Rename a local security group.","Not Available","Not Available","Not Available","System Administration",
"Set-LocalGroup","Change a local security group."," Set-Localgroup -Description <i>String</i>
 { [-Name] <i>String</i> | [-InputObject] <i>LocalGroup</i> | [-SID] <i>SecurityIdentifier</i> }
 [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Description
 Set a comment for the group. The maximum length is 48 characters.
 -InputObject
 The security group object to be changed. To obtain a security group, use Get-LocalGroup.
 -name
 The name of the security group to be changed.
 -SID
 The security ID (SID) of the security group to be changed.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/set-localgroup.html","System Administration",
"Add-LocalGroupMember","Add members to a local group.","Not Available","Not Available","Not Available","System Administration",
"Get-LocalGroupMember","Get members from a local group.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"New-LocalUser","Create a local user account."," New-LocalUser [-Name] <i>String</i>
 [-AccountExpires <i>DateTime</i>] [-AccountNeverExpires] [-Description <i>String</i>]
 [-FullName <i>String</i>] [-Password <i>SecureString</i>] [-PasswordNeverExpires]
 [-UserMayNotChangePassword] [-Disabled] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-LocalUser [-Name] <i>String</i>
 [-AccountExpires <i>DateTime</i>] [-AccountNeverExpires] [-Description <i>String</i>]
 [-FullName <i>String</i>] [<b>-NoPassword</b>]
 [-UserMayNotChangePassword] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AccountExpires
 Specify when the user account should expire.
 To obtain a DateTime object, use ConvertTo-SecureString to create a SecureString
 object for the password.
 If you omit the Password you will be prompted for a password to set.
 A password can contain up to 127 characters.
 -PasswordNeverExpires
 Indicate whether the password expires (boolean).
 -UserMayNotChangePassword
 Indicate that the user cannot change the password on the user account.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/new-localuser.html","System Administration",
"Set-LocalUser","Modify a local user account."," Set-LocalUser [<b>-Name</b>] <i>String</i>
 [-AccountExpires <i>DateTime</i>] [-AccountNeverExpires] [-Description <i>String</i>]
 [-FullName <i>String</i>] [-Password <i>SecureString</i>] [-PasswordNeverExpires]
 [-UserMayChangePassword] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-LocalUser <b>{</b> [<b>-InputObject</b>] <i>LocalUser</i> | [<b>-SID</b>] <i>SecurityIdentifier</i> <b>}</b>
 [-AccountExpires <i>DateTime</i>] [-AccountNeverExpires] [-Description <i>String</i>]
 [-FullName <i>String</i>] [-Password <i>SecureString</i>] [-PasswordNeverExpires]
 [-UserMayChangePassword] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AccountExpires
 Specify when the user account should expire.
 To obtain a DateTime object, use ConvertTo-SecureString to create a SecureString
 object for the password.
 If you omit the Password you will be prompted for a password to set.
 -PasswordNeverExpires
 Indicate whether the password expires (boolean).
 -SID
 The security ID (SID) of the user account to change.
 -UserMayChangePassword
 Indicate that the user can change the password on the user account.
 
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/set-localuser.html","System Administration",
"Get-Location","Get and display the current location."," Get-Location [-psDrive <i>string</i>[]] [-psProvider <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Location [-stack] [-stackName <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -psDrive
 Get the current location in the specified PowerShell drive. 
 For example, if you are in the Certificate: drive, find the current location in 
 the C: drive.
 -psProvider 
 Get the current location in the drive supported by the specified PowerShell provider. 
 For example, if you are in the C: drive, find the current location in
 the Registry via the PowerShell Registry provider.
 If the specified provider supports more than one drive, Get-Location will 
 returns the location on the most recently accessed drive.
 
 -stack
 Display locations in the default path stack
 To add paths to the default stack, use Push-Location.
 -stackName
 Display locations in the specified path stacks.
 To create path stacks, use Push-Location.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-location.html","System Administration, Enumeration",
"pwd","Get and display the current location."," Get-Location [-psDrive <i>string</i>[]] [-psProvider <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Location [-stack] [-stackName <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -psDrive
 Get the current location in the specified PowerShell drive. 
 For example, if you are in the Certificate: drive, find the current location in 
 the C: drive.
 -psProvider 
 Get the current location in the drive supported by the specified PowerShell provider. 
 For example, if you are in the C: drive, find the current location in
 the Registry via the PowerShell Registry provider.
 If the specified provider supports more than one drive, Get-Location will 
 returns the location on the most recently accessed drive.
 
 -stack
 Display locations in the default path stack
 To add paths to the default stack, use Push-Location.
 -stackName
 Display locations in the specified path stacks.
 To create path stacks, use Push-Location.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-location.html","System Administration, Enumeration",
"gl","Get and display the current location."," Get-Location [-psDrive <i>string</i>[]] [-psProvider <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Location [-stack] [-stackName <i>string</i>[]]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -psDrive
 Get the current location in the specified PowerShell drive. 
 For example, if you are in the Certificate: drive, find the current location in 
 the C: drive.
 -psProvider 
 Get the current location in the drive supported by the specified PowerShell provider. 
 For example, if you are in the C: drive, find the current location in
 the Registry via the PowerShell Registry provider.
 If the specified provider supports more than one drive, Get-Location will 
 returns the location on the most recently accessed drive.
 
 -stack
 Display locations in the default path stack
 To add paths to the default stack, use Push-Location.
 -stackName
 Display locations in the specified path stacks.
 To create path stacks, use Push-Location.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-location.html","System Administration, Enumeration",
"Pop-Location","Set the current working location from the stack."," Pop-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -stackName <i>string</i>
 An alternate stack. This stack now becomes the current stack.
 -passThru 
 Pass the object created through the pipeline. 
 By default, Pop-Location does not pass any objects through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/pop-location.html","System Utility",
"popd   ","Set the current working location from the stack."," Pop-Location [-stackName <i>string</i>] [-passThru]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -stackName <i>string</i>
 An alternate stack. This stack now becomes the current stack.
 -passThru 
 Pass the object created through the pipeline. 
 By default, Pop-Location does not pass any objects through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/pop-location.html","System Utility",
"Push-Location","Push a location to the stack."," Push-Location { [[-path] <i>string</i>] | [-literalPath <i>string</i>] }
 [-stackName <i>string</i>] [-passThru] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 Change your location to <i>string</i><i> </i>after first pushing the 
 current location onto the stack. Wildcards are permitted.
 -literalPath <i>string</i>
 Like -Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks. 
 -stackName <i>string</i>
 An alternate stack. This stack now becomes the current stack.
 -passThru 
 Pass the object created through the pipeline. 
 By default, Pop-Location does not pass any objects through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/push-location.html","System Utility",
"pushd   ","Push a location to the stack."," Push-Location { [[-path] <i>string</i>] | [-literalPath <i>string</i>] }
 [-stackName <i>string</i>] [-passThru] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 Change your location to <i>string</i><i> </i>after first pushing the 
 current location onto the stack. Wildcards are permitted.
 -literalPath <i>string</i>
 Like -Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks. 
 -stackName <i>string</i>
 An alternate stack. This stack now becomes the current stack.
 -passThru 
 Pass the object created through the pipeline. 
 By default, Pop-Location does not pass any objects through the pipeline.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/push-location.html","System Utility",
"Send-MailMessage","Send an email message."," Send-MailMessage [-To] <i>string</i>[] [-Subject] <i>string</i> -From <i>string
 </i> [[-Body] <i>string</i>] [[-SmtpServer] <i>string</i>] [-Attachments <i>string</i>[]]
 [-Bcc <i>string</i>[]] [-Cc <i>string</i>[]] [-BodyAsHtml]
 [-Credential <i>PSCredential</i>] [-DeliveryNotificationOption <i>NotifyOptions</i>]
 [-Encoding <i>Encoding</i>] [-Priority <b>{</b>Normal <b>|</b> Low <b>|</b> High<b>}</b>]
 [-UseSSL] [-Port <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Attachments <i>string</i>[]
 The path and file names of files to be attached to the email message.
 Use this parameter or pipe the path/file names.
 -Bcc <i>string</i>[]
 Email addresses that receive a copy of the mail but are not listed as recipients of the message.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;
 -Body string
 The body (content) of the email message.
 -BodyAsHtml
 Indicates that the value of the Body parameter contains HTML.
 -Cc <i>string</i>[]
 Email addresses to which a carbon copy (CC) of the email message is sent.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. The default is the current user.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;. Or, enter a PSCredential object,
 such as one from the Get-Credential cmdlet.
 -DeliveryNotificationOption
 Delivery notifications (if accepted by the recipient) will be passed back to the email address
 specified in the -From parameter. The alias for this parameter is &quot;-dno&quot;.
 <i>NotifyOptions</i>:
 <u>None</u> No notification.
 OnSuccess Notify if the delivery is successful.
 OnFailure Notify if the delivery is unsuccessful.
 Delay Notify if the delivery is delayed.
 Never Never notify.
 -Encoding <i>Encoding</i>
 The encoding used for the body and subject. 'unicode' will send UTF16.
 Valid values are <u><b>ASCII</b></u>, <b>UTF8</b>, UTF7, UTF32, Unicode, BigEndianUnicode, Default, and OEM.
 -From <i>string</i>
 The address from which the mail is sent.
 Enter a name (optional) and email address, such as &quot;Name &lt;someone@example.com&gt;&quot;. This parameter is required.
 -Port
 An alternate port on the SMTP server.
 The default value is 25, which is the default SMTP port.
 The standard secure SMTP port is 587.
 This parameter is available in Windows PowerShell 3.0 and newer releases.
 -Priority <i>MailPriority</i>
 The priority of the email message.
 The valid values for this are <u>Normal</u>, High, and Low.
 -SmtpServer <i>string</i>
 The name of the SMTP server that sends the email message.
 The default value is the value of the $PSEmailServer preference variable.
 If the preference variable is not set and this parameter is omitted, the command fails.
 -Subject <i>string</i>
 The subject of the email message. This parameter is required.
 -To <i>string</i>[]
 The addresses to which the mail is sent.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;. Required.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer 
 to send mail. By default, SSL is not used, though most mail servers now require it.
","https://ss64.com/ps/send-mailmessage.html","System Utility","Email"
"Measure-Object","Measure the properties of an object."," Measure-Object [ [-property] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-average] [-sum] [-minimum] [-maximum] [-StandardDeviation] [-AllStats]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Measure-Object [ [-property] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-character] [-line] [-word] [-ignoreWhiteSpace]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -property <i>string</i>[]
 The property to measure.
 -AllStats
 Return all the statistics (average,sum,minimum,maximum,StandardDeviation) PowerShell 6+.
 -average 
 Average the values in the designated property.
 -character
 Count the number of characters in the input object.
 -inputObject 
 The object(s) to be measured. 
 A command, expression or variable that contains the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Measure-Object receives one object that represents the collection.
 Because one collection object cannot be measured, Measure-Object returns the entire collection unchanged.
 To convert multiple items, pipe them to Measure-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -ignoreWhiteSpace 
 Ignore white space in word counts and character counts.
 -line 
 Count the number of lines in the input object.
 -minimum 
 Determine the minimum value of the properties.
 -maximum 
 Determine the maximum value of the properties.
 -StandardDeviation
 Determine the standard deviation of the properties. PowerShell 6+.
 -sum
 Sum the values of the properties.
 -word 
 Count the number of words in the input object.
","https://ss64.com/ps/measure-object.html","System Utility",
"Add-Member","Add a member to an instance of a PowerShell object."," Add-Member -inputObject <i>PSObject</i> [-TypeName &lt;String&gt;]
 [-force] [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 Add-Member [<b>-NotePropertyName</b>] <i>String</i> [-NotePropertyValue] <i>Object</i>
 -inputObject<i> PSObject</i> [-TypeName <i>String</i>]
 [-force] [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 Add-Member [<b>-NotePropertyMembers</b>] <i>IDictionary</i>
 [-TypeName <i>String</i>] -InputObject <i>PSObject</i> 
 [-Force] [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 Add-Member [<b>-memberType</b> <i>PSMemberType</i>] [-name] <i>string</i> 
 [[-value] <i>Object</i>] [[-secondValue] <i>Object</i>]
 -inputObject<i> PSObject </i>[-TypeName <i>String</i>]
 [-force] [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -memberType <i>PSMemberType</i>
 The type of the member to add. Valid values for this are:
 {AliasProperty | CodeProperty| Property | NoteProperty | ScriptProperty
 | Properties | PropertySet | Method | CodeMethod | ScriptMethod | Methods
 | ParameterizedProperty | MemberSet | All}
 -inputObject <i>psobject</i>
 The object to which the new member is added. (Required)
 Enter a variable that contains the objects or type a command or 
 expression that gets the objects.
 -MemberType <i>PSMemberTypes</i>
 The type of the member to add. (mandatory.) 
 Valid values for this parameter are: &quot;NoteProperty,AliasProperty,ScriptProperty,
 CodeProperty,ScriptMethod,CodeMethod&quot; AliasProperty, CodeMethod, CodeProperty,
 Noteproperty, ScriptMethod, and ScriptProperty. 
 Not all objects have every type of member. If you specify a member type that
 the object does not have, PowerShell returns an error.
 -name <i>string</i>
 The name of the member to be added.
 -value <i>Object</i>
 The initial value of the added member. If you add an AliasProperty, CodeProperty
 ScriptProperty or CodeMethod member, you can supply optional, additional information with '-SecondValue'.
 -SecondValue <i>Object</i>
 Optional additional information about AliasProperty, ScriptProperty, CodeProperty, or CodeMethod members.
 If used when adding an AliasProperty, this parameter must be a data type.
 A conversion (cast) to the specified data type is added to the value of the AliasProperty.
 For example, if you add an AliasProperty that provides an alternate name for a string property,
 you can also specify a SecondValue parameter of System.Int32 to indicate that the value of that string
 property should be converted to an integer when accessed by using the corresponding AliasProperty.
 You can use -SecondValue to specify an additional ScriptBlock when adding a ScriptProperty member.
 In that case, the first ScriptBlock, specified in the Value parameter, is used to get the value of a
 variable. The second ScriptBlock, specified in -SecondValue, is used to set the value of a variable.
 -NotePropertyMembers <i>IDictionary</i>
 A hash table or ordered dictionary of note property names and values. (PowerShell 3.0+)
 Type a hash table or dictionary in which the <i>keys</i> are note property names and the <i>values</i> are note property values.
 -NotePropertyName <i>String</i>
 Add a note property with the specified name. (PowerShell 3.0+)
 Use this parameter with -NotePropertyValue.
 -NotePropertyValue <i>Object</i>
 Add a note property with the specified value. (PowerShell 3.0+)
 Use this parameter with -NotePropertyName.
 -TypeName <i>String</i>
 A name for the type.
 When the type is a class in the System namespace or a type that has a type accelerator, you can enter the
 short name of the type. Otherwise, the full type name is required. (PowerShell 3.0+)
 This parameter is effective only when the input object is a PSObject.
 -force <i>SwitchParameter</i>
 Adds a new member even if one with the same name already exists. Does not
 work for core members of a type.
 -passThru <i>SwitchParameter</i>
 Pass the newly-extended object created by this cmdlet along the pipeline.
 For most objects, Add-Member adds the new members to the input object. However,
 when the input object is a string, Add-Member cannot add the member to the input object.
 For these objects, use the PassThru parameter to create an output object.
 In PowerShell 2.0, Add-Member added members only to the PSObject wrapper of objects, not to the object.
 Use -PassThru to create an output object for any object that has a PSObject wrapper.
","https://ss64.com/ps/add-member.html","System Administration",
"Get-Member","Enumerate the properties of an object."," Get-Member [ [-name] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-View {Extended | Adapted | Base | All}]
 [-memberType <i>memberType</i>] [-Force] [-static] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 The names of one or more properties or methods of the object.
 Get-Member gets only the specified properties and methods.
 If you use -Name parameter with -MemberType, -View, or -Static, Get-Member gets
 only the members that satisfy the criteria of all parameters. 
 To get a static member by name, use: -Static -Name
 -inputObject <i>psobject</i>
 The object(s) to retrieve information about.
 -memberType 
 Get only members with the specified member type. The default is All. 
 valid values: 
 AliasProperty A property that defines a new name for an existing property.
 CodeMethod A method that references a static method of a .NET Framework class.
 CodeProperty A property that references a static property of a .NET Framework class.
 Event Indicates that the object sends a message to indicate an action or a change in state.
 MemberSet A predefined collection of properties and methods, such as PSBase, PSObject, and PSTypeNames.
 Method A method of the underlying .NET Framework object. 
 NoteProperty A property with a static value.
 ParameterizedProperty A property that takes parameters and parameter values. 
 Property A property of the underlying .NET Framework object.
 PropertySet A predefined collection of object properties.
 ScriptMethod A method whose value is the output of a script.
 ScriptProperty A property whose value is the output of a script.
 <u>All</u> Get all member types.
 Methods Get all types of methods of the object
 (for example, Method, CodeMethod, ScriptMethod).
 Properties Get all types of properties of the object
 (for example, Property, CodeProperty, AliasProperty, ScriptProperty).
 Not all objects have every type of member. If you specify a member type that the object does not have, 
 PowerShell returns a null value.
 To get related types of members, such as all extended members, use the View parameter. 
 If -MemberType is combined with -Static or -View, Get-Member will get members that belong to both sets.
 -Static
 Get only the static properties and methods of the object. 
 Static properties and methods are defined on the class of objects, not on any
 particular instance of the class.
 If -Static is used with -View, the -View parameter is ignored.
 If -Static is used with -MemberType, Get-Member gets only the members that belong to both sets.
 -View <i>PSMemberViewTypes</i>
 Get only particular types of members (properties and methods).
 Specify one or more of the values. The default is &quot;Adapted, Extended&quot;.
 Valid values are:
 Base Get only the original properties and methods of the .NET Framework object
 (without extension or adaptation).
 Adapted Get only the properties and methods defined in the PowerShell extended type system.
 Extended Get only the properties and methods that were added in the Types.ps1xml 
 files or by using the Add-Member cmdlet.
 All Get the members in the Base, Adapted, and Extended views.
 The -View parameter determines the members retrieved, not just the display of those members. 
 To get particular member types, such as script properties, use -MemberType.
 If you use -MemberType and -View in the same command, Get-Member gets the members that belong to both sets. 
 If you use -Static and -View in the same command, the -View parameter is ignored.
 -Force
 Add the intrinsic members (PSBase, PSAdapted, PSObject, PSTypeNames)
 and the compiler-generated get_ and set_ methods to the display.
 By default, Get-Member gets these properties in all views other than &quot;Base&quot;
 and &quot;Adapted,&quot; but it does not display them.
","https://ss64.com/ps/get-member.html","Enumeration",
"gm","Enumerate the properties of an object."," Get-Member [ [-name] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-View {Extended | Adapted | Base | All}]
 [-memberType <i>memberType</i>] [-Force] [-static] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 The names of one or more properties or methods of the object.
 Get-Member gets only the specified properties and methods.
 If you use -Name parameter with -MemberType, -View, or -Static, Get-Member gets
 only the members that satisfy the criteria of all parameters. 
 To get a static member by name, use: -Static -Name
 -inputObject <i>psobject</i>
 The object(s) to retrieve information about.
 -memberType 
 Get only members with the specified member type. The default is All. 
 valid values: 
 AliasProperty A property that defines a new name for an existing property.
 CodeMethod A method that references a static method of a .NET Framework class.
 CodeProperty A property that references a static property of a .NET Framework class.
 Event Indicates that the object sends a message to indicate an action or a change in state.
 MemberSet A predefined collection of properties and methods, such as PSBase, PSObject, and PSTypeNames.
 Method A method of the underlying .NET Framework object. 
 NoteProperty A property with a static value.
 ParameterizedProperty A property that takes parameters and parameter values. 
 Property A property of the underlying .NET Framework object.
 PropertySet A predefined collection of object properties.
 ScriptMethod A method whose value is the output of a script.
 ScriptProperty A property whose value is the output of a script.
 <u>All</u> Get all member types.
 Methods Get all types of methods of the object
 (for example, Method, CodeMethod, ScriptMethod).
 Properties Get all types of properties of the object
 (for example, Property, CodeProperty, AliasProperty, ScriptProperty).
 Not all objects have every type of member. If you specify a member type that the object does not have, 
 PowerShell returns a null value.
 To get related types of members, such as all extended members, use the View parameter. 
 If -MemberType is combined with -Static or -View, Get-Member will get members that belong to both sets.
 -Static
 Get only the static properties and methods of the object. 
 Static properties and methods are defined on the class of objects, not on any
 particular instance of the class.
 If -Static is used with -View, the -View parameter is ignored.
 If -Static is used with -MemberType, Get-Member gets only the members that belong to both sets.
 -View <i>PSMemberViewTypes</i>
 Get only particular types of members (properties and methods).
 Specify one or more of the values. The default is &quot;Adapted, Extended&quot;.
 Valid values are:
 Base Get only the original properties and methods of the .NET Framework object
 (without extension or adaptation).
 Adapted Get only the properties and methods defined in the PowerShell extended type system.
 Extended Get only the properties and methods that were added in the Types.ps1xml 
 files or by using the Add-Member cmdlet.
 All Get the members in the Base, Adapted, and Extended views.
 The -View parameter determines the members retrieved, not just the display of those members. 
 To get particular member types, such as script properties, use -MemberType.
 If you use -MemberType and -View in the same command, Get-Member gets the members that belong to both sets. 
 If you use -Static and -View in the same command, the -View parameter is ignored.
 -Force
 Add the intrinsic members (PSBase, PSAdapted, PSObject, PSTypeNames)
 and the compiler-generated get_ and set_ methods to the display.
 By default, Get-Member gets these properties in all views other than &quot;Base&quot;
 and &quot;Adapted,&quot; but it does not display them.
","https://ss64.com/ps/get-member.html","Enumeration",
"MessageBox","Display a message box to the user"," <a href=""add-type.html"">Add-Type</a> -AssemblyName PresentationCore,PresentationFramework
 $Result = [System.Windows.MessageBox]<b>::Show(</b><i>MessageBody</i>,<i>Title</i>,<i>ButtonType</i>,<i>Image</i><b>)</b>
 
"," <i>MessageBody</i> 
 A string containing the message text.
 <i>Title</i>
 A string containing the title bar text for the message box.
 <i>ButtonType</i>
 An integer containing the type of button to display:
 <i>Image</i>
 An integer representing the icon to display (if any).
","https://ss64.com/ps/messagebox.html","System Utility",
"Find-Module","Find modules from an online gallery.","Not Available","Not Available","Not Available","System Utility",
"Get-Module","Get the modules imported to the session."," Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-All] [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-All] [-Refresh] -ListAvailable [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-Name] <i>String</i>[]] [-CimNamespace <String>] [-CimResourceUri <i>Uri</i>]
 [-ListAvailable] [-Refresh] -CimSession <CimSession> [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-ListAvailable] [-Refresh] -PSSession [<a href=""common.html""><i>CommonParameters</i></a>]
"," -All
 Gets all modules in each module folder, including nested modules, manifest (.psd1) files, script module 
 (.psm1) files, and binary module (.dll) files. Without the All parameter, Get-Module gets only the default 
 module in each module folder.
 -CimNamespace <i>String</i>
 Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the 
 namespace of the Module Discovery WMI provider.
 Use this parameter to get CIM modules from computers and devices that are not running a Windows operating 
 system. (PowerShell 3.0+)
 -CimResourceUri <i>Uri</i>
 Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery 
 WMI provider on the remote computer.
 Use this parameter to get CIM modules from computers and devices that are not running a Windows operating 
 system. (PowerShell 3.0+)
 -ListAvailable
 Gets all installed modules. Get-Module gets modules in paths listed in the PSModulePath environment variable. 
 Without this parameter, Get-Module gets only the modules that are both listed in the PSModulePath environment 
 variable, and that are loaded in the current session. ListAvailable does not return information about modules 
 that are not found in the PSModulePath environment variable, even if those modules are loaded in the current 
 session.
 -FullyQualifiedName <i>String</i>[]
 Gets modules with names that are specified in the form of ModuleSpecification objects (described by the 
 Remarks section of ModuleSpecification Constructor (Hashtable) on MSDN).
 For example, the FullyQualifiedName parameter accepts a module name that is specified in the format
 @{ModuleName = <i>modulename</i>; ModuleVersion = <i>version_number</i>}
 or @{ModuleName = <i>modulename</i>; ModuleVersion = <i>version_number</i>; Guid = <i>GUID</i>}.
 ModuleName and ModuleVersion are required, but Guid is optional.
 You cannot specify the -FullyQualifiedName parameter in the same command as a Name parameter; the two 
 parameters are mutually exclusive.
 -Name <i>String</i>[]
 Gets only modules with the specified names or name patterns. Wildcards are permitted. You can also pipe the 
 names to Get-Module. You cannot specify the FullyQualifiedName parameter in the same command as a Name 
 parameter; the two parameters are mutually exclusive. The Name parameter cannot accept a module GUID as a 
 value; to return modules by specifying a GUID, use the FullyQualifiedName parameter instead of the Name 
 parameter.
 -CimSession <i>CimSession</i>
 Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command 
 that gets the CIM session, such as a New-PSSession command.
 When the session is connected to a remote computer, the ListAvailable parameter is required.
 A Get-Module command with the PSSession parameter is equivalent to using the Invoke-Command cmdlet to run a 
 Get-Module -ListAvailable command in a PSSession. (PowerShell 3.0+)
 -Refresh
 Refreshes the cache of installed commands. The command cache is created when the session starts. It enables 
 the Get-Command cmdlet to get commands from modules that are not imported into the session.
 This parameter is designed for development and testing scenarios in which the contents of modules have changed 
 since the session started.
 When the Refresh parameter is used in a command, the ListAvailable parameter is required. (PowerShell 3.0+)
","https://ss64.com/ps/get-module.html","System Utility",
"gmo   ","Get the modules imported to the session."," Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-All] [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-All] [-Refresh] -ListAvailable [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-Name] <i>String</i>[]] [-CimNamespace <String>] [-CimResourceUri <i>Uri</i>]
 [-ListAvailable] [-Refresh] -CimSession <CimSession> [<a href=""common.html""><i>CommonParameters</i></a>]
 
 Get-Module [[-FullyQualifiedName] <i>String</i>[]] [[-Name] <i>String</i>[]]
 [-ListAvailable] [-Refresh] -PSSession [<a href=""common.html""><i>CommonParameters</i></a>]
"," -All
 Gets all modules in each module folder, including nested modules, manifest (.psd1) files, script module 
 (.psm1) files, and binary module (.dll) files. Without the All parameter, Get-Module gets only the default 
 module in each module folder.
 -CimNamespace <i>String</i>
 Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the 
 namespace of the Module Discovery WMI provider.
 Use this parameter to get CIM modules from computers and devices that are not running a Windows operating 
 system. (PowerShell 3.0+)
 -CimResourceUri <i>Uri</i>
 Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery 
 WMI provider on the remote computer.
 Use this parameter to get CIM modules from computers and devices that are not running a Windows operating 
 system. (PowerShell 3.0+)
 -ListAvailable
 Gets all installed modules. Get-Module gets modules in paths listed in the PSModulePath environment variable. 
 Without this parameter, Get-Module gets only the modules that are both listed in the PSModulePath environment 
 variable, and that are loaded in the current session. ListAvailable does not return information about modules 
 that are not found in the PSModulePath environment variable, even if those modules are loaded in the current 
 session.
 -FullyQualifiedName <i>String</i>[]
 Gets modules with names that are specified in the form of ModuleSpecification objects (described by the 
 Remarks section of ModuleSpecification Constructor (Hashtable) on MSDN).
 For example, the FullyQualifiedName parameter accepts a module name that is specified in the format
 @{ModuleName = <i>modulename</i>; ModuleVersion = <i>version_number</i>}
 or @{ModuleName = <i>modulename</i>; ModuleVersion = <i>version_number</i>; Guid = <i>GUID</i>}.
 ModuleName and ModuleVersion are required, but Guid is optional.
 You cannot specify the -FullyQualifiedName parameter in the same command as a Name parameter; the two 
 parameters are mutually exclusive.
 -Name <i>String</i>[]
 Gets only modules with the specified names or name patterns. Wildcards are permitted. You can also pipe the 
 names to Get-Module. You cannot specify the FullyQualifiedName parameter in the same command as a Name 
 parameter; the two parameters are mutually exclusive. The Name parameter cannot accept a module GUID as a 
 value; to return modules by specifying a GUID, use the FullyQualifiedName parameter instead of the Name 
 parameter.
 -CimSession <i>CimSession</i>
 Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command 
 that gets the CIM session, such as a New-PSSession command.
 When the session is connected to a remote computer, the ListAvailable parameter is required.
 A Get-Module command with the PSSession parameter is equivalent to using the Invoke-Command cmdlet to run a 
 Get-Module -ListAvailable command in a PSSession. (PowerShell 3.0+)
 -Refresh
 Refreshes the cache of installed commands. The command cache is created when the session starts. It enables 
 the Get-Command cmdlet to get commands from modules that are not imported into the session.
 This parameter is designed for development and testing scenarios in which the contents of modules have changed 
 since the session started.
 When the Refresh parameter is used in a command, the ListAvailable parameter is required. (PowerShell 3.0+)
","https://ss64.com/ps/get-module.html","System Utility",
"Import-Module","Add a module to the session."," Import-Module [<b>-Name</b>] <i>String</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-MinimumVersion] [-NoClobber] [-PassThru]
 [-Prefix <i>String</i>] [-RequiredVersion <Version>] [-Scope <i>String</i>]
 [-Variable <i>String</i>[]] [<b>-PSSession</b> <i>PSSession</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [-Name] <i>String</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [<b>-CimNamespace</b> <i>String</i>] [-CimResourceUri <i>Uri</i>]
 [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force] [-Function <i>String</i>[]] 
 [-Global] [-MinimumVersion <Version>] [-NoClobber] [-PassThru]
 [-Prefix <i>String</i>] [-RequiredVersion ] [-Scope <i>String</i>]
 [-Variable <i>String</i>[]] <b>-CimSession</b> <i>CimSession</i> [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [<b>-Assembly</b>] <i>Assembly</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-NoClobber] [-PassThru] [-Prefix <i>String</i>]
 [-Scope <i>String</i>] [-Variable <i>String</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [<b>-ModuleInfo</b>] <i>PSModuleInfo</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-NoClobber] [-PassThru] 
 [-Prefix <i>String</i>] [-Scope <i>String</i>] [-Variable <i>String</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Alias <i>String</i>[]
 Import only the specified aliases from the module into the current session.
 Enter a comma-separated list of aliases. Wildcards permitted.
 
 Some modules automatically export selected aliases into your session when you
 import the module. This parameter lets you select from among the exported aliases.
 -ArgumentList <i>Object</i>[]
 Specifies arguments (parameter values) that are passed to a script module during
 the Import-Module command. Valid only when importing a script module.
 Refer to -ArgumentList by its alias, args. For more see about_Aliases.
 -AsCustomObject
 Returns a custom object with members that represent the imported module members.
 Valid only for script modules.
 When you use -AsCustomObject, Import-Module will import the module members into the
 session and then return a PSCustomObject object instead of a PSModuleInfo object.
 Save the custom object in a variable and use dot notation to invoke the members.
 -Assembly <i>Assembly</i>[]
 Import the cmdlets and providers implemented in the specified assembly objects.
 Enter a variable that contains assembly objects or a command that creates assembly objects.
 You can also pipe an assembly object to Import-Module.
 When you use this parameter, only the cmdlets and providers implemented by the
 specified assemblies are imported. If the module contains other files, they are not imported,
 and you might be missing important members of the module.
 Use this parameter for debugging and testing the module, or when instructed by the module author.
 -CimNamespace <i>String</i>
 The namespace of an alternate CIM provider that exposes CIM modules.
 The default value is the namespace of the Module Discovery WMI provider.
 Use this parameter to import CIM modules from computers and devices that are not
 running a Windows OS. (PowerShell 3.0+) 
 -CimResourceUri <i>Uri</i>
 An alternate location for CIM modules. The default value is the resource URI of 
 the Module Discovery WMI provider on the remote computer.
 Use this parameter to import CIM modules from computers and devices that are not
 running a Windows OS. (PowerShell 3.0+)
 
 -Cmdlet <i>String</i>[]
 Import only the specified cmdlets from the module into the current session.
 Enter a list of cmdlets. Wildcards are permitted.
 Some modules automatically export selected cmdlets into your session when you import
 the module. This parameter lets you select from among the exported cmdlets.
 -DisableNameChecking
 Suppress the message that warns you when you import a cmdlet or function whose
 name includes an unapproved verb or a prohibited character.
 
 By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their 
 names, the PowerShell displays the following warning message:
 Some imported command names include unapproved verbs which might make them less discoverable...
 
 This message is only a warning. The complete module is still imported, including the non-conforming commands. 
 Although the message is displayed to module users, the naming problem should be fixed by the module author.
 
 -Force
 Re-import a module and its members, even if the module or its members have an access mode of read-only.
 
 -Function <i>String</i>[]
 Import only the specified functions from the module into the current session.
 Enter a list of functions. Wildcards are permitted.
 Some modules automatically export selected functions into your session when you import
 the module. This parameter lets you select from among the exported functions.
 
 -Global
 Import modules into the global session state so they are available to all commands in
 the session. By default, the commands in a module, including commands from nested modules,
 are imported into the caller's session state. To restrict the commands that a module exports,
 use an Export-ModuleMember command in the script module.
 
 The -Global parameter is equivalent to -Scope with a value of Global.
 
 -ModuleInfo <i>PSModuleInfo</i>[]
 Specify module objects to import. Enter a variable that contains the module objects, or
 a command that gets the module objects, such as a Get-Module -ListAvailable command.
 You can also pipe module objects to Import-Module.
 
 -Name <i>String</i>[]
 The names of the modules to import.
 Enter the name of the module or the name of a file in the module, such as a .psd1, .psm1,
 .dll, or ps1 file. File paths are optional. Wildcards are not permitted.
 You can also pipe module names and file names to Import-Module.
 
 If you omit a path, Import-Module looks for the module in the paths saved in the PSModulePath
 environment variable ($env:PSModulePath).
 
 Specify only the module name whenever possible. When you specify a file name, only the
 members that are implemented in that file are imported. If the module contains other files,
 they are not imported, and you may be missing important members of the module.
 
 -NoClobber
 Do not import commands that have the same names as existing commands in the current session.
 By default, Import-Module imports all exported module commands.
 
 Commands with the same names can hide or replace commands in the session.
 To avoid command name conflicts in a session, use the -Prefix or -NoClobber parameters.
 For more information see Modules and Name Conflicts in about_Modules and about_Command_Precedence.
 (PowerShell 3.0+)
 -PassThru
 Return objects that represent the modules that were imported.
 By default, this cmdlet does not generate any output.
 
 -Prefix <i>String</i>
 Add the specified prefix to the nouns in the names of imported module members.
 Use this parameter to avoid name conflicts that might occur when different members in
 the session have the same name. This parameter does not change the module, and it does
 not affect files that the module imports for its own use (known as nested modules).
 It affects only the names of members in the current session.
 For example, if you specify the prefix UTC and then import a Get-Date cmdlet, the
 cmdlet is known in the session as Get-UTCDate, and it is not confused with the original Get-Date cmdlet.
 The value of this parameter takes precedence over the DefaultCommandPrefix property
 of the module, which specifies the default prefix.
 -Variable <i>String</i>[]
 Import only the specified variables from the module into the current session.
 Enter a list of variables. Wildcards are permitted.
 Some modules automatically export selected variables into your session when you import
 the module. This parameter lets you select from among the exported variables.
 -CimSession <i>CimSession</i>
 Specifies a CIM session on the remote computer.
 Enter a variable that contains the CIM session or a command that gets the CIM session,
 such as a Get-CimSession command.
 When you import a module from a different session into the current session, you can use the cmdlets from 
 the module in the current session, just as you would use cmdlets from a local module.
 Commands that use the remote cmdlets actually run in the remote session, but the remoting details are
 managed in the background by PowerShell.
 This parameter uses the Implicit Remoting feature of PowerShell. It is equivalent to using the 
 Import-PSSession cmdlet to import particular modules from a session.
 Import-Module cannot import PowerShell Core modules from another session.
 The PowerShell Core modules have names that begin with Microsoft.PowerShell. (PowerShell 3.0+)
 
 -RequiredVersion <i>Version</i>
 Import only the specified version of the module.
 If the version is not installed, Import-Module generates an error.
 
 By default, Import-Module imports the module without checking the version number.
 
 To specify a minimum version, use the MinimumVersion parameter. You can also use the Module and Version 
 parameters of the #Requires keyword to require a specific version of a module in a script.
 (PowerShell 3.0+)
 
 Scripts that use the -RequiredVersion parameter to import modules that are included with existing
 releases of the Windows Operating System do not automatically run in future releases of the
 Windows OS. This is because PowerShell module version numbers in future releases of the Windows OS 
 are higher than module version numbers in existing releases of the Windows OS.
 
 -Scope <i>String</i>
 Import the module only into the specified scope.
 Valid values are:
 -- Global: Available to all commands in the session. Equivalent to the Global parameter.
 -- Local: Available only in the current scope.
 By default, the module is imported into the current scope, which could be a script or module.
 (PowerShell 3.0+)
","https://ss64.com/ps/import-module.html","System Utility",
"ipmo","Add a module to the session."," Import-Module [<b>-Name</b>] <i>String</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-MinimumVersion] [-NoClobber] [-PassThru]
 [-Prefix <i>String</i>] [-RequiredVersion <Version>] [-Scope <i>String</i>]
 [-Variable <i>String</i>[]] [<b>-PSSession</b> <i>PSSession</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [-Name] <i>String</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [<b>-CimNamespace</b> <i>String</i>] [-CimResourceUri <i>Uri</i>]
 [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force] [-Function <i>String</i>[]] 
 [-Global] [-MinimumVersion <Version>] [-NoClobber] [-PassThru]
 [-Prefix <i>String</i>] [-RequiredVersion ] [-Scope <i>String</i>]
 [-Variable <i>String</i>[]] <b>-CimSession</b> <i>CimSession</i> [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [<b>-Assembly</b>] <i>Assembly</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-NoClobber] [-PassThru] [-Prefix <i>String</i>]
 [-Scope <i>String</i>] [-Variable <i>String</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
 Import-Module [<b>-ModuleInfo</b>] <i>PSModuleInfo</i>[] [-Alias <i>String</i>[]] [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-DisableNameChecking] [-Force]
 [-Function <i>String</i>[]] [-Global] [-NoClobber] [-PassThru] 
 [-Prefix <i>String</i>] [-Scope <i>String</i>] [-Variable <i>String</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Alias <i>String</i>[]
 Import only the specified aliases from the module into the current session.
 Enter a comma-separated list of aliases. Wildcards permitted.
 
 Some modules automatically export selected aliases into your session when you
 import the module. This parameter lets you select from among the exported aliases.
 -ArgumentList <i>Object</i>[]
 Specifies arguments (parameter values) that are passed to a script module during
 the Import-Module command. Valid only when importing a script module.
 Refer to -ArgumentList by its alias, args. For more see about_Aliases.
 -AsCustomObject
 Returns a custom object with members that represent the imported module members.
 Valid only for script modules.
 When you use -AsCustomObject, Import-Module will import the module members into the
 session and then return a PSCustomObject object instead of a PSModuleInfo object.
 Save the custom object in a variable and use dot notation to invoke the members.
 -Assembly <i>Assembly</i>[]
 Import the cmdlets and providers implemented in the specified assembly objects.
 Enter a variable that contains assembly objects or a command that creates assembly objects.
 You can also pipe an assembly object to Import-Module.
 When you use this parameter, only the cmdlets and providers implemented by the
 specified assemblies are imported. If the module contains other files, they are not imported,
 and you might be missing important members of the module.
 Use this parameter for debugging and testing the module, or when instructed by the module author.
 -CimNamespace <i>String</i>
 The namespace of an alternate CIM provider that exposes CIM modules.
 The default value is the namespace of the Module Discovery WMI provider.
 Use this parameter to import CIM modules from computers and devices that are not
 running a Windows OS. (PowerShell 3.0+) 
 -CimResourceUri <i>Uri</i>
 An alternate location for CIM modules. The default value is the resource URI of 
 the Module Discovery WMI provider on the remote computer.
 Use this parameter to import CIM modules from computers and devices that are not
 running a Windows OS. (PowerShell 3.0+)
 
 -Cmdlet <i>String</i>[]
 Import only the specified cmdlets from the module into the current session.
 Enter a list of cmdlets. Wildcards are permitted.
 Some modules automatically export selected cmdlets into your session when you import
 the module. This parameter lets you select from among the exported cmdlets.
 -DisableNameChecking
 Suppress the message that warns you when you import a cmdlet or function whose
 name includes an unapproved verb or a prohibited character.
 
 By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their 
 names, the PowerShell displays the following warning message:
 Some imported command names include unapproved verbs which might make them less discoverable...
 
 This message is only a warning. The complete module is still imported, including the non-conforming commands. 
 Although the message is displayed to module users, the naming problem should be fixed by the module author.
 
 -Force
 Re-import a module and its members, even if the module or its members have an access mode of read-only.
 
 -Function <i>String</i>[]
 Import only the specified functions from the module into the current session.
 Enter a list of functions. Wildcards are permitted.
 Some modules automatically export selected functions into your session when you import
 the module. This parameter lets you select from among the exported functions.
 
 -Global
 Import modules into the global session state so they are available to all commands in
 the session. By default, the commands in a module, including commands from nested modules,
 are imported into the caller's session state. To restrict the commands that a module exports,
 use an Export-ModuleMember command in the script module.
 
 The -Global parameter is equivalent to -Scope with a value of Global.
 
 -ModuleInfo <i>PSModuleInfo</i>[]
 Specify module objects to import. Enter a variable that contains the module objects, or
 a command that gets the module objects, such as a Get-Module -ListAvailable command.
 You can also pipe module objects to Import-Module.
 
 -Name <i>String</i>[]
 The names of the modules to import.
 Enter the name of the module or the name of a file in the module, such as a .psd1, .psm1,
 .dll, or ps1 file. File paths are optional. Wildcards are not permitted.
 You can also pipe module names and file names to Import-Module.
 
 If you omit a path, Import-Module looks for the module in the paths saved in the PSModulePath
 environment variable ($env:PSModulePath).
 
 Specify only the module name whenever possible. When you specify a file name, only the
 members that are implemented in that file are imported. If the module contains other files,
 they are not imported, and you may be missing important members of the module.
 
 -NoClobber
 Do not import commands that have the same names as existing commands in the current session.
 By default, Import-Module imports all exported module commands.
 
 Commands with the same names can hide or replace commands in the session.
 To avoid command name conflicts in a session, use the -Prefix or -NoClobber parameters.
 For more information see Modules and Name Conflicts in about_Modules and about_Command_Precedence.
 (PowerShell 3.0+)
 -PassThru
 Return objects that represent the modules that were imported.
 By default, this cmdlet does not generate any output.
 
 -Prefix <i>String</i>
 Add the specified prefix to the nouns in the names of imported module members.
 Use this parameter to avoid name conflicts that might occur when different members in
 the session have the same name. This parameter does not change the module, and it does
 not affect files that the module imports for its own use (known as nested modules).
 It affects only the names of members in the current session.
 For example, if you specify the prefix UTC and then import a Get-Date cmdlet, the
 cmdlet is known in the session as Get-UTCDate, and it is not confused with the original Get-Date cmdlet.
 The value of this parameter takes precedence over the DefaultCommandPrefix property
 of the module, which specifies the default prefix.
 -Variable <i>String</i>[]
 Import only the specified variables from the module into the current session.
 Enter a list of variables. Wildcards are permitted.
 Some modules automatically export selected variables into your session when you import
 the module. This parameter lets you select from among the exported variables.
 -CimSession <i>CimSession</i>
 Specifies a CIM session on the remote computer.
 Enter a variable that contains the CIM session or a command that gets the CIM session,
 such as a Get-CimSession command.
 When you import a module from a different session into the current session, you can use the cmdlets from 
 the module in the current session, just as you would use cmdlets from a local module.
 Commands that use the remote cmdlets actually run in the remote session, but the remoting details are
 managed in the background by PowerShell.
 This parameter uses the Implicit Remoting feature of PowerShell. It is equivalent to using the 
 Import-PSSession cmdlet to import particular modules from a session.
 Import-Module cannot import PowerShell Core modules from another session.
 The PowerShell Core modules have names that begin with Microsoft.PowerShell. (PowerShell 3.0+)
 
 -RequiredVersion <i>Version</i>
 Import only the specified version of the module.
 If the version is not installed, Import-Module generates an error.
 
 By default, Import-Module imports the module without checking the version number.
 
 To specify a minimum version, use the MinimumVersion parameter. You can also use the Module and Version 
 parameters of the #Requires keyword to require a specific version of a module in a script.
 (PowerShell 3.0+)
 
 Scripts that use the -RequiredVersion parameter to import modules that are included with existing
 releases of the Windows Operating System do not automatically run in future releases of the
 Windows OS. This is because PowerShell module version numbers in future releases of the Windows OS 
 are higher than module version numbers in existing releases of the Windows OS.
 
 -Scope <i>String</i>
 Import the module only into the specified scope.
 Valid values are:
 -- Global: Available to all commands in the session. Equivalent to the Global parameter.
 -- Local: Available only in the current scope.
 By default, the module is imported into the current scope, which could be a script or module.
 (PowerShell 3.0+)
","https://ss64.com/ps/import-module.html","System Utility",
"Install-Module","Download and install modules from an online repository."," Install-Module [<b>-InputObject</b>] <i>PSObject</i>[] [-AllowClobber] [-Credential <i>PSCredential</i>] [-Force]
 [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>]
 [-Scope {CurrentUser | AllUsers}] [-SkipPublisherCheck] [-AcceptLicense]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Install-Module [<b>-Name</b>] <b><i>String</i></b>[] [-AllowClobber] [-Credential <i>PSCredential</i>] [-Force]
 [-MaximumVersion <i>Version</i>] [-MinimumVersion <i>Version</i>] [-RequiredVersion <i>Version</i>] [-Repository <b><i>String</i></b>[]]
 [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>] [-Scope {CurrentUser | AllUsers}] [-SkipPublisherCheck]
 [-AllowPrerelease] [-AcceptLicense] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AcceptLicense
 For modules that require a license, AcceptLicense automatically accepts the license agreement during installation. 
 This requires a license.txt in the root directory of the module.
 -AllowClobber
 Override warning messages about installation conflicts about existing commands on a computer.
 Overwrites existing commands that have the same name as commands being installed by a module.
 AllowClobber and Force can be used together in an Install-Module command.
 -AllowPrerelease
 Allows the installation of a module marked as a pre-release.
 -Confirm
 Prompt for confirmation before installing.
 -Credential
 Specifies a user account that has rights to install a module for a specified package provider or source.
 -Force
 Install a module and override warning messages about module installation conflicts.
 If a module with the same name already exists on the computer, Force allows for multiple versions to be
 installed. If there is an existing module with the same name and version, Force overwrites that version.
 Force and AllowClobber can be used together in an Install-Module command.
 -InputObject
 Used for pipeline input.
 -MaximumVersion
 Specify the maximum version of a single module to install.
 The version installed must be less than or equal to MaximumVersion.
 If you want to install multiple modules, you cannot use MaximumVersion.
 MaximumVersion and RequiredVersion cannot be used in the same Install-Module command.
 -MinimumVersion
 Specify the minimum version of a single module to install.
 The version installed must be greater than or equal to MinimumVersion.
 If there is a newer version of the module available, the newer version is installed.
 If you want to install multiple modules, you cannot use MinimumVersion.
 MinimumVersion and RequiredVersion cannot be used in the same Install-Module command.
 -Name
 Specify the exact names of modules to install from the online gallery.
 A comma-separated list of module names is accepted.
 The module name must match the module name in the repository. Use Find-Module to get a list of module names.
 -PassThru
 Pass any output through the pipeline.
 -Proxy
 Specifies a proxy server for the request, rather than connecting directly to the Internet resource.
 -ProxyCredential
 Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter.
 -Repository
 Specify which repository is used to download and install a module.
 Used when multiple repositories are registered.
 Specifies the name of a registered repository in the Install-Module command.
 To register a repository, use Register-PSRepository. To display registered repositories, use Get-PSRepository.
 -RequiredVersion
 Specifies the exact version of a single module to install.
 If there is no match in the repository for the specified version, an error is displayed.
 If you want to install multiple modules, you cannot use RequiredVersion.
 RequiredVersion cannot be used in the same Install-Module command as MinimumVersion or MaximumVersion.
 -Scope
 Specify the installation scope of the module.
 Accepted values: AllUsers, <u>CurrentUser</u>.
 AllUsers scope: $env:ProgramFiles\PowerShell\Modules
 CurrentUser scope: $home\Documents\PowerShell\Modules
 -SkipPublisherCheck
 Allows you to install a newer version of a module that already exists on your computer.
 For example, when an existing module is digitally signed by a trusted publisher but the new version is
 not digitally signed by a trusted publisher.
 -WhatIf
 Describe what would happen if you executed the command, without actually
 executing the command.
","https://ss64.com/ps/install-module.html","System Utility",
"New-Module","Create a new dynamic module (only in memory)."," New-Module [-ScriptBlock] <i>ScriptBlock</i> [-ArgumentList <i>Object</i>[]] [-AsCustomObject]
 [-Cmdlet <i>String</i>[]] [-Function <i>String</i>[]] [-ReturnResult] [<a href=""common.html""><i>CommonParameters</i></a>]
 New-Module [-Name] <i>String</i> [-ScriptBlock] <i>ScriptBlock</i> [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-Function <i>String</i>[]] [-ReturnResult] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -ArgumentList <i>Object</i>[]
 Specifies arguments (parameter values) that are passed to the script block.
 -AsCustomObject
 Returns a custom object that represents the dynamic module. The module members are implemented as script 
 methods of the custom object, but they are not imported into the session. You can save the custom object in a 
 variable and use dot notation to invoke the members.
 If the module has multiple members with the same name, such as a function and a variable that are both named 
 A, only one member with each name is accessible from the custom object.
 -Cmdlet <i>String</i>[]
 Exports only the specified cmdlets from the module into the current session. Enter a comma-separated list of 
 cmdlets. Wildcard characters are permitted. By default, all cmdlets in the module are exported.
 You cannot define cmdlets in a script block, but a dynamic module can include cmdlets if it imports the 
 cmdlets from a binary module.
 -Function <i>String</i>[]
 Exports only the specified functions from the module into the current session. Enter a comma-separated list of 
 functions. Wildcard characters are permitted. By default, all functions defined in a module are exported.
 
 -Name <i>String</i>
 Specifies a name for the new module. You can also pipe a module name to New-Module.
 The default value is an autogenerated name that begins with __DynamicModule_ and is followed by a GUID that 
 specifies the path to the dynamic module.
 -ReturnResult
 Runs the script block and returns the script block results instead of returning a module object.
 -ScriptBlock <i>ScriptBlock</i>
 Specifies the contents of the dynamic module. Enclose the contents in braces ( { } ) to create a script block. 
 This parameter is required.
","https://ss64.com/ps/new-module.html","System Utility",
"nmo","Create a new dynamic module (only in memory)."," New-Module [-ScriptBlock] <i>ScriptBlock</i> [-ArgumentList <i>Object</i>[]] [-AsCustomObject]
 [-Cmdlet <i>String</i>[]] [-Function <i>String</i>[]] [-ReturnResult] [<a href=""common.html""><i>CommonParameters</i></a>]
 New-Module [-Name] <i>String</i> [-ScriptBlock] <i>ScriptBlock</i> [-ArgumentList <i>Object</i>[]]
 [-AsCustomObject] [-Cmdlet <i>String</i>[]] [-Function <i>String</i>[]] [-ReturnResult] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -ArgumentList <i>Object</i>[]
 Specifies arguments (parameter values) that are passed to the script block.
 -AsCustomObject
 Returns a custom object that represents the dynamic module. The module members are implemented as script 
 methods of the custom object, but they are not imported into the session. You can save the custom object in a 
 variable and use dot notation to invoke the members.
 If the module has multiple members with the same name, such as a function and a variable that are both named 
 A, only one member with each name is accessible from the custom object.
 -Cmdlet <i>String</i>[]
 Exports only the specified cmdlets from the module into the current session. Enter a comma-separated list of 
 cmdlets. Wildcard characters are permitted. By default, all cmdlets in the module are exported.
 You cannot define cmdlets in a script block, but a dynamic module can include cmdlets if it imports the 
 cmdlets from a binary module.
 -Function <i>String</i>[]
 Exports only the specified functions from the module into the current session. Enter a comma-separated list of 
 functions. Wildcard characters are permitted. By default, all functions defined in a module are exported.
 
 -Name <i>String</i>
 Specifies a name for the new module. You can also pipe a module name to New-Module.
 The default value is an autogenerated name that begins with __DynamicModule_ and is followed by a GUID that 
 specifies the path to the dynamic module.
 -ReturnResult
 Runs the script block and returns the script block results instead of returning a module object.
 -ScriptBlock <i>ScriptBlock</i>
 Specifies the contents of the dynamic module. Enclose the contents in braces ( { } ) to create a script block. 
 This parameter is required.
","https://ss64.com/ps/new-module.html","System Utility",
"Remove-Module","Remove a module from the current session."," Remove-Module [-ModuleInfo] <i>PSModuleInfo</i>[] [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Remove-Module [-Name] <i>String</i>[] [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Force 
 Remove read-only modules. By default, Remove-Module removes only read-write modules.
 The ReadOnly and ReadWrite values are stored in AccessMode property of a module.
 -ModuleInfo <i>PSModuleInfo</i>[]
 Specifies the module objects to remove.
 Enter a variable that contains a module object (PSModuleInfo) or a command
 that gets a module object, such as a Get-Module command. You can also pipe
 module objects to Remove-Module.
 -Name <i>String</i>[]
 Specifies the names of modules to remove. Wildcards are permitted.
 You can also pipe name strings to Remove-Module.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/remove-module.html","System Utility",
"rmo","Remove a module from the current session."," Remove-Module [-ModuleInfo] <i>PSModuleInfo</i>[] [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
 Remove-Module [-Name] <i>String</i>[] [-Force]
 [-Confirm] [-WhatIf] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Force 
 Remove read-only modules. By default, Remove-Module removes only read-write modules.
 The ReadOnly and ReadWrite values are stored in AccessMode property of a module.
 -ModuleInfo <i>PSModuleInfo</i>[]
 Specifies the module objects to remove.
 Enter a variable that contains a module object (PSModuleInfo) or a command
 that gets a module object, such as a Get-Module command. You can also pipe
 module objects to Remove-Module.
 -Name <i>String</i>[]
 Specifies the names of modules to remove. Wildcards are permitted.
 You can also pipe name strings to Remove-Module.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/remove-module.html","System Utility",
"Save-Module","Save a module locally without installing it.","Not Available","Not Available","Not Available","System Utility",
"Get-InstalledModule","Get installed modules on a computer.","Not Available","Not Available","Not Available","System Utility, Enumeration",
"Uninstall-Module","Uninstall a module.","Not Available","Not Available","Not Available","System Utility",
"Update-Module","Download/install a new module version."," Update-Module [[-Name] <i>String</i>[]] [-RequiredVersion <i>String</i>] [-MaximumVersion <i>String</i>]
 [-Credential <i>PSCredential</i>] [-Scope <i>String</i>] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>]
 [-Force] [-AllowPrerelease] [-AcceptLicense] [-PassThru]
 [-WhatIf] [-Confirm] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -AcceptLicense
 Automatically accept the license agreement during installation if the package requires it.
 -AllowPrerelease
 Allows you to update a module with the newer module marked as a prerelease.
 -Confirm
 Prompt for confirmation before running Update-Module. 
 -Credential
 A user account that has permission to update a module.
 -Force
 Force an update of each specified module without a prompt to request confirmation.
 If the module is already installed, Force reinstalls the module.
 -DisableNameChecking
 Suppress the message that warns you when you import a cmdlet or function whose
 name includes an unapproved verb or a prohibited character.
 
 By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their 
 names, the PowerShell displays the following warning message:
 Some imported command names include unapproved verbs which might make them less discoverable...
 
 This message is only a warning. The complete module is still imported, including the non-conforming commands. 
 Although the message is displayed to module users, the naming problem should be fixed by the module author.
 
 -Force
 Re-import a module and its members, even if the module or its members have an access mode of read-only.
 
 -MaximumVersion <i>Version</i>
 Specifies the maximum version of a single module to update.
 You can't add this parameter if you're attempting to update multiple modules.
 The MaximumVersion and the RequiredVersion parameters can't be used in the same command.
 
 -Name <i>String</i>[]
 The name of one or more modules to update. 
 Update-Module searches $env:PSModulePath for the modules to update.
 If no matches are found in $env:PSModulePath for the specified module name, an error occurs.
 Wildcards are accepted in module names.
 If you add wildcard characters to the specified name and no matches are found, no error occurs.
 -PassThru
 Returns an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 
 -Proxy
 Specifies a proxy server for the request, rather than connecting directly to an internet resource.
 -ProxyCredential
 Specifies a user account that has permission to use the proxy server specified by the Proxy parameter.
 
 -RequiredVersion <i>Version</i>
 Specifies the exact version to which the existing installed module will be updated.
 The version specified by RequiredVersion must exist in the online gallery or an error is displayed.
 If more than one module is updated in a single command, you can't use RequiredVersion.
 
 -Scope <i>String</i>
 Specifies the installation scope of the module.
 The acceptable values for this parameter are AllUsers and CurrentUser.
 If Scope isn't specified, the update is installed in the CurrentUser scope.
 The AllUsers scope requires elevated permissions and installs modules in a location that is accessible to
 all users of the computer: 
 $env:ProgramFiles\PowerShell\Modules
 The CurrentUser doesn't require elevated permissions and installs modules in a location that is accessible
 only to the current user of the computer:
 $home\Documents\PowerShell\Modules
 When no Scope is defined, the default is set based on the PowerShellGet version.
 In PowerShellGet versions 2.0.0 and above, the default is CurrentUser, which does not require elevation
 for install. In PowerShellGet 1.x versions, the default is AllUsers, which requires elevation for install.
 -WhatIf
 Show what would happen if the cmdlet were run. The cmdlet isn't run.
","https://ss64.com/ps/update-module.html","System Utility",
"Export-ModuleMember","Export specific module members."," Export-ModuleMember [[-Function] <i>String</i>[]] [-Alias <i>String</i>[]] [-Cmdlet <i>String</i>[]]
 [-Variable <i>String</i>[]] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Alias <i>String</i>[]
 The aliases that are to be exported from the script module file.
 Enter the alias names. Wildcards are permitted.
 
 -Cmdlet <i>String</i>[]
 The cmdlets that are to be exported from the script module file.
 Enter the cmdlet names. Wildcards are permitted.
 
 You cannot create cmdlets in a script module file, but you can import cmdlets from a binary module into a 
 script module and re-export them from the script module.
 
 -Function <i>String</i>[]
 The functions that are to be exported from the script module file.
 Enter the function names. Wildcards are permitted.
 You can also pipe function name strings to Export-ModuleMember.
 
 -Variable <i>String</i>[]
 Specifies the variables that are exported from the script module file. Enter the variable names (without a 
 dollar sign). Wildcards are permitted.
","https://ss64.com/ps/export-modulemember.html","System Utility",
"Move-Item","Move an item from one location to another."," Move-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-PassThru] 
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. The default is the current directory.
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination 
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-item.html","File Manipulation",
"mv","Move an item from one location to another."," Move-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-PassThru] 
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. The default is the current directory.
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination 
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-item.html","File Manipulation",
"move","Move an item from one location to another."," Move-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-PassThru] 
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. The default is the current directory.
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination 
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-item.html","File Manipulation",
"mi","Move an item from one location to another."," Move-Item { [-path] <i>string</i>[] | [-literalPath] <i>string</i>[] }
 [[-destination] <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-filter <i>string</i>] [-force] [-credential <i>PSCredential</i>] [-PassThru] 
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the items. Wildcards are permitted.
 Use a dot (.) to specify the current location. The default is the current directory.
 Use the wildcard (*) to specify all items in the current location.
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -destination 
 The path to the location where the items are to be moved.
 (default = current directory)
 Wildcards are permitted, but the result must specify a single location.
 To rename the item being moved, specify a new name in the value of Destination.
 
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru
 Pass the object created by this cmdlet through the pipeline.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/move-item.html","File Manipulation",
"Set-MpPreference","Configure preferences for Windows Defender."," Set-MpPreference [-CheckForSignaturesBeforeRunningScan <i>Boolean</i>] [-CimSession <i>CimSession[]</i>] 
 [-DisableArchiveScanning <i>Boolean</i>] [-DisableAutoExclusions <i>Boolean</i>]
 [-DisableBehaviorMonitoring <i>Boolean</i>] [-DisableCatchupFullScan <i>Boolean</i>]
 [-DisableCatchupQuickScan <i>Boolean</i>] [-DisableEmailScanning <i>Boolean</i>] 
 [-DisableIntrusionPreventionSystem <i>Boolean</i>] [-DisableIOAVProtection <i>Boolean</i>]
 [-DisablePrivacyMode <i>Boolean</i>] [-DisableRealtimeMonitoring <i>Boolean</i>]
 [-DisableRemovableDriveScanning <i>Boolean</i>] [-DisableRestorePoint <i>Boolean</i>] 
 [-DisableScanningMappedNetworkDrivesForFullScan <i>Boolean</i>] [-DisableScanningNetworkFiles <i>Boolean</i>] 
 [-DisableScriptScanning <i>Boolean</i>] [-ExclusionExtension <i>String[]</i>]
 [-ExclusionPath <i>String[]</i>] [-ExclusionProcess <i>String[]</i>] [-Force]
 [-HighThreatDefaultAction {Clean | Quarantine | Remove | Allow | UserDefined | NoAction | Block}]
 [-LowThreatDefaultAction {Clean | Quarantine | Remove | Allow | UserDefined | NoAction | Block}] 
 [-MAPSReporting {Disabled | Basic | Advanced}]
 [-ModerateThreatDefaultAction {Clean | Quarantine | Remove | Allow | UserDefined | NoAction | Block}]
 [-QuarantinePurgeItemsAfterDelay <i>UInt32</i>] [-RandomizeScheduleTaskTimes <i>Boolean</i>]
 [-RealTimeScanDirection {Both | Incoming | Outcoming}]
 [-RemediationScheduleDay {Everyday | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Never}]
 [-RemediationScheduleTime <i>DateTime</i>] [-ReportingAdditionalActionTimeOut <i>UInt32</i>]
 [-ReportingCriticalFailureTimeOut <i>UInt32</i>] [-ReportingNonCriticalTimeOut <i>UInt32</i>]
 [-ScanAvgCPULoadFactor <i>Byte</i>] [-ScanOnlyIfIdleEnabled <i>Boolean</i>] 
 [-ScanParameters {QuickScan | FullScan}] [-ScanPurgeItemsAfterDelay <i>UInt32</i>]
 [-ScanScheduleDay {Everyday | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Never}]
 [-ScanScheduleQuickScanTime <i>DateTime</i>] [-ScanScheduleTime <i>DateTime</i>]
 [-SevereThreatDefaultAction {Clean | Quarantine | Remove | Allow | UserDefined | NoAction | Block}]
 [-SignatureAuGracePeriod <i>UInt32</i>] [-SignatureDefinitionUpdateFileSharesSources <i>String</i>] 
 [-SignatureDisableUpdateOnStartupWithoutEngine <i>Boolean</i>] [-SignatureFallbackOrder <i>String</i>] 
 [-SignatureFirstAuGracePeriod <i>UInt32</i>]
 [-SignatureScheduleDay {Everyday | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Never}]
 [-SignatureScheduleTime <i>DateTime</i>] [-SignatureUpdateCatchupInterval <i>UInt32</i>]
 [-SignatureUpdateInterval <i>UInt32</i>] [-SubmitSamplesConsent {None | Always | Never}] 
 [-ThreatIDDefaultAction_Actions <i>ThreatAction[]</i>] [-ThreatIDDefaultAction_Ids <i>Int64[]</i>]
 [-ThrottleLimit <i>Int32</i>] [-UILockdown <i>Boolean</i>]
 [-UnknownThreatDefaultAction {Clean | Quarantine | Remove | Allow | UserDefined | NoAction | Block}] 
 [<a href=""common.html""><i>CommonParameters</i></a>]
"," -CheckForSignaturesBeforeRunningScan [<i>Boolean</i>]
 Indicates whether to check for new virus and spyware definitions before Windows Defender runs a scan. If you 
 specify a value of $True, Windows Defender checks for new definitions. If you specify $False or do not specify 
 a value, the scan begins with existing definitions. This value applies to scheduled scans and to scans that 
 you start from the command line, but it does not affect scans that you start from the user interface.
 
 -CimSession [<i>CimSession[]</i>]
 Runs the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such 
 as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local 
 computer.
 
 -DisableArchiveScanning [<i>Boolean</i>]
 Indicates whether to scan archive files, such as .zip and .cab files, for malicious and unwanted software. If 
 you specify a value of $True or do not specify a value, Windows Defender scans archive files.
 
 -DisableAutoExclusions [<i>Boolean</i>]
 Indicates whether to disable the Automatic Exclusions feature for the server.
 
 -DisableBehaviorMonitoring [<i>Boolean</i>]
 Indicates whether to enable behavior monitoring. If you specify a value of $True or do not specify a value, 
 Windows Defender enables behavior monitoring.
 
 -DisableCatchupFullScan [<i>Boolean</i>]
 Indicates whether Windows Defender runs catch-up scans for scheduled full scans. A computer can miss a 
 scheduled scan, usually because the computer is turned off at the scheduled time. If you specify a value of 
 $True, after the computer misses two scheduled full scans, Windows Defender runs a catch-up scan the next time 
 someone logs on to the computer. If you specify a value of $False or do not specify a value, the computer does 
 not run catch-up scans for scheduled full scans.
 
 -DisableCatchupQuickScan [<i>Boolean</i>]
 Indicates whether Windows Defender runs catch-up scans for scheduled quick scans. A computer can miss a 
 scheduled scan, usually because the computer is off at the scheduled time. If you specify a value of $True, 
 after the computer misses two scheduled quick scans, Windows Defender runs a catch-up scan the next time 
 someone logs onto the computer. If you specify a value of $False or do not specify a value, the computer does 
 not run catch-up scans for scheduled quick scans.
 
 -DisableEmailScanning [<i>Boolean</i>]
 Indicates whether Windows Defender parses the mailbox and mail files, according to their specific format, in 
 order to analyze mail bodies and attachments. Windows Defender supports several formats, including .pst, .dbx, 
 .mbx, .mime, and .binhex. If you specify a value of $True, Windows Defender performs email scanning. If you 
 specify a value of $False or do not specify a value, Windows Defender does not perform email scanning.
 
 -DisableIntrusionPreventionSystem [<i>Boolean</i>]
 Indicates whether to configure network protection against exploitation of known vulnerabilities. If you 
 specify a value of $True or do not specify a value, network protection is enabled.
 
 -DisableIOAVProtection [<i>Boolean</i>]
 Indicates whether Windows Defender scans all downloaded files and attachments. If you specify a value of $True 
 or do not specify a value, scanning downloaded files and attachments is enabled.
 
 -DisablePrivacyMode [<i>Boolean</i>]
 Indicates whether to disable privacy mode. Privacy mode prevents users, other than administrators, from 
 displaying threat history.
 
 -DisableRealtimeMonitoring [<i>Boolean</i>]
 Indicates whether to use real-time protection. If you specify a value of $True or do not specify a value, 
 Windows Defender uses real-time protection. We recommend that you enable Windows Defender to use real-time 
 protection.
 
 -DisableRemovableDriveScanning [<i>Boolean</i>]
 Indicates whether to scan for malicious and unwanted software in removable drives, such as flash drives, 
 during a full scan. If you specify a value of $True, Windows Defender scans removable drives during any type 
 of scan. If you specify a value of $False or do not specify a value, Windows Defender does not scan removable 
 drives during a full scan. Windows Defender can still scan removable drives during quick scans or custom scans.
 
 -DisableRestorePoint [<i>Boolean</i>]
 Indicates whether to disable scanning of restore points.
 
 -DisableScanningMappedNetworkDrivesForFullScan [<i>Boolean</i>]
 Indicates whether to scan mapped network drives. If you specify a value of $True, Windows Defender scans 
 mapped network drives. If you specify a value of $False or do not specify a value, Windows Defender does not 
 scan mapped network drives.
 
 -DisableScanningNetworkFiles [<i>Boolean</i>]
 Indicates whether to scan for network files. If you specify a value of $True, Windows Defender scans network 
 files. If you specify a value of $False or do not specify a value, Windows Defender does not scan network 
 files. We do not recommend that you scan network files.
 
 -DisableScriptScanning [<i>Boolean</i>]
 Specifies whether to disable the scanning of scripts during malware scans.
 
 -ExclusionExtension [<i>String[]</i>]
 Specifies an array of file name extensions, such as obj or lib, to exclude from scheduled, custom, and 
 real-time scanning.
 
 -ExclusionPath [<i>String[]</i>]
 Specifies an array of file paths to exclude from scheduled and real-time scanning. You can specify a folder to 
 exclude all the files under the folder.
 
 -ExclusionProcess [<i>String[]</i>]
 Specifies an array of processes, as paths to process images. This cmdlet excludes any files opened by the 
 processes that you specify from scheduled and real-time scanning. Specifying this parameter excludes files 
 opened by executable programs only. The cmdlet does not exclude the processes themselves. To exclude a 
 process, specify it by using the ExclusionPath parameter.
 
 -Force
 Forces the command to run without asking for user confirmation.
 
 -HighThreatDefaultAction [<i>ThreatAction</i>]
 Specifies which automatic remediation action to take for a high level threat. The acceptable values for this 
 parameter are:
 
 -- Quarantine 
 -- Remove 
 -- Ignore
 
 -LowThreatDefaultAction [<i>ThreatAction</i>]
 Specifies which automatic remediation action to take for a low level threat. The acceptable values for this 
 parameter are:
 
 -- Quarantine 
 -- Remove 
 -- Ignore
 
 -MAPSReporting [<i>MAPSReportingType</i>]
 Specifies the type of membership in Microsoft Active Protection Service. Microsoft Active Protection Service 
 is an online community that helps you choose how to respond to potential threats. The community also helps 
 prevent the spread of new malicious software. The acceptable values for this parameter are:
 
 -- 0: Disabled. Send no information to Microsoft. This is the default value. 
 -- 1: Basic membership. Send basic information to Microsoft about detected software, including where the 
 software came from, the actions that you apply or that apply automatically, and whether the actions succeeded. 
 -- 2: Advanced membership. In addition to basic information, send more information to Microsoft about 
 malicious software, spyware, and potentially unwanted software, including the location of the software, file 
 names, how the software operates, and how it affects your computer.
 
 If you join this community, you can choose to automatically send basic or additional information about 
 detected software. Additional information helps Microsoft create new definitions. In some instances, personal 
 information might unintentionally be sent to Microsoft. However, Microsoft will not use this information to 
 identify you or contact you.
 
 -ModerateThreatDefaultAction [<i>ThreatAction</i>]
 Specifies which automatic remediation action to take for a moderate level threat. The acceptable values for 
 this parameter are:
 
 -- Quarantine 
 -- Remove 
 -- Ignore
 
 -QuarantinePurgeItemsAfterDelay [<i>UInt32</i>]
 Specifies the number of days to keep items in the Quarantine folder. If you specify a value of zero or do not 
 specify a value for this parameter, items stay in the Quarantine folder indefinitely.
 
 -RandomizeScheduleTaskTimes [<i>Boolean</i>]
 Indicates whether to select a random time for the scheduled start and scheduled update for definitions. If you 
 specify a value of $True or do not specify a value, scheduled tasks begin within 30 minutes, before or after, 
 the scheduled time. If you randomize the start times, it can distribute the impact of scanning. For example, 
 if several virtual machines share the same host, randomized start times prevents all the hosts from starting 
 the scheduled tasks at the same time.
 
 -RealTimeScanDirection [<ScanDirection>]
 Specifies scanning configuration for incoming and outgoing files on NTFS volumes. The acceptable values for 
 this parameter are:
 
 -- 0: Scan both incoming and outgoing files. This is the default. 
 -- 1: Scan incoming files only. 
 -- 2: Scan outgoing files only. 
 
 Specify a value for this parameter to enhance performance on servers which have a large number of file 
 transfers, but need scanning for either incoming or outgoing files. Evaluate this configuration based on the 
 server role. For non-NTFS volumes, Windows Defender performs full monitoring of file and program activity.
 
 -RemediationScheduleDay [<i>Day</i>]
 Specifies the day of the week on which to perform a scheduled full scan in order to complete remediation. 
 Alternatively, specify everyday for this full scan or never. The acceptable values for this parameter are:
 
 -- 0: Everyday
 -- 1: Sunday
 -- 2: Monday
 -- 3: Tuesday 
 -- 4: Wednesday
 -- 5: Thursday 
 -- 6: Friday
 -- 7: Saturday
 -- 8: Never 
 
 The default value is 8, never. If you specify a value of 8 or do not specify a value, Windows Defender 
 performs a scheduled full scan to complete remediation by using a default frequency.
 
 -RemediationScheduleTime [<i>DateTime</i>]
 Specifies the time of day, as the number of minutes after midnight, to perform a scheduled scan. The time 
 refers to the local time on the computer. If you do not specify a value for this parameter, a scheduled scan 
 runs at the default time of two hours after midnight.
 
 -ReportingAdditionalActionTimeOut [<i>UInt32</i>]
 Specifies the number of minutes before a detection in the additional action state changes to the cleared state.
 
 -ReportingCriticalFailureTimeOut [<i>UInt32</i>]
 Specifies the number of minutes before a detection in the critically failed state changes to either the 
 additional action state or the cleared state.
 
 -ReportingNonCriticalTimeOut [<i>UInt32</i>]
 Specifies the number of minutes before a detection in the non-critically failed state changes to the cleared 
 state.
 
 -ScanAvgCPULoadFactor [<i>Byte</i>]
 Specifies the maximum percentage CPU usage for a scan. The acceptable values for this parameter are: integers 
 from 5 through 100, and the value 0, which disables CPU throttling. Windows Defender does not exceed the 
 percentage of CPU usage that you specify. The default value is 50.
 
 -ScanOnlyIfIdleEnabled [<i>Boolean</i>]
 Indicates whether to start scheduled scans only when the computer is not in use. If you specify a value of 
 $True or do not specify a value, Windows Defender runs schedules scans when the computer is on, but not in use.
 
 -ScanParameters [<i>ScanType</i>]
 Specifies the scan type to use during a scheduled scan. The acceptable values for this parameter are:
 
 -- 1: Quick scan
 -- 2: Full scan 
 
 If you do not specify this parameter, Windows Defender uses the default value of quick scan.
 
 -ScanPurgeItemsAfterDelay [<i>UInt32</i>]
 Specifies the number of days to keep items in the scan history folder. After this time, Windows Defender 
 removes the items. If you specify a value of zero, Windows Defender does not remove items. If you do not 
 specify a value, Windows Defender removes items from the scan history folder after the default length of time, 
 which is 30 days.
 
 -ScanScheduleDay [<i>Day</i>]
 Specifies the day of the week on which to perform a scheduled scan. Alternatively, specify everyday for a 
 scheduled scan or never. The acceptable values for this parameter are:
 
 -- 0: Everyday 
 -- 1: Sunday 
 -- 2: Monday 
 -- 3: Tuesday 
 -- 4: Wednesday 
 -- 5: Thursday 
 -- 6: Friday 
 -- 7: Saturday 
 -- 8: Never
 
 The default value is 8, never. If you specify a value of 8 or do not specify a value, Windows Defender does 
 not perform scheduled scans.
 
 -ScanScheduleQuickScanTime [<i>DateTime</i>]
 Specifies the time of day, as the number of minutes after midnight, to perform a scheduled quick scan. The 
 time refers to the local time on the computer. If you do not specify a value for this parameter, a scheduled 
 quick scan runs at the time specified by the ScanScheduleTime parameter. That parameter has a default time of 
 two hours after midnight.
 
 -ScanScheduleTime [<i>DateTime</i>]
 Specifies the time of day, as the number of minutes after midnight, to perform a scheduled scan. The time 
 refers to the local time on the computer. If you do not specify a value for this parameter, a scheduled scan 
 runs at a default time of two hours after midnight.
 
 -SevereThreatDefaultAction [<i>ThreatAction</i>]
 Specifies which automatic remediation action to take for a severe level threat. The acceptable values for this 
 parameter are:
 
 -- Quarantine 
 -- Remove 
 -- Ignore
 
 -SignatureAuGracePeriod [<i>UInt32</i>]
 Specifies a grace period, in minutes, for the definition. If a definition successfully updates within this 
 period, Windows Defender abandons any service initiated updates.
 
 -SignatureDefinitionUpdateFileSharesSources [<i>String</i>]
 Specifies file-share sources for definition updates. Specify sources as a bracketed sequence of Universal 
 Naming Convention (UNC) locations, separated by the pipeline symbol; for example, { \\Server01\Share01 | 
 \\Server02\Share02 | \\Server03\Share03}. If you specify a value for this parameter, Windows Defender attempts 
 to connect to the shares in the order that you specify. After Windows Defender updates a definition, it stops 
 attempting to connect to shares on the list. If you do not specify a value for this parameter, the list is 
 empty.
 
 -SignatureDisableUpdateOnStartupWithoutEngine [<i>Boolean</i>]
 Indicates whether to initiate definition updates even if no antimalware engine is present. If you specify a 
 value of $True or do not specify a value, Windows Defender initiates definition updates on startup. If you 
 specify a value of $False, and if no antimalware engine is present, Windows Defender does not initiate 
 definition updates on startup.
 
 -SignatureFallbackOrder [<i>String</i>]
 Specifies the order in which to contact different definition update sources. Specify the types of update 
 sources in the order in which you want Windows Defender to contact them, enclosed in braces and separated by 
 the pipeline symbol; for example, { InternalDefinitionUpdateServer | MicrosoftUpdateServer | MMPC }. The 
 values that you can specify in the string are:
 
 -- InternalDefinitionUpdateServer
 -- MicrosoftUpdateServer
 -- MMPC
 -- FileShares
 
 MMPC refers to Microsoft Malware Protection Center.
 
 If you specify a value for this parameter, Windows Defender contacts the definition update sources in the 
 specified order. After Windows Defender downloads definition updates from a source, it stops attempting to 
 connect to other sources. If you do not specify a value for this parameter, Windows Defender contacts sources 
 in the default order of { MicrosoftUpdateServer | MMPC }.
 
 -SignatureFirstAuGracePeriod [<i>UInt32</i>]
 Specifies a grace period, in minutes, for the definition. If a definition successfully updates within this 
 period, Windows Defender abandons any service initiated updates. This parameter overrides the value of the 
 CheckForSignaturesBeforeRunningScan parameter.
 
 -SignatureScheduleDay [<i>Day</i>]
 Specifies the day of the week on which to check for definition updates. Alternatively, specify everyday for a 
 scheduled scan or never. The acceptable values for this parameter are:
 
 -- 0: Everyday 
 -- 1: Sunday 
 -- 2: Monday 
 -- 3: Tuesday 
 -- 4: Wednesday 
 -- 5: Thursday 
 -- 6: Friday 
 -- 7: Saturday 
 -- 8: Never 
 
 The default value is 8, never. If you specify a value of 8 or do not specify a value, Windows Defender checks 
 for definition updates by using a default frequency.
 
 -SignatureScheduleTime [<i>DateTime</i>]
 Specifies the time of day, as the number of minutes after midnight, to check for definition updates. The time 
 refers to the local time on the computer. If you do not specify a value for this parameter, Windows Defender 
 checks for definition updates at the default time of 15 minutes before the scheduled scan time.
 
 -SignatureUpdateCatchupInterval [<i>UInt32</i>]
 Specifies the number of days after which Windows Defender requires a catch-up definition update. If you do not 
 specify a value for this parameter, Windows Defender requires a catch-up definition update after the default 
 value of one day.
 
 -SignatureUpdateInterval [<i>UInt32</i>]
 Specifies the interval, in hours, at which to check for definition updates. The acceptable values for this 
 parameter are: integers from 1 through 24. If you do not specify a value for this parameter, Windows Defender 
 checks at the default interval. You can use this parameter instead of the SignatureScheduleDay parameter and 
 SignatureScheduleTime parameter.
 
 -SubmitSamplesConsent [<i>SubmitSamplesConsentType</i>]
 Specifies how Windows Defender checks for user consent for certain samples. If consent has previously been 
 granted, Windows Defender submits the samples. Otherwise, if the MAPSReporting parameter does not have a value 
 of Disabled, Windows Defender prompts the user for consent. The acceptable values for this parameter are:
 
 --0: Always prompt
 --1: Send safe samples automatically 
 --2: Never send
 --3: Send all samples automatically
 
 -ThreatIDDefaultAction_Actions [<i>ThreatAction</i>]
 Specifies an array of the actions to take for the IDs specified by using the ThreatIDDefaultAction_Ids 
 parameter. The acceptable values for this parameter are:
 
 -- 1: Clean 
 -- 2: Quarantine 
 -- 3: Remove 
 -- 4: Allow 
 -- 8: UserDefined 
 -- 9: NoAction 
 -- 10: Block
 
 -ThreatIDDefaultAction_Ids [<i>int64</i>]
 Specifies an array of threat IDs. This cmdlet modifies the default action for the threat IDs that you specify.
 
 -ThrottleLimit [<i>int32</i>]
 Specifies the maximum number of concurrent operations that can be established to run the cmdlet. If this 
 parameter is omitted or a value of 0 is entered, then Windows PowerShell® calculates an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 
 -UILockdown [<i>Boolean</i>]
 Indicates whether to disable UI lockdown mode. If you specify a value of $True, Windows Defender disables UI 
 lockdown mode. If you specify $False or do not specify a value, UI lockdown mode is enabled.
 
 -UnknownThreatDefaultAction [<i>ThreatAction</i>]
 Specifies which automatic remediation action to take for an unknown level threat. The acceptable values for 
 this parameter are:
 
 -- Quarantine 
 -- Remove 
 -- Ignore
","https://ss64.com/ps/set-mppreference.html","System Utility",
"Get-NetAdapter","Get the basic network adapter properties.","Not Available","Not Available","Not Available","Enumeration, Networking",
"Set-NetAdapter","Set the basic network adapter properties.","Not Available","Not Available","Not Available","Networking",
"Disable-NetAdapterBinding","Disable a binding to a network adapter.","Not Available","Not Available","Not Available","Networking",
"Get-NetAdapterVmq","Get the VMQ properties of a network adapter.","Not Available","Not Available","Not Available","Networking",
"Set-NetAdapterVmq","Set the VMQ properties of a network adapter.","Not Available","Not Available","Not Available","Networking",
"Test-NetConnection","Display diagnostic information for a connection."," Test-NetConnection [[-ComputerName] <i>String</i>]
 <b>{</b> [-CommonTCPPort] <i>String</i> <b>|</b> -Port <i>Int32</i> <b>}</b>
 [-InformationLevel <i>String</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Test-NetConnection [[-ComputerName] <i>String</i>]
 [-TraceRoute] [-Hops <i>Int32</i>]
 [-InformationLevel <i>String</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Test-NetConnection [[-ComputerName] <i>String</i>]
 [-DiagnoseRouting] [-ConstrainSourceAddress <i>String</i>] [-ConstrainInterface <i>UInt32</i>]
 [-InformationLevel <i>String</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName
 The Domain Name System (DNS) name or IP address of the target computer.
 -CommonTCPPort
 The common service TCP port number.
 Accepted values: SMB HTTP RDP WINRM
 -ConstrainInterface 
 The interface constraint to use for route diagnostics.
 -ConstrainSourceAddress 
 The source address constraint to use for route diagnostics.
 -DiagnoseRouting
 Indicates that route diagnostics runs to output the route and source address selection information for the remote host.
 -Hops
 The number of hops to traverse in a trace route command.
 -InformationLevel 
 The information level.
 Accepted values: 
 &#8226; Detailed
 &#8226; Quiet If you set this parameter to Quiet, the cmdlet returns basic information.
 For example, for a ping test, this cmdlet returns a Boolean value that indicates whether
 the attempt to ping a host or port is successful.
 -Port
 The TCP port number on the remote computer.
 The cmdlet uses this port number to test connectivity to the remote computer.
 -TraceRoute
 Indicates that Tracert runs to test connectivity to the remote host.
","https://ss64.com/ps/test-netconnection.html","Networking",
"Get-NetConnectionProfile","Get a connection profile.","Not Available","Not Available","Not Available","Enumeration, Networking",
"Set-NetConnectionProfile","Set a connection profile.","Not Available","Not Available","Not Available","Networking",
"Set-NetFirewallProfile","Configure per-profile settings of Windows Firewall.","Not Available","Not Available","Not Available","Networking",
"Enable-NetFirewallRule","Enable a previously disabled firewall rule.","Not Available","Not Available","Not Available","Networking",
"Set-NetFirewallRule","Modify existing firewall rules.","Not Available","Not Available","Not Available","Networking",
"Get-NetFirewallRule","Retrieve firewall rules from the target computer.","Not Available","Not Available","Not Available","Enumeration, Networking",
"New-NetFirewallRule","Create a new firewall rule and add to a target computer.","Not Available","Not Available","Not Available","Networking",
"Get-NetIPAddress","Get IP address configuration."," Get-NetIPAddress [[-IPAddress] <i>String</i>[]&gt;] [-InterfaceIndex <i>UInt32</i>[]] [-InterfaceAlias <i>String</i>[]]
 [-AddressFamily <i>AddressFamily</i>[]] [-Type <i>Type</i>[]] [-PrefixLength <i>Byte</i>[]] [-PrefixOrigin <i>PrefixOrigin</i>[]]
 [-SuffixOrigin <i>SuffixOrigin</i>[]&gt;] [-AddressState <i>AddressState</i>[]] [-ValidLifetime <i>TimeSpan</i>[]]
 [-PreferredLifetime <i>TimeSpan</i>[]&gt;] [-SkipAsSource <i>Boolean</i>[]] [-AssociatedIPInterface <i>CimInstance</i>]
 [-PolicyStore <i>String</i>] [-IncludeAllCompartments] [-CimSession <i>CimSession</i>[]] [-ThrottleLimit <i>Int32</i>]
 [-AsJob] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AddressFamily
 Gets the IP address configurations that match the address families.
 Accepted values: IPv4, IPv6 (either or both as an array).
 -AddressState
 An array of duplicate address detection (DAD) state values for the IP address.
 Use this parameter to filter the output based on addresses that are valid and available for use.
 Accepted values: 
 -- Invalid. IP address configuration information for addresses that are not valid and will not be used.
 -- Tentative. IP address configuration information for addresses that are not used for communication,
 as the uniqueness of those IP addresses is being verified.
 -- Duplicate. IP address configuration information for addresses for which a duplicate IP address has been
 detected and the current IP address will not be used.
 -- Deprecated. IP address configuration information for addresses that will no longer be used to establish new
 connections, but will continue to be used with existing connections.
 -- Preferred. IP address configuration information for addresses that are valid and available for use.
 -AsJob
 Run the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.
 -AssociatedIPInterface
 Specify an IP interface as a CIM object. To obtain an IP interface, use the Get-NetIPInterface cmdlet.
 -CimSession
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -IncludeAllCompartments
 Indicates that the cmdlet includes addresses from all configured network compartments.
 If you do not specify this parameter, the cmdlet gets only addresses in the default network compartment.
 -InterfaceAlias
 Specifies an array of aliases of network interfaces. The cmdlet gets IP addresses that match the aliases.
 -InterfaceIndex
 Specifies an array of indexes of network interfaces. The cmdlet gets IP addresses that match the indexes.
 -IPAddress
 Specifies an array of IPv4 or IPv6 addresses.
 -PolicyStore
 Specifies a PolicyStore value.
 Accepted values:
 <u>ActiveStore</u> The IP address information is valid.
 PersistentStore The computer saves IP address information across restarts.
 When the computer restarts, it copies the saved settings to the ActiveStore.
 The default value is ActiveStore.
 -PreferredLifetime
 Specifies an array of values of preferred lifetimes, as TimeSpan objects, for an IP address.
 To obtain a TimeSpan object, use the New-TimeSpan cmdlet.
 -PrefixLength
 Specifies an array of prefix lengths. This parameter defines the local subnet size, and is also known as a subnet mask.
 -PrefixOrigin
 Specifies an array of origins for address prefixes. IP addresses are divided into two parts, the prefix and the suffix.
 The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion.
 Accepted values:
 Manual The IP address prefix was manually specified. 
 WellKnown The IP address prefix is from a well-known source. 
 DHCP The IP address prefix was provided by DHCP settings. 
 RouterAdvertisement The IP address prefix was obtained through a router advertisement (RA). 
 Other The IP address prefix was obtained from another source, such as a VPN.
 -SkipAsSource
 Indicates whether an address is a primary IP address.
 This parameter identifies the primary IP address for outgoing traffic in a multiple IP address scenario.
 If this parameter is set to True, the addresses are not used for outgoing traffic and are not registered in DNS.
 -SuffixOrigin
 Specifies an array of origins for address suffixes.
 IP addresses are divided into two parts, the prefix and the suffix.
 The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion. 
 Accepted values:
 Manual The IP address suffix was manually specified.
 WellKnown The IP address suffix is from a well-known source.
 DHCP The IP address suffix was provided by DHCP settings.
 Link The IP address suffix was obtained from the link-layer address.
 Random The IP address suffix was obtained from a random source.
 Other The IP address suffix was obtained from another source, such as a VPN.
 -ThrottleLimit
 Specifies the maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell calculates an optimum throttle limit for
 the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
 -Type
 Specifies an array of IP address types.
 Accepted values: <u>Unicast</u> or Anycast, default = Unicast.
 -ValidLifetime
 Specifies an array of values for valid lifetimes, as TimeSpan objects, for an IP address.
 To obtain a TimeSpan object, use the New-TimeSpan cmdlet.
","https://ss64.com/ps/get-netipaddress.html","Enumeration, Networking",
"New-NetIPAddress","Create and configure an IP address.","Not Available","Not Available","Not Available","Networking",
"Remove-NetIPAddress","Remove an IP address and its configuration.","Not Available","Not Available","Not Available","Networking",
"Set-NetIPAddress","Modify the configuration of an IP address.","Not Available","Not Available","Not Available","Networking",
"Get-NetIPConfiguration","Get IP network configuration."," Get-NetIPConfiguration [[-InterfaceAlias] <i>String</i>] [-AllCompartments] [-CompartmentId <i>Int32</i>]
 [-Detailed] [-CimSession <i>CimSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-NetIPConfiguration <b>-InterfaceIndex</b> <i>Int32</i> [-AllCompartments] [-CompartmentId <i>Int32</i>]
 [-Detailed] [-CimSession <i>CimSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-NetIPConfiguration [-All] [-AllCompartments] [-CompartmentId <i>Int32</i>]
 [-Detailed] [-CimSession <i>CimSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -All
 Retrieve the IP configuration properties for all of the interfaces on a computer,
 including virtual interfaces, loopback interfaces, and disconnected interfaces.
 -AllCompartments
 Get the IP configuration properties for all of the compartments on a computer.
 -CimSession
 Run the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such
 as the output of a Get-CimSession cmdlet. The default is the current session on the local
 computer.
 -CompartmentId
 Specifies an identifier for network compartment in the protocol stack.
 By default, the cmdlet gets Net IP configuration in the default compartment.
 If you specify a value for this parameter, the cmdlet gets any matching Net IP configuration in the
 compartment specified in this field.
 -Detailed
 Retrieve additional interface and computer configuration information, including the computer name,
 link layer address, network profile, MTU length, and DHCP status.
 -InterfaceAlias
 An alias of a network interface. The cmdlet gets an IP configuration that matches the alias.
 -InterfaceIndex
 An index of a network interface. The cmdlet gets an IP configuration that matches the index.
","https://ss64.com/ps/get-netipconfiguration.html","Enumeration, Networking",
"Get-NetIPInterface","Get an IP interface.","Not Available","Not Available","Not Available","Enumeration, Networking",
"Set-NetIPInterface","Modify an IP interface.","Not Available","Not Available","Not Available","Networking",
"New-NetLbfoTeam","Create a new NIC team.","Not Available","Not Available","Not Available","Networking",
"New-NetNat","Create a NAT object.","Not Available","Not Available","Not Available","Networking",
"New-NetRoute","Create a route in the IP routing table.","Not Available","Not Available","Not Available","Networking",
"Get-NetTCPConnection","Get TCP connections."," Get-NetTCPConnection [[-LocalAddress] <i>String</i>[]] [[-LocalPort] <i>UInt16</i>[]] [-AppliedSetting <i>AppliedSetting</i>[]]
 [-CimSession <i>CimSession</i>[]] [-CreationTime <i>DateTime</i>[]] [-OffloadState <i>OffloadState</i>[]]
 [-OwningProcess <i>UInt32</i>[]] [-RemoteAddress <i>String</i>[]] [-RemotePort <i>UInt16</i>[]]
 [-State <i>State</i>[]] [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AppliedSetting [<i>AppliedSetting</i>[]]
 An array of values of applied settings. Gets connections that match the settings specified.
 Accepted values: 
 &#8226; Internet
 &#8226; Datacenter
 &#8226; Compat
 &#8226; Custom
 -CimSession [<i>CimSession</i>[]]
 Run the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such 
 as the output of a Get-CimSession cmdlet. The default is the current session on the local 
 computer.
 -CreationTime [<i>DateTime</i>[]]
 An array of DateTime objects. To get a DateTime object, use the Get-Date cmdlet.
 -LocalAddress [<i>String</i>[]]
 An array of local IP addresses. Gets connections for the addresses that you specify.
 -LocalPort [<i>UInt16</i>[]]
 An array of local ports. Gets connections for the ports that you specify.
 -OffloadState [<i>OffloadState</i>[]]
 The offload state of a TCP connection.
 -OwningProcess [<i>UInt32</i>[]]
 The PID of the owning process of a TCP connection.
 -RemoteAddress [<i>String</i>[]]
 An array of remote IP addresses. Gets connections for the addresses that you specify.
 -RemotePort [<i>UInt16</i>[]]
 An array of remote ports. Gets connections for the ports that you specify.
 -State [<i>State</i>[]]
 Get connections that match the states that you specify. Specifies an array of TCP states. 
 Accepted values: 
 &#8226; Closed
 &#8226; CloseWait
 &#8226; Closing
 &#8226; DeleteTCB
 &#8226; Established
 &#8226; FinWait1
 &#8226; FinWait2
 &#8226; LastAck
 &#8226; Listen
 &#8226; SynReceived
 &#8226; SynSent
 &#8226; TimeWait
 -ThrottleLimit
 The maximum number of concurrent operations that can be established to run the cmdlet. If this 
 parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
","https://ss64.com/ps/get-nettcpconnection.html","Enumeration, Networking",
"Set-NetTCPSetting","Modify a TCP setting."," Set-NetTCPSetting <b>{</b> [[-SettingName] <i>String</i>[]] <b>|</b> -InputObject <i>CimInstance</i>[] <b>}</b>
 [-AutoReusePortRangeNumberOfPorts <i>UInt16</i>] [-AutoReusePortRangeStartPort <i>UInt16</i>]
 [-AutoTuningLevelLocal <i>AutoTuningLevelLocal</i>] [-AutomaticUseCustom <i>AutomaticUseCustom</i>]
 [-CimSession <i>CimSession</i>[]] [-CongestionProvider <i>CongestionProvider</i>] [-CwndRestart <i>CwndRestart</i>]
 [-DelayedAckFrequency <i>Byte</i>] [-DelayedAckTimeoutMs <i>UInt32</i>] [-DynamicPortRangeStartPort <i>UInt16</i>]
 [-DynamicPortRangeNumberOfPorts <i>UInt16</i>] [-EcnCapability <i>EcnCapability</i>] [-ForceWS <i>ForceWS</i>]
 [-InitialCongestionWindowMss <i>UInt32</i>] [-InitialRtoMs <i>UInt32</i>] [-MaxSynRetransmissions <i>Byte</i>]
 [-MemoryPressureProtection <i>MemoryPressureProtection</i>] [-MinRtoMs <i>UInt32</i>]
 [-Timestamps <i>Timestamps</i>] [-ScalingHeuristics <i>ScalingHeuristics</i>]
 [-NonSackRttResiliency <i>NonSackRttResiliency</i>] [-ThrottleLimit <i>Int32</i>] [-AsJob] [-PassThru]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsJob
 Run the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.
 -AutomaticUseCustom
 Whether the automatic profile assigns a custom template, either Datacenter Custom or Internet Custom,
 to a connection. The acceptable values for this parameter are: Enabled or Disabled.
 -AutoReusePortRangeNumberOfPorts
 The number of ports for the auto-reuse port range, which is a port range used for local ephemeral
 port selection by outbound TCP connections for which either SO_REUSE_UNICASTPORT has been set on the socket,
 or for which connect() has been called without calling bind() on the socket.
 If you specify 0, the auto-reuse feature is disabled and ephemeral ports are drawn instead from the dynamic port range
 as specified by DynamicPortRangeStartPort and DynamicPortRangeNumberOfPorts, even if SO_REUSE_UNICASTPORT is set on a socket.
 -AutoReusePortRangeStartPort
 The number of ports for the auto-reuse port range, which is a port range used for local ephemeral
 port selection by outbound TCP connections for which either SO_REUSE_UNICASTPORT has been set on the socket,
 or for which connect() has been called without calling bind() on the socket.
 If you specify 0, the auto-reuse feature is disabled and ephemeral ports are drawn instead from the dynamic port range
 as specified by DynamicPortRangeStartPort and DynamicPortRangeNumberOfPorts, even if SO_REUSE_UNICASTPORT is set on a socket.
 -AutoTuningLevelLocal
 A TCP auto-tuning level for the host computer.
 TCP auto-tuning can improve throughput on high throughput, high latency networks.
 Accepted values for this are:
 &#8226; Disabled. Sets the TCP receive window to the default value.
 &#8226; HighlyRestricted. Sets the TCP receive window to grow beyond the default value, but very conservatively.
 &#8226; Restricted. Sets the TCP receive window to grow beyond the default value, but less conservatively than HighlyRestricted.
 &#8226; Normal. Sets the TCP receive window to grow to accommodate almost all scenarios.
 &#8226; Experimental. Sets the TCP receive window to grow to accommodate extreme scenarios.
 -CimSession
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of RFC 1323.
 The accepted values are: Enabled or Disabled
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command, without actually executing the command.
","https://ss64.com/ps/set-nettcpsetting.html","Networking",
"Group-Object","Group objects that contain the same value."," Group-Object [-AsHashTable] [-AsString] [[-property] <i>Object</i>[]]
 [-caseSensitive] [-noElement] [-culture <i>string</i>]
 [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsHashTable
 Return the group as a pipe them to Group-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
","https://ss64.com/ps/group-object.html","System Utility",
"group","Group objects that contain the same value."," Group-Object [-AsHashTable] [-AsString] [[-property] <i>Object</i>[]]
 [-caseSensitive] [-noElement] [-culture <i>string</i>]
 [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsHashTable
 Return the group as a pipe them to Group-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
","https://ss64.com/ps/group-object.html","System Utility",
"Measure-Object","Measure the properties of an object."," Measure-Object [ [-property] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-average] [-sum] [-minimum] [-maximum] [-StandardDeviation] [-AllStats]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Measure-Object [ [-property] <i>string</i>[] ] [-inputObject <i>psobject</i>]
 [-character] [-line] [-word] [-ignoreWhiteSpace]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -property <i>string</i>[]
 The property to measure.
 -AllStats
 Return all the statistics (average,sum,minimum,maximum,StandardDeviation) PowerShell 6+.
 -average 
 Average the values in the designated property.
 -character
 Count the number of characters in the input object.
 -inputObject 
 The object(s) to be measured. 
 A command, expression or variable that contains the object(s).
 When the -InputObject parameter is used to submit a collection of items,
 Measure-Object receives one object that represents the collection.
 Because one collection object cannot be measured, Measure-Object returns the entire collection unchanged.
 To convert multiple items, pipe them to Measure-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -ignoreWhiteSpace 
 Ignore white space in word counts and character counts.
 -line 
 Count the number of lines in the input object.
 -minimum 
 Determine the minimum value of the properties.
 -maximum 
 Determine the maximum value of the properties.
 -StandardDeviation
 Determine the standard deviation of the properties. PowerShell 6+.
 -sum
 Sum the values of the properties.
 -word 
 Count the number of words in the input object.
","https://ss64.com/ps/measure-object.html","System Utility",
"New-Object","Create a new .Net object."," New-Object [-comObject] <i>string</i>[] [-strict] 
 [-Property <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-Object [-typeName] <i>string</i>[] [[-argumentList] <i>Object[]</i>]
 [-Property <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -argumentList <i>Object</i>
 A comma separated list of arguments to pass to the constructor of the .Net class.
 -comObject <i>string</i>
 Programmatic Identifier (ProgID) of the COM object.
 -Property <i>hashtable</i> Set property values and invokes methods of the new object.
 Enter a hash table in which the keys are the names of properties or methods and
 the values are property values or method arguments. New-Object creates the object and
 sets each property value and invokes each method in the order that they appear in the hash table.
 If the new object is derived from the PSObject class, a property is specified that
 does not exist on the object, it will be added to the object as a NoteProperty.
 If the object is not a PSObject, the command generates a non-terminating error.
 -strict 
 Raise an error if the COM object that you attempt to
 create uses an interop assembly.
 This enables you to distinguish actual COM objects from
 .Net objects with COM-callable wrappers.
 -typeName <i>string</i>
 The fully-qualified name of the .Net class.
 <p>The New-Object cmdlet allows you to create a new instance of a .Net or COM object, PowerShell also allows you to create custom objects for your own collections of data items.</p>
 <p>Create a SendKeys(&quot;Hello 123&quot;)
 }
","https://ss64.com/ps/new-object.html","System Utility",
"Select-Object","Select properties of objects."," Select-Object [[-property] <i>Object</i>[]] [-excludeProperty <i>string</i>[]]
 [-expandProperty <i>string</i>] [-first <i>int</i>] [-last <i>int</i>]
 [-Skip <i>int</i>] [-unique] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-Object [-Index <i>Int32</i>[]] [-InputObject <i>psobject</i>] [-Unique] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>[]
 The property or properties to select.
 -ExcludeProperty <i>string</i>
 Properties that will not be selected.
 
 -ExpandProperty <i>string</i>
 Select and expand the specified property. If the specified property is 
 an array, for example, each value of the array should be included.
 -First <i>int</i>
 Select <i>int</i> number of objects from the beginning of an array of input objects.
 
 -Last <i>int</i>
 Select <i>int</i> number of objects from the end of an array of input objects.
 -Skip <i>int</i>
 Skip (do not select) the specified number of items.
 By default, the Skip parameter counts from the beginning of the array
 or list of objects, but if the command uses the Last parameter, it
 counts from the end of the list or array.
 Unlike the Index parameter, which starts counting from 0, the Skip parameter begins at 1.
 -Unique 
 Select unique objects only, (identical properties and values)
 -InputObject <i>psobject</i>
 An object or objects to input to Select-Object.
 When the -InputObject parameter is used to submit a collection of items, Select-Object receives
 one object that represents the collection and returns the collection unchanged.
 To select multiple individual items, pipe them to Select-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Index <i>Int32</i>[]
 Select objects from an array based on their index values.
 Enter the indexes in a comma-separated list.
 Indexes in an array begin with 0, where 0 represents the first value
 and (n-1) represents the last value.
","https://ss64.com/ps/select-object.html","System Utility",
"select","Select properties of objects."," Select-Object [[-property] <i>Object</i>[]] [-excludeProperty <i>string</i>[]]
 [-expandProperty <i>string</i>] [-first <i>int</i>] [-last <i>int</i>]
 [-Skip <i>int</i>] [-unique] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-Object [-Index <i>Int32</i>[]] [-InputObject <i>psobject</i>] [-Unique] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>[]
 The property or properties to select.
 -ExcludeProperty <i>string</i>
 Properties that will not be selected.
 
 -ExpandProperty <i>string</i>
 Select and expand the specified property. If the specified property is 
 an array, for example, each value of the array should be included.
 -First <i>int</i>
 Select <i>int</i> number of objects from the beginning of an array of input objects.
 
 -Last <i>int</i>
 Select <i>int</i> number of objects from the end of an array of input objects.
 -Skip <i>int</i>
 Skip (do not select) the specified number of items.
 By default, the Skip parameter counts from the beginning of the array
 or list of objects, but if the command uses the Last parameter, it
 counts from the end of the list or array.
 Unlike the Index parameter, which starts counting from 0, the Skip parameter begins at 1.
 -Unique 
 Select unique objects only, (identical properties and values)
 -InputObject <i>psobject</i>
 An object or objects to input to Select-Object.
 When the -InputObject parameter is used to submit a collection of items, Select-Object receives
 one object that represents the collection and returns the collection unchanged.
 To select multiple individual items, pipe them to Select-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Index <i>Int32</i>[]
 Select objects from an array based on their index values.
 Enter the indexes in a comma-separated list.
 Indexes in an array begin with 0, where 0 represents the first value
 and (n-1) represents the last value.
","https://ss64.com/ps/select-object.html","System Utility",
"Sort-Object","Sort objects by property value."," Sort-Object [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>] [-culture <i>string</i>]
 [-caseSensitive] [-unique] [-descending] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>
 A property or properties to use when sorting. Wildcards are permitted. 
 Objects are sorted based on the values of these properties.
 Multiple properties may be specified, the objects will be sorted by 
 each property in turn. i.e Surname and then FirstName
 If not property is specified, sort-object will sort using the default
 property for the object type.
 -CaseSensitive
 Sort UPPER and lower case letters separately.
 -Culture <i>string</i>
 The cultural/country configuration to use when sorting.
 -Descending 
 Sort in descending order. The Descending parameter applies to all properties.
 To sort by some properties in ascending order and others in descending order, 
 specify their property values with a hash table.
 -InputObject <i>psobject</i>
 The objects to be sorted.
 When the -InputObject parameter is used to submit a collection of items,
 Sort-Object receives one object that represents the collection.
 Because one object cannot be sorted, Sort-Object returns the entire collection unchanged.
 To sort multiple items, pipe them to Sort-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Unique 
 Return only the unique values.
","https://ss64.com/ps/sort-object.html","System Utility",
"sort","Sort objects by property value."," Sort-Object [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>] [-culture <i>string</i>]
 [-caseSensitive] [-unique] [-descending] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>
 A property or properties to use when sorting. Wildcards are permitted. 
 Objects are sorted based on the values of these properties.
 Multiple properties may be specified, the objects will be sorted by 
 each property in turn. i.e Surname and then FirstName
 If not property is specified, sort-object will sort using the default
 property for the object type.
 -CaseSensitive
 Sort UPPER and lower case letters separately.
 -Culture <i>string</i>
 The cultural/country configuration to use when sorting.
 -Descending 
 Sort in descending order. The Descending parameter applies to all properties.
 To sort by some properties in ascending order and others in descending order, 
 specify their property values with a hash table.
 -InputObject <i>psobject</i>
 The objects to be sorted.
 When the -InputObject parameter is used to submit a collection of items,
 Sort-Object receives one object that represents the collection.
 Because one object cannot be sorted, Sort-Object returns the entire collection unchanged.
 To sort multiple items, pipe them to Sort-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Unique 
 Return only the unique values.
","https://ss64.com/ps/sort-object.html","System Utility",
"Where-Object","Filter the objects passed along the command pipeline."," Where-Object [-filterScript] {<i>scriptblock</i>}
 [-inputObject <i>psobject</i>] [CommonParameters]
 Key
 <pre>Syntax
 <i>command</i> | <b>Where</b> <i>test1</i> [<i>conjunction test2</i>] 
 Key
 <p class=""space""><a href=""syntax-regex.html"">PowerShell Syntax - Regular Expressions</a><br>
"," -FilterScript <i>scriptblock</i>
 An expression that resolves to a Boolean (TRUE/FALSE) value.
 This will determine which input objects will be passed along the command pipeline.
 -inputObject <i>psobject</i>
 The objects to be filtered. Typically objects are passed through the pipeline.
 When the -InputObject parameter is used to submit a collection of items,
 Where-Object receives one object that represents the collection.
 Because one collection object cannot be filtered, Where-Object returns the entire collection unchanged.
 To convert multiple items, pipe them to Where-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 <p>The '?' symbol and Where are both aliases for Where-Object. 
 Key
 <i>conjunction</i> Any of the following: (logical boolean operators) 
 -and, -or (Logical or), -bor (Bitwise or), -band (Bitwise and), -xor 
 <i>Test1</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 <i>Test2</i> An expression that resolves to a Boolean (TRUE/FALSE) value.
 comparison operators
","https://ss64.com/ps/where-object.html","System Utility",
"Add-OdbcDsn","Add an ODBC DSN.","Not Available","Not Available","Not Available","System Utility",
"Out-Default","Set the destination of default output."," Out-Default [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject The input item {may be piped}
","https://ss64.com/ps/out-default.html","System Utility",
"Out-File","Send output to a file."," Out-File [-filePath] <i>string</i> [[-encoding] <i>string</i>]
 [-append] [-width <i>int</i>] [-inputObject <i>psobject</i>]
 [-force] [-noClobber] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -filePath <i>path</i>
 The path to the output file. 
 
 -encoding <i>string</i>
 The character encoding used in the file. 
 '<u>Unicode</u>', 'UTF7', 'UTF8', 'UTF32', 'ASCII', 'BigEndianUnicode',
 'Default', or 'OEM'. The default is Unicode (UTF-16LE).
 Choosing 'Default' will set to the system ANSI code page. 
 Choosing 'OEM' will set to the OEM code page identifier for the OS.
 -append 
 Add the output to the end of an existing file, instead of replacing the file contents.
 You need to ensure the -encoding matches any existing content in the target file
 -width <i>int</i>
 The number of characters in each line of output. Any additional
 characters are truncated, not wrapped. If you omit this parameter, 
 the width is determined by the characteristics of the host. The default 
 for the PowerShell.exe host is 80 (characters).
 -inputObject <i>psobject</i>
 The object to be written to file. {may be piped}
 A command, expression or variable that contains the objects.
 -force 
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 
 -noClobber 
 Do not overwrite (replace the contents) of an existing file. 
 By default Out-File will overwrite an existing file without warning.
 If both -Append and -NoClobber are specified, the output is appended.
 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/out-file.html","System Utility, File Manipulation",
"Out-GridView","Send output to an interactive table."," Out-GridView [-InputObject <i>psobject</i>] [-Title <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -InputObject <i>psobject</i>
 Input object to be displayed
 If a collection of objects are specified, Out-GridView will treat
 the collection as one collection object, and will display one row
 that represents the entire collection.
 To display the each object in a collection, use a pipeline operator (|)
 to send objects to Out-GridView.
 -Title <i>string</i>
 The text that appears in the title bar of the Out-GridView window. 
 By default, the title bar displays the command that invokes Out-GridView.
 -passthru (PowerShell 3.0)
 Adds an OK/Cancel button to the gridview allowing one or more items to be selected
 and returned back to the pipeline (select multiple items with the Ctrl key.
 <p>Standard Aliases for Out-GridView: <b>ogv</b></p>
 <p>Key features of Grid-View are: Resizable columns, proportionally spaced fonts and the ability to click on a column header to sort the entire grid by that column. Grouping and basic filtering are also available with a right click. To filter a particular column prefix the search with the column name e.g. status:stopped</p>
","https://ss64.com/ps/out-gridview.html","System Utility",
"ogv","Send output to an interactive table."," Out-GridView [-InputObject <i>psobject</i>] [-Title <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -InputObject <i>psobject</i>
 Input object to be displayed
 If a collection of objects are specified, Out-GridView will treat
 the collection as one collection object, and will display one row
 that represents the entire collection.
 To display the each object in a collection, use a pipeline operator (|)
 to send objects to Out-GridView.
 -Title <i>string</i>
 The text that appears in the title bar of the Out-GridView window. 
 By default, the title bar displays the command that invokes Out-GridView.
 -passthru (PowerShell 3.0)
 Adds an OK/Cancel button to the gridview allowing one or more items to be selected
 and returned back to the pipeline (select multiple items with the Ctrl key.
 <p>Standard Aliases for Out-GridView: <b>ogv</b></p>
 <p>Key features of Grid-View are: Resizable columns, proportionally spaced fonts and the ability to click on a column header to sort the entire grid by that column. Grouping and basic filtering are also available with a right click. To filter a particular column prefix the search with the column name e.g. status:stopped</p>
","https://ss64.com/ps/out-gridview.html","System Utility",
"Out-Host","Send output to the host."," Out-Host [-inputObject <i>psobject</i>] [-paging] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>psobject</i>
 The object(s) to be written to the console. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 {may also be piped}
 -paging 
 Display one page of output at a time, and wait for user input before 
 displaying more. By default, all output is displayed on a single page. 
 The page size is determined by the characteristics of the host.
","https://ss64.com/ps/out-host.html","System Utility",
"oh   ","Send output to the host."," Out-Host [-inputObject <i>psobject</i>] [-paging] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>psobject</i>
 The object(s) to be written to the console. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 {may also be piped}
 -paging 
 Display one page of output at a time, and wait for user input before 
 displaying more. By default, all output is displayed on a single page. 
 The page size is determined by the characteristics of the host.
","https://ss64.com/ps/out-host.html","System Utility",
"Out-Null","Send output to null."," Out-Null [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>psobject</i>
 The object that will be sent to null (deleted). {may be piped}
 A command, expression or variable that contains the objects.
","https://ss64.com/ps/out-null.html","System Utility",
"Out-Printer","Send the output to a printer."," Out-Printer [[-name] <i>string</i>] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The printer name, if omitted will go to default printer.
 -inputObject <i>psobject</i>
 The object to be sent to the printer {may be piped}
","https://ss64.com/ps/out-printer.html","System Utility, Printing",
"lp","Send the output to a printer."," Out-Printer [[-name] <i>string</i>] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The printer name, if omitted will go to default printer.
 -inputObject <i>psobject</i>
 The object to be sent to the printer {may be piped}
","https://ss64.com/ps/out-printer.html","System Utility, Printing",
"Out-String","Send objects to the host as strings."," Out-String [-inputObject <i>psobject</i>] [-width <i>int</i>]
 [-stream] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>psobject</i>
 The object to be written to file. A variable, command or expression that gets the objects.
 Use for flat collections, nested collections may need to be unwrapped and passed through the pipe.
 {may also be piped}
 -width <i>int</i>
 The number of characters in each line of output. Any additional characters are truncated, not wrapped.
 The default is determined by the host, for PowerShell.exe this is 80 (characters).
 -stream 
 Send the strings for each object separately. 
 By default, the strings for each object are accumulated
 and sent as a single string.
","https://ss64.com/ps/out-string.html","System Utility",
"Get-Package","Return a list of all software packages installed using Package Management.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Find-Package","Find software packages in available package sources.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Install-Package","Install one or more software packages."," Install-Package [<b>-Name</b>] <i>String[]</i> [-RequiredVersion <i>String</i>] [-MinimumVersion <i>String</i>] [-MaximumVersion <i>String</i>]
 [-AllVersions] [-Source <i>String[]</i>] [-Credential <i>PSCredential</i>] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>]
 [-Force] [-ForceBootstrap]
 [-ProviderName {msi | NuGet | msu | Programs | PowerShellGet | psl | chocolatey}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Install-Package [<b>-InputObject</b>] <i>SoftwareIdentity</i>[] [-AllVersions] [-Credential <i>PSCredential</i>] 
 [-Force] [-ForceBootstrap] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Install-Package [-AllVersions] [-AllowPrereleaseVersions] [-ConfigFile <i>String</i>] [-Contains <i>String</i>] 
 [-Credential <i>PSCredential</i>] [-Destination <i>String</i>] [-ExcludeVersion] [-FilterOnTag <i>String[]</i>]
 [-Headers <i>String[]</i>] [-Force] [-ForceBootstrap] [-Proxy <Uri>] [-ProxyCredential <i>PSCredential</i>]
 [-Scope {CurrentUser | AllUsers}] [-SkipDependencies] [-SkipValidate]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Install-Package [-AcceptLicense] [-AllVersions] [-AllowClobber] [-Command <i>String[]</i>] [-Credential <i>PSCredential</i>] 
 [<b>-DscResource</b> <i>String[]</i> ] [-Filter <i>String</i>] [-Force] [-ForceBootstrap]
 [-Includes {DscResource | Cmdlet | Function | Workflow | RoleCapability}] [-RoleCapability <i>String[]</i>]
 [-InstallUpdate] [-<span class=""dotted"">NoPathUpdate</span>] [-PackageManagementProvider <i>String</i>] 
 [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>] [-PublishLocation <i>String</i>]
 [-Scope {CurrentUser | AllUsers}] [-ScriptPublishLocation <i>String</i>]
 [-ScriptSourceLocation <i>String</i>] [-SkipPublisherCheck] [-Tag <i>String[]</i>]
 [-Type {Module | Script | All}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -AcceptLicense
 Automatically accept the license agreement during installation.
 -AdditionalArguments <i>String[]</i>
 One or more additional arguments for installation.
 
 -AllVersions
 Indicates that this cmdlet installs all available versions of the package.
 By default, Install-Package only installs the newest available version.
 
 -AllowClobber
 Override warning messages about conflicts with existing commands.
 Overwrite any existing commands that have the same name as commands being installed.
 
 -AllowPrereleaseVersions
 Allow the installation of packages marked as prerelease.
 
 -Command <i>String[]</i>
 One or more commands for which Find-Package searches.
 
 -ConfigFile <i>String</i>
 A path that contains a configuration file.
 
 -Confirm
 Prompt for confirmation before running the cmdlet.
 
 -Contains <i>String</i>
 Get objects if the -Contains parameter specifies a value that matches any of the object's property values.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to access the computer and run commands.
 Type a user name, such as User64, Domain01\User64, or enter a PSCredential object, generated by
 the Get-Credential cmdlet. If you enter a user name, you will be prompted for the password.
 When the -Credential parameter isn’t specified, Install-Package will use the current user.
 
 -Destination <i>String</i>
 A path to an input object.
 
 -DscResource <i>String[]</i>
 One or more Desired State Configuration (DSC) resources that are searched by Install-Package.
 Use the Find-DscResource cmdlet to find DSC resources.
 
 -ExcludeVersion
 Switch to exclude the version number in the folder path.
 
 -Filter <i>String</i>
 Terms to search for within the Name and Description properties.
 
 -FilterOnTag <i>String[]</i>
 A tag that filters results and excludes results that don’t contain the specified tag.
 
 -Force
 Force the command to run without asking for user confirmation.
 Override any restrictions that prevent Install-Package from succeeding, with the exception of security.
 
 -ForceBootstrap
 Force PackageManagement to automatically install the package provider for the specified package.
 
 -Headers <i>String[]</i>
 Specifies the package headers.
 
 -IncludeSystemComponent
 Include system components in the results.
 
 -IncludeWindowsInstaller
 Include the Windows installer in the results.
 
 -Includes <i>String[]</i>
 Whether Install-Package should find all package types. 
 Accepted values: Cmdlet, DscResource, Function, RoleCapability, Workflow
 
 -InputObject <i>SoftwareIdentity[]</i>
 Specifies a package by using the package's SoftwareIdentity type.
 Accepts pipeline input.
 Find-Package outputs a SoftwareIdentity object.
 
 -InstallUpdate
 Install updates.
 
 -MaximumVersion <i>String</i>
 The maximum allowed version of the package that you want to find. If you do not specify this 
 parameter, Install-Package installs the package's newest version.
 
 -MinimumVersion <i>String</i>
 The minimum allowed version of the package that you want to find. If you do not add this parameter, Install-Package
 will install the package's newest version that satisfies any version specified by the -MaximumVersion parameter.
 
 -Name <i>String[]</i>
 One or more package names. Multiple names must be separated by commas.
 
 -NoPathUpdate
 NoPathUpdate only applies to the Install-Script cmdlet.
 NoPathUpdate is a dynamic parameter added by the provider and isn’t supported by Install-Package.
 
 -PackageManagementProvider <i>String</i>
 The name of the Package Management provider.
 
 -ProviderName <i>String[]</i>
 One or more package provider names to which to scope your package search. You can get package 
 provider names by running Get-PackageProvider.
 
 -Proxy <i>Uri</i>
 A proxy server for the request, rather than connecting directly to an internet resource.
 -ProxyCredential <i>PSCredential</i>
 A user account that has permission to use the proxy server specified by the -Proxy parameter.
 -PublishLocation <i>String</i>
 A location for publishing the package.
 -RequiredVersion <i>String</i>
 Specifies the exact allowed version of the package that you want to install. If you do not add this parameter, 
 Install-Package installs the newest available version of the package that also satisfies any maximum version 
 specified by the MaximumVersion parameter.
 -RoleCapability <i>String[]</i>
 An array of role capabilities.
 -Scope <i>String</i>
 Specifies the scope to which to install the package.
 Accepted values: CurrentUser, AllUsers
 -ScriptPublishLocation <i>String</i>
 The path to a script's published location.
 -ScriptSourceLocation <i>String</i>
 The script source location.
 -SkipDependencies
 Skip the installation of software dependencies.
 -SkipPublisherCheck
 Allow a package version that is newer than your installed version.
 For example, an installed package that is digitally signed by a trusted publisher but a new version isn’t digitally signed.
 -SkipValidate
 Skip validating the credentials of a package.
 -Source <i>String[]</i>
 Specifies one or more package sources. Multiple package source names must be separated by commas. You can get 
 package source names by running the Get-PackageSource cmdlet.
 -Tag <i>String[]</i>
 One or more strings to search for in the package metadata.
 
 -Type <i>String</i>
 Whether to search for packages with a module, a script, or both. 
 Accepted values: Module, Script, All
 -WhatIf
 Describe what would happen if you executed the command, without actually executing the command.
","https://ss64.com/ps/install-package.html","System Administration",
"Uninstall-Package","Uninstall one or more software packages.","Not Available","Not Available","Not Available","System Administration",
"Install-PackageProvider","Install one or more Package Management package providers.","Not Available","Not Available","Not Available","System Administration",
"Param","Script Parameters.","Not Available","Not Available","https://ss64.com/ps/syntax-args.html","System Utility","Command Execution, Scripting"
"Get-Partition","Return a list of partition objects.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"New-Partition","Create a new partition on an existing Disk object.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Resize-Partition","Resize a partition and the underlying file system.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Set-Partition","Set attributes of a partition: active, read-only, offline.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Convert-Path","Convert a ps path to a provider path."," Convert-Path [-path] <i>string</i>[] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Convert-Path [-literalPath] <i>string</i>[] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/convert-path.html","System Utility",
"cvpa","Convert a ps path to a provider path."," Convert-Path [-path] <i>string</i>[] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
 Convert-Path [-literalPath] <i>string</i>[] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/convert-path.html","System Utility",
"Join-Path","Combine a path and one or more child-paths."," Join-Path [-path] <i>string</i>[] [-childPath] <i>string</i> [-resolve]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]
 The main path (or paths) to which the child-path is appended.
 Wildcards are permitted. {may be piped}
 -childPath <i>string</i>
 The elements to append to the value of Path.
 Wildcards are permitted. {may be piped}
 -resolve 
 Display the items that are referenced by the joined path.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/join-path.html","System Utility",
"Resolve-Path","Resolves the wildcards in a path."," Resolve-Path <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-credential <i>PSCredential</i>] [-Relative]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]
 The PowerShell path (or paths) to resolve
 Wildcards are permitted. {may be piped}
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Relative
 Return a relative path.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/resolve-path.html","System Utility",
"rvpa","Resolves the wildcards in a path."," Resolve-Path <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-credential <i>PSCredential</i>] [-Relative]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]
 The PowerShell path (or paths) to resolve
 Wildcards are permitted. {may be piped}
 -literalPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -Relative
 Return a relative path.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/resolve-path.html","System Utility",
"Split-Path","Return part of a path."," Split-Path [-path] <i>string</i>[] [<i>SplitLocationParam</i>]
 [-literalPath <i>string</i>[]] [-resolve] [-UseTransaction]
 [-credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]
 The path(s) to be split.{may be piped}
 Wildcards are permitted.
 -LiteralPath <i>string</i>[]
 The paths to be split.
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 <i>SplitLocationParam</i>
 One of: -parent, -qualifier, -noQualifier, -leaf or -isAbsolute
 -parent Return the parent container of the item (parent folder)
 -qualifier Return the drive/qualifier of the specified path. (C: or HKCU:)
 -noQualifier Return the path without the drive/qualifier (\path\to\resource).
 -leaf Return the last item or container in the path.(filename)
 -IsAbsolute Returns TRUE if the path is absolute and FALSE if it is relative.
 (An absolute path has a length greater than zero and does not
 use a dot ( . ) to indicate the current path.)
 -Resolve 
 Display the items that are referenced by the resulting split path instead
 of displaying the path elements.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/split-path.html","System Utility",
"Test-Path","Return true if the path exists, otherwise return false."," Test-Path <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [-pathType <i>TestPathType</i> ] [-isValid]
 [-include <i>string</i>[]] [-exclude <i>string</i>[]] [-Filter <i>string</i>]
 [-credential <i>PSCredential</i>] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>[]</i>
 The PowerShell path (or paths) to test
 Wildcards are permitted. {may be piped}
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -PathType <i>TestPathType</i>
 One of: Container, Leaf or Any
 Container = The parent container of the item (parent folder)
 Leaf = The last item or container in the path.(filename)
 Any = Either a container or a leaf.
 -isValid
 Return TRUE if the path syntax is valid, even if elements of the path
 don’t exist.
 -include <i>string</i>
 Test only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -Filter <i>string</i>
 A filter in the provider's format or language.
 The value of this parameter qualifies the Path parameter.
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/test-path.html","System Utility",
"Pause","Pause and display the message &quot;Press Enter to continue...&quot;"," pause</pre>
","Not Available","https://ss64.com/ps/pause.html","System Utility",
"Invoke-Pester","Invoke Pester to recursively run all tests.","Not Available","Not Available","Not Available","System Utility",
"Export-PfxCertificate","Export a certificate or a PFXData object to a PFX file.","Not Available","Not Available","Not Available","System Utility","Certificate"
"Get-PfxCertificate","Get pfx certificate information."," Get-PfxCertificate [-filePath] <i>string</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -filePath 
 The full path to the .pfx file of the secured file. (may be piped)
","https://ss64.com/ps/get-pfxcert.html","System Administration, Enumeration",
"Get-PhysicalDisk","Retrieve a list of Physical Disk objects.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Remove-PhysicalDisk","Remove a physical disk from a specified storage pool.","Not Available","Not Available","Not Available","System Administration",
"Set-PhysicalDisk","Set attributes on a specific physical disk.","Not Available","Not Available","Not Available","System Administration",
"Get-PnpDevice","Return information about PnP devices.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Powershell","Launch a PowerShell session/run a script."," powershell[.exe] [-File <i>FilePath Args</i>] [-NoProfile]
 [-Command <b>{</b> - | <i>script-block</i> [-args <i>arg-array</i>] <b>|</b> <i>string</i> [<i>CommandParameters</i>] <b>}</b> ]
 [-PSConsoleFile <i>file</i> | -Version <i>version</i>] [-NoExit] [-Sta] [-Mta]
 [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}]
 [-NoLogo] [-WindowStyle <i>Style</i>] [-NonInteractive]
 [EncodedCommand <i>Base64EncodedCommand</i>] [-ExecutionPolicy <i>ExecutionPolicy</i>]
 
 powershell[.exe] -Help | -? | /?
"," -File Execute a script file in the local scope (&quot;execution policy for the session.
 -Help, -?, /? Display Help
","https://ss64.com/ps/powershell.html","System Utility","Command Execution, Scripting"
"Add-Printer","Add a printer to the specified computer.","Not Available","Not Available","Not Available","Printing",
"Get-Printer","Retrieve a list of printers installed on a computer.","Not Available","Not Available","Not Available","Printing, Enumeration",
"Remove-Printer","Remove a printer from the specified computer.","Not Available","Not Available","Not Available","Printing",
"Set-Printer","Update the configuration of an existing printer.","Not Available","Not Available","Not Available","Printing",
"Add-PrinterDriver","Install a printer driver on the computer.","Not Available","Not Available","Not Available","Printing",
"Add-PrinterPort","Install a printer port on the computer.","Not Available","Not Available","Not Available","Printing",
"Get-PrintJob","Retrieve a list of print jobs from the specified printer."," Get-PrintJob [-PrinterName] <i>String</i>
 [-ComputerName <i>String</i>] [-CimSession <i>CimSession</i>[]] [-ID <i>UInt32</i>]
 [-ThrottleLimit <i>Int32</i>] [-AsJob] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PrintJob [-PrinterObject] <i>CimInstance</i>
 [-ComputerName <i>String</i>] [-CimSession <i>CimSession</i>[]] [-ID <i>UInt32</i>]
 [-ThrottleLimit <i>Int32</i>] [-AsJob] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsJob
 Run the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.
 -CimSession
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -ComputerName
 The name of the computer from which to retrieve the print job information.
 -ID The <i>ID</i> of the print job to retrieve. You can use wildcard characters.
 -PrinterName
 The name of the printer from which to retrieve the print job information.
 -PrinterObject
 The printer <b>object</b> from which to retrieve the print job information.
 -ThrottleLimit
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit
 for the cmdlet based on the number of CIM cmdlets that are running on the computer.
 The throttle limit applies only to the current cmdlet, not to the session or to the computer.
","https://ss64.com/ps/get-printjob.html","Printing, Enumeration",
"Process","Function PROCESS block.","Not Available","Not Available","https://ss64.com/ps/syntax-function-input.html",,
"Get-Process","Get a list of processes on a machine."," Get-Process [[<b>-name</b>] <i>string</i>[]] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-id</b> <i>Int32</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-inputObject</b> <i>Process</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 The -Name is optional.
 
 -inputObject 
 Accept process object(s) as input to Get-Process. 
 A variable, command or expression that returns the process object(s)
 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 -ComputerName <i>string</i>[]
 Get the processes running on the specified computers.
 The default is the local computer. 
 Type the NetBIOS name, an IP address, or a fully qualified domain name
 of one or more computers. 
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -FileVersionInfo
 Get the file version information for the program that runs in the process. 
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 Using this parameter is equivalent to getting the MainModule.FileVersionInfo property
 of each process object. When you use -FileVersionInfo, Get-Process returns a FileVersionInfo object
 (System.Diagnostics.FileVersionInfo), not a process object. So in this case, you cannot pipe 
 the output to a cmdlet that expects a process object, such as Stop-Process.
 -Module
 Get the modules that have been loaded by the processes.
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 This parameter is equivalent to getting the Modules property of each process object.
 When you use this parameter, Get-Process returns a ProcessModule object
 (System.Diagnostics.ProcessModule), not a process object. So in this case, you cannot pipe
 the output of the command to a cmdlet that expects a process object, such as Stop-Process.
 If both -Module and -FileVersionInfo are specified in the same command,
 Get-Process returns a FileVersionInfo object with information about the file version of all modules.
","https://ss64.com/ps/get-process.html","System Administration, Enumeraiton",
"ps","Get a list of processes on a machine."," Get-Process [[<b>-name</b>] <i>string</i>[]] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-id</b> <i>Int32</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-inputObject</b> <i>Process</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 The -Name is optional.
 
 -inputObject 
 Accept process object(s) as input to Get-Process. 
 A variable, command or expression that returns the process object(s)
 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 -ComputerName <i>string</i>[]
 Get the processes running on the specified computers.
 The default is the local computer. 
 Type the NetBIOS name, an IP address, or a fully qualified domain name
 of one or more computers. 
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -FileVersionInfo
 Get the file version information for the program that runs in the process. 
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 Using this parameter is equivalent to getting the MainModule.FileVersionInfo property
 of each process object. When you use -FileVersionInfo, Get-Process returns a FileVersionInfo object
 (System.Diagnostics.FileVersionInfo), not a process object. So in this case, you cannot pipe 
 the output to a cmdlet that expects a process object, such as Stop-Process.
 -Module
 Get the modules that have been loaded by the processes.
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 This parameter is equivalent to getting the Modules property of each process object.
 When you use this parameter, Get-Process returns a ProcessModule object
 (System.Diagnostics.ProcessModule), not a process object. So in this case, you cannot pipe
 the output of the command to a cmdlet that expects a process object, such as Stop-Process.
 If both -Module and -FileVersionInfo are specified in the same command,
 Get-Process returns a FileVersionInfo object with information about the file version of all modules.
","https://ss64.com/ps/get-process.html","System Administration, Enumeraiton",
"gps","Get a list of processes on a machine."," Get-Process [[<b>-name</b>] <i>string</i>[]] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-id</b> <i>Int32</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Process <b>-inputObject</b> <i>Process</i>[] [-ComputerName <i>string</i>[]]
 [-FileVersionInfo] [-Module] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 The -Name is optional.
 
 -inputObject 
 Accept process object(s) as input to Get-Process. 
 A variable, command or expression that returns the process object(s)
 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 -ComputerName <i>string</i>[]
 Get the processes running on the specified computers.
 The default is the local computer. 
 Type the NetBIOS name, an IP address, or a fully qualified domain name
 of one or more computers. 
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -FileVersionInfo
 Get the file version information for the program that runs in the process. 
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 Using this parameter is equivalent to getting the MainModule.FileVersionInfo property
 of each process object. When you use -FileVersionInfo, Get-Process returns a FileVersionInfo object
 (System.Diagnostics.FileVersionInfo), not a process object. So in this case, you cannot pipe 
 the output to a cmdlet that expects a process object, such as Stop-Process.
 -Module
 Get the modules that have been loaded by the processes.
 On Windows Vista and later versions of Windows, you must open PowerShell with
 the &quot;Run as administrator&quot; option to use this parameter on processes that you do not own.
 This parameter is equivalent to getting the Modules property of each process object.
 When you use this parameter, Get-Process returns a ProcessModule object
 (System.Diagnostics.ProcessModule), not a process object. So in this case, you cannot pipe
 the output of the command to a cmdlet that expects a process object, such as Stop-Process.
 If both -Module and -FileVersionInfo are specified in the same command,
 Get-Process returns a FileVersionInfo object with information about the file version of all modules.
","https://ss64.com/ps/get-process.html","System Administration, Enumeraiton",
"Debug-Process","Attach a debugger to a running process.","Not Available","Not Available","Not Available","System Administration",
"Start-Process","Start one or more processes."," Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-LoadUserProfile]
 [-NoNewWindow] [-PassThru] [-RedirectStandardError <i>FileNameString</i>]
 [-RedirectStandardInput <i>FileNameString</i>] [-RedirectStandardOutput <i>FileNameString</i>]
 [-UseNewEnvironment] [-Wait] [-WindowStyle <i>ProcessWindowStyle</i>]
 [-WorkingDirectory <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-PassThru] [<b>-Verb</b> <i>string</i>] [-Wait]
 [-WindowStyle {Normal | Hidden | Minimized | Maximized}]
 [-WorkingDirectory <i>DirectoryString</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>string</i>[]
 Specify parameters or parameter values to use when starting the process.
 The parameter name (-ArgumentList) is optional.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 Type a user-name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a
 PSCredential object, such as one from the Get-Credential cmdlet.
 By default, the cmdlet uses the credentials of the current user.
 -FilePath <i>string</i>
 The path (optional) and file name of the program that runs in the
 process. Enter the name of an executable file or of a document,
 such as a .txt or .doc file, that is associated with a program.
 Required.
 If only a file name is given, use -WorkingDirectory to specify the path.
 -LoadUserProfile
 Load the Windows user profile stored in the HKEY_USERS registry key
 for the current user. The default value is FALSE.
 This parameter does not affect the PowerShell profiles. (See about_Profiles.)
 -NoNewWindow
 Prevent the process from running in a new window.
 By default, the process runs in a new window.
 You cannot use the -NoNewWindow and -WindowStyle parameters in the same command.
 -PassThru
 Return a process object for each process that the cmdlet started.
 By default, this cmdlet does not generate any output.
 -RedirectStandardError <i>FileNameString</i>
 Send any errors generated by the process to a file that you specify.
 Enter the path and file name. By default, the errors are displayed in the console.
 -RedirectStandardInput <i>FileNameString</i>
 Read input from the specified file.
 Enter the path and file name of the input file.
 By default, the process gets its input from the keyboard.
 -RedirectStandardOutput <i>FileNameString</i>
 Sends the output generated by the process to a file.
 Enter the path and file name. 
 By default, the output is displayed in the console.
 -UseNewEnvironment
 Use new environment variables specified for the process.
 By default, the started process runs with the environment variables
 specified for the computer and user.
 -Verb <i>string</i>
 A verb to be used when starting the process, such as Edit, Open, or Print.
 Each File type has a set of verbs that you can use.
 Some common verbs are: 
 .cmd Edit, Open, Print, Runas
 .exe Open, RunAs 
 .txt Open, Print, PrintTo
 .wav Open, Play 
 Runas will run the new process with elevated (admin) privileges and this
 will open in a separate window.
 To find the verbs that can be used with the process, use the Verbs property of the object.
 -Wait
 Wait for the specified process to complete before accepting more input.
 This parameter suppresses the command prompt or retains the window
 until the process completes.
 -WindowStyle <i>ProcessWindowStyle</i>
 The state of the windows used for the process.
 Valid values are <u>Normal</u>, Hidden, Minimized, and Maximized.
 -WorkingDirectory <i>DirectoryString</i>
 The file directory that holds the executable file or document that runs
 in the process. The default is the current directory.
","https://ss64.com/ps/start-process.html","System Administration",
"start","Start one or more processes."," Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-LoadUserProfile]
 [-NoNewWindow] [-PassThru] [-RedirectStandardError <i>FileNameString</i>]
 [-RedirectStandardInput <i>FileNameString</i>] [-RedirectStandardOutput <i>FileNameString</i>]
 [-UseNewEnvironment] [-Wait] [-WindowStyle <i>ProcessWindowStyle</i>]
 [-WorkingDirectory <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-PassThru] [<b>-Verb</b> <i>string</i>] [-Wait]
 [-WindowStyle {Normal | Hidden | Minimized | Maximized}]
 [-WorkingDirectory <i>DirectoryString</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>string</i>[]
 Specify parameters or parameter values to use when starting the process.
 The parameter name (-ArgumentList) is optional.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 Type a user-name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a
 PSCredential object, such as one from the Get-Credential cmdlet.
 By default, the cmdlet uses the credentials of the current user.
 -FilePath <i>string</i>
 The path (optional) and file name of the program that runs in the
 process. Enter the name of an executable file or of a document,
 such as a .txt or .doc file, that is associated with a program.
 Required.
 If only a file name is given, use -WorkingDirectory to specify the path.
 -LoadUserProfile
 Load the Windows user profile stored in the HKEY_USERS registry key
 for the current user. The default value is FALSE.
 This parameter does not affect the PowerShell profiles. (See about_Profiles.)
 -NoNewWindow
 Prevent the process from running in a new window.
 By default, the process runs in a new window.
 You cannot use the -NoNewWindow and -WindowStyle parameters in the same command.
 -PassThru
 Return a process object for each process that the cmdlet started.
 By default, this cmdlet does not generate any output.
 -RedirectStandardError <i>FileNameString</i>
 Send any errors generated by the process to a file that you specify.
 Enter the path and file name. By default, the errors are displayed in the console.
 -RedirectStandardInput <i>FileNameString</i>
 Read input from the specified file.
 Enter the path and file name of the input file.
 By default, the process gets its input from the keyboard.
 -RedirectStandardOutput <i>FileNameString</i>
 Sends the output generated by the process to a file.
 Enter the path and file name. 
 By default, the output is displayed in the console.
 -UseNewEnvironment
 Use new environment variables specified for the process.
 By default, the started process runs with the environment variables
 specified for the computer and user.
 -Verb <i>string</i>
 A verb to be used when starting the process, such as Edit, Open, or Print.
 Each File type has a set of verbs that you can use.
 Some common verbs are: 
 .cmd Edit, Open, Print, Runas
 .exe Open, RunAs 
 .txt Open, Print, PrintTo
 .wav Open, Play 
 Runas will run the new process with elevated (admin) privileges and this
 will open in a separate window.
 To find the verbs that can be used with the process, use the Verbs property of the object.
 -Wait
 Wait for the specified process to complete before accepting more input.
 This parameter suppresses the command prompt or retains the window
 until the process completes.
 -WindowStyle <i>ProcessWindowStyle</i>
 The state of the windows used for the process.
 Valid values are <u>Normal</u>, Hidden, Minimized, and Maximized.
 -WorkingDirectory <i>DirectoryString</i>
 The file directory that holds the executable file or document that runs
 in the process. The default is the current directory.
","https://ss64.com/ps/start-process.html","System Administration",
"saps","Start one or more processes."," Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-LoadUserProfile]
 [-NoNewWindow] [-PassThru] [-RedirectStandardError <i>FileNameString</i>]
 [-RedirectStandardInput <i>FileNameString</i>] [-RedirectStandardOutput <i>FileNameString</i>]
 [-UseNewEnvironment] [-Wait] [-WindowStyle <i>ProcessWindowStyle</i>]
 [-WorkingDirectory <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Process [-FilePath] <i>string</i> [[-ArgumentList] <i>string</i>[]]
 [-PassThru] [<b>-Verb</b> <i>string</i>] [-Wait]
 [-WindowStyle {Normal | Hidden | Minimized | Maximized}]
 [-WorkingDirectory <i>DirectoryString</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>string</i>[]
 Specify parameters or parameter values to use when starting the process.
 The parameter name (-ArgumentList) is optional.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 Type a user-name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a
 PSCredential object, such as one from the Get-Credential cmdlet.
 By default, the cmdlet uses the credentials of the current user.
 -FilePath <i>string</i>
 The path (optional) and file name of the program that runs in the
 process. Enter the name of an executable file or of a document,
 such as a .txt or .doc file, that is associated with a program.
 Required.
 If only a file name is given, use -WorkingDirectory to specify the path.
 -LoadUserProfile
 Load the Windows user profile stored in the HKEY_USERS registry key
 for the current user. The default value is FALSE.
 This parameter does not affect the PowerShell profiles. (See about_Profiles.)
 -NoNewWindow
 Prevent the process from running in a new window.
 By default, the process runs in a new window.
 You cannot use the -NoNewWindow and -WindowStyle parameters in the same command.
 -PassThru
 Return a process object for each process that the cmdlet started.
 By default, this cmdlet does not generate any output.
 -RedirectStandardError <i>FileNameString</i>
 Send any errors generated by the process to a file that you specify.
 Enter the path and file name. By default, the errors are displayed in the console.
 -RedirectStandardInput <i>FileNameString</i>
 Read input from the specified file.
 Enter the path and file name of the input file.
 By default, the process gets its input from the keyboard.
 -RedirectStandardOutput <i>FileNameString</i>
 Sends the output generated by the process to a file.
 Enter the path and file name. 
 By default, the output is displayed in the console.
 -UseNewEnvironment
 Use new environment variables specified for the process.
 By default, the started process runs with the environment variables
 specified for the computer and user.
 -Verb <i>string</i>
 A verb to be used when starting the process, such as Edit, Open, or Print.
 Each File type has a set of verbs that you can use.
 Some common verbs are: 
 .cmd Edit, Open, Print, Runas
 .exe Open, RunAs 
 .txt Open, Print, PrintTo
 .wav Open, Play 
 Runas will run the new process with elevated (admin) privileges and this
 will open in a separate window.
 To find the verbs that can be used with the process, use the Verbs property of the object.
 -Wait
 Wait for the specified process to complete before accepting more input.
 This parameter suppresses the command prompt or retains the window
 until the process completes.
 -WindowStyle <i>ProcessWindowStyle</i>
 The state of the windows used for the process.
 Valid values are <u>Normal</u>, Hidden, Minimized, and Maximized.
 -WorkingDirectory <i>DirectoryString</i>
 The file directory that holds the executable file or document that runs
 in the process. The default is the current directory.
","https://ss64.com/ps/start-process.html","Start one or more processes.",
"Stop-Process","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Administration",
"kill","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Administration",
"spps","Stop a running process."," Stop-Process -name <i>string</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process [-id] <i>Int32</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Stop-Process -inputObject <i>Process</i>[] [-passThru] [-Force]
 [-confirm] [-whatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Stop-Process. 
 A variable, command or expression that returns the process object(s)
 -PassThru 
 Pass the object created by Stop-Process along the pipeline. 
 -Force
 Stop the specified processes without prompting for confirmation.
 By default, Stop-Process prompts for confirmation before stopping
 any process that is not owned by the current user.
 To find the owner of a process, use Get-WmiMethod to get
 a Win32_Process object that represents the process, and then
 use the GetOwner method of the object.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-process.html","System Administration",
"Wait-Process","Wait for a process to stop."," Wait-Process -name <i>string</i>[] [[-Timeout] <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Wait-Process [-id] <i>Int32</i>[] [[-Timeout] <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Wait-Process -inputObject <i>Process</i>[] [[-Timeout] <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 Process name(s)
 Separate multiple process names with commas or use wildcard characters. 
 -id <i>Int32</i>
 Process ID(s) (PID). Use commas to separate multiple PIDs.
 To find the PID of a process, type get-process.
 
 -inputObject 
 Accept a process object as input to Wait-Process. 
 A variable, command or expression that returns the process object(s)
 -Timeout <i>int</i> The maximum time, in seconds, that Wait-Process will wait for the processes to stop.
 When this interval expires, the command displays a non-terminating error that
 lists the processes that are still running, and ends the wait.
","https://ss64.com/ps/wait-process.html","System Administration",
"Enable-PSBreakpoint","Enable a breakpoint in the current console."," Enable-PSBreakpoint [-Id] <i>Int32</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to enable. Enter a variable that contains breakpoint
 objects or a command that gets breakpoint objects, (Get-PSBreakpoint).
 You can also pipe breakpoint objects.
 -Id <i>Int32</i>[]
 Enable breakpoints with the specified breakpoint IDs.
 Enter the IDs or a variable that contains the IDs. 
 You cannot pipe IDs to Disable-PSBreakpoint.
 -PassThru
 Return an object representing the enabled breakpoints.
 By default, this cmdlet does not generate any output.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/enable-psbreakpoint.html","System Utility",
"ebp","Enable a breakpoint in the current console."," Enable-PSBreakpoint [-Id] <i>Int32</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to enable. Enter a variable that contains breakpoint
 objects or a command that gets breakpoint objects, (Get-PSBreakpoint).
 You can also pipe breakpoint objects.
 -Id <i>Int32</i>[]
 Enable breakpoints with the specified breakpoint IDs.
 Enter the IDs or a variable that contains the IDs. 
 You cannot pipe IDs to Disable-PSBreakpoint.
 -PassThru
 Return an object representing the enabled breakpoints.
 By default, this cmdlet does not generate any output.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/enable-psbreakpoint.html","System Utility",
"Disable-PSBreakpoint","Disable a breakpoint in the current console."," Disable-PSBreakpoint [-Id] <i>Int32</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disable-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to disable. Enter a variable that contains breakpoint
 objects or a command that gets breakpoint objects, (Get-PSBreakpoint).
 You can also pipe breakpoint objects.
 -Id <i>Int32</i>[]
 Disable breakpoints with the specified breakpoint IDs.
 Enter the IDs or a variable that contains the IDs. 
 You cannot pipe IDs to Disable-PSBreakpoint.
 -PassThru
 Return an object representing the enabled breakpoints.
 By default, this cmdlet does not generate any output.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/disable-psbreakpoint.html","System Utility",
"dbp","Disable a breakpoint in the current console."," Disable-PSBreakpoint [-Id] <i>Int32</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disable-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-PassThru] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to disable. Enter a variable that contains breakpoint
 objects or a command that gets breakpoint objects, (Get-PSBreakpoint).
 You can also pipe breakpoint objects.
 -Id <i>Int32</i>[]
 Disable breakpoints with the specified breakpoint IDs.
 Enter the IDs or a variable that contains the IDs. 
 You cannot pipe IDs to Disable-PSBreakpoint.
 -PassThru
 Return an object representing the enabled breakpoints.
 By default, this cmdlet does not generate any output.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/disable-psbreakpoint.html","System Utility",
"Get-PSBreakpoint","Get the currently set breakpoints."," Get-PSBreakpoint [[-Script] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint -Command <i>string</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint [-Id] <i>Int32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint [-Type] <i>BreakpointType</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint -Variable <i>string</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Get command breakpoints that are set on the specified command names.
 Enter the command names, such as the name of a cmdlet or function.
 -Id <i>Int32</i>[]
 Get the breakpoints with the specified breakpoint IDs.
 Enter the IDs in a comma-separated list. 
 You can pipe breakpoint IDs to Get-PSBreakpoint.
 -Script <i>string</i>[]
 Get only the breakpoints in the specified scripts.
 Enter the path (optional) and names of one or more script 
 files. The default location is the current directory.
 
 -Type <i>BreakpointType</i>[]
 Get only breakpoints of the specified types.
 Enter one or more types. Valid values are Line, Command, 
 and Variable. You can also pipe breakpoint types to Get-PSBreakpoint.
 
 -Variable <i>string</i>[]
 Get variable breakpoints that are set on the specified variable names. 
 Enter the variable names without dollar signs.
","https://ss64.com/ps/get-psbreakpoint.html","System Utility",
"gbp","Get the currently set breakpoints."," Get-PSBreakpoint [[-Script] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint -Command <i>string</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint [-Id] <i>Int32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint [-Type] <i>BreakpointType</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-PSBreakpoint -Variable <i>string</i>[] [-Script <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Command <i>string</i>[]
 Get command breakpoints that are set on the specified command names.
 Enter the command names, such as the name of a cmdlet or function.
 -Id <i>Int32</i>[]
 Get the breakpoints with the specified breakpoint IDs.
 Enter the IDs in a comma-separated list. 
 You can pipe breakpoint IDs to Get-PSBreakpoint.
 -Script <i>string</i>[]
 Get only the breakpoints in the specified scripts.
 Enter the path (optional) and names of one or more script 
 files. The default location is the current directory.
 
 -Type <i>BreakpointType</i>[]
 Get only breakpoints of the specified types.
 Enter one or more types. Valid values are Line, Command, 
 and Variable. You can also pipe breakpoint types to Get-PSBreakpoint.
 
 -Variable <i>string</i>[]
 Get variable breakpoints that are set on the specified variable names. 
 Enter the variable names without dollar signs.
","https://ss64.com/ps/get-psbreakpoint.html","System Utility",
"Set-PSBreakpoint","Set a breakpoint on a line, command, or variable."," Set-PSBreakpoint <b>-Command</b> <i>string</i>[][[-Script] <i>string</i>[]]
 [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Set-PSBreakpoint [<b>-Script</b>] <i>string</i>[] [-Line] <i>Int32</i>[]
 [[-Column] <i>int</i>] [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Set-PSBreakpoint <b>-Variable</b> <i>string</i>[] [-Script <i>string</i>[]]
 [-Mode {Read | <u>Write</u> | ReadWrite}] [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>scriptblock</i>
 Commands that run at each breakpoint instead of breaking.
 Enter a script block that contains the commands. Use this parameter to set
 conditional breakpoints or to perform other tasks, such as testing or logging.
 If this parameter is omitted, or no action is specified, execution stops at the
 breakpoint, and the debugger starts.
 When -Action is used, the Action script block runs at each breakpoint.
 Execution does not stop unless the script block includes the Break keyword.
 If you use the Continue keyword in the script block, execution resumes until the next breakpoint.
 see about_Script_Blocks, about_Break, and about_Continue.
 -Column <i>int</i>
 The column number of the column in the script file on which execution stops.
 Enter only one column number. The default is column 1. 
 The Column value is used with the value of the Line parameter to specify the breakpoint.
 If the Line parameter specifies multiple lines, the Column parameter sets a breakpoint
 at the specified column on each of the specified lines.
 PowerShell stops executing before the statement or expression that includes the character at
 the specified line and column position. 
 Columns are counted from the top left margin beginning with column number 1 (not 0).
 If you specify a column that does not exist in the script, an error is not declared, but
 the breakpoint is never executed.
 -Command <i>string</i>[]
 Set a command breakpoint.
 Enter command names, such as &quot;Get-Process&quot; or function names. Wildcards are permitted.
 Execution stops just before each instance of each command is executed.
 If the command is a function, execution stops each time the function is called and at
 each BEGIN, PROCESS, and END section.
 -Line <i>Int32</i>[]
 Set a line breakpoint in a script.
 Enter one or more line numbers, separated by commas. 
 PowerShell stops immediately before executing the statement that begins on each
 of the specified lines.
 Lines are counted from the top left margin of the script file beginning with line
 number 1 (not 0). If you specify a blank line, execution stops before the next non-blank
 line. If the line is out of range, the breakpoint is never hit.
 -Mode {Read | <u>Write</u> | ReadWrite}
 The mode of access that triggers variable breakpoints.
 The default is Write.
 This parameter is valid only when the -Variable parameter is used in the command.
 The mode applies to all breakpoints set in the command.
 Valid values are:
 Write Stop execution immediately before a new value is written to the variable.
 Read Stops execution when the variable is read
 when its value is accessed, either to be assigned, displayed, or used.
 In read mode, execution does not stop when the value of the variable changes.
 ReadWrite Stop execution when the variable is read or written.
 -Script <i>string</i>[]
 Set a breakpoint in each of the specified script files.
 Enter the paths and file names of one or more script files.
 If the files are in the current directory, you can omit the path. Wildcards are permitted.
 By default, variable breakpoints and command breakpoints are set on
 any command that runs in the current session.
 This parameter is required only when setting a line breakpoint.
 
 -Variable <i>string</i>[]
 Set a variable breakpoint.
 Enter a comma-separated list of variables without dollar signs ($).
 Use the Mode parameters to determine the mode of access that triggers
 the breakpoints. The default mode, Write, stops execution just before a new
 value is written to the variable.
","https://ss64.com/ps/set-psbreakpoint.html","System Utility",
"sbp","Set a breakpoint on a line, command, or variable."," Set-PSBreakpoint <b>-Command</b> <i>string</i>[][[-Script] <i>string</i>[]]
 [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Set-PSBreakpoint [<b>-Script</b>] <i>string</i>[] [-Line] <i>Int32</i>[]
 [[-Column] <i>int</i>] [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Set-PSBreakpoint <b>-Variable</b> <i>string</i>[] [-Script <i>string</i>[]]
 [-Mode {Read | <u>Write</u> | ReadWrite}] [-Action <i>scriptblock</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>scriptblock</i>
 Commands that run at each breakpoint instead of breaking.
 Enter a script block that contains the commands. Use this parameter to set
 conditional breakpoints or to perform other tasks, such as testing or logging.
 If this parameter is omitted, or no action is specified, execution stops at the
 breakpoint, and the debugger starts.
 When -Action is used, the Action script block runs at each breakpoint.
 Execution does not stop unless the script block includes the Break keyword.
 If you use the Continue keyword in the script block, execution resumes until the next breakpoint.
 see about_Script_Blocks, about_Break, and about_Continue.
 -Column <i>int</i>
 The column number of the column in the script file on which execution stops.
 Enter only one column number. The default is column 1. 
 The Column value is used with the value of the Line parameter to specify the breakpoint.
 If the Line parameter specifies multiple lines, the Column parameter sets a breakpoint
 at the specified column on each of the specified lines.
 PowerShell stops executing before the statement or expression that includes the character at
 the specified line and column position. 
 Columns are counted from the top left margin beginning with column number 1 (not 0).
 If you specify a column that does not exist in the script, an error is not declared, but
 the breakpoint is never executed.
 -Command <i>string</i>[]
 Set a command breakpoint.
 Enter command names, such as &quot;Get-Process&quot; or function names. Wildcards are permitted.
 Execution stops just before each instance of each command is executed.
 If the command is a function, execution stops each time the function is called and at
 each BEGIN, PROCESS, and END section.
 -Line <i>Int32</i>[]
 Set a line breakpoint in a script.
 Enter one or more line numbers, separated by commas. 
 PowerShell stops immediately before executing the statement that begins on each
 of the specified lines.
 Lines are counted from the top left margin of the script file beginning with line
 number 1 (not 0). If you specify a blank line, execution stops before the next non-blank
 line. If the line is out of range, the breakpoint is never hit.
 -Mode {Read | <u>Write</u> | ReadWrite}
 The mode of access that triggers variable breakpoints.
 The default is Write.
 This parameter is valid only when the -Variable parameter is used in the command.
 The mode applies to all breakpoints set in the command.
 Valid values are:
 Write Stop execution immediately before a new value is written to the variable.
 Read Stops execution when the variable is read
 when its value is accessed, either to be assigned, displayed, or used.
 In read mode, execution does not stop when the value of the variable changes.
 ReadWrite Stop execution when the variable is read or written.
 -Script <i>string</i>[]
 Set a breakpoint in each of the specified script files.
 Enter the paths and file names of one or more script files.
 If the files are in the current directory, you can omit the path. Wildcards are permitted.
 By default, variable breakpoints and command breakpoints are set on
 any command that runs in the current session.
 This parameter is required only when setting a line breakpoint.
 
 -Variable <i>string</i>[]
 Set a variable breakpoint.
 Enter a comma-separated list of variables without dollar signs ($).
 Use the Mode parameters to determine the mode of access that triggers
 the breakpoints. The default mode, Write, stops execution just before a new
 value is written to the variable.
","https://ss64.com/ps/set-psbreakpoint.html","System Utility",
"Remove-PSBreakpoint","Delete breakpoints from the current console."," Remove-PSBreakpoint [-Id] <i>Int32</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to delete.
 Enter a variable that contains breakpoint objects or a command that
 gets breakpoint objects, such as a Get-PSBreakpoint command.
 (May be piped)  -Id Int32[]
 Delete breakpoints with the specified breakpoint IDs.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describes what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/remove-psbreakpoint.html","System Utility",
"rbp","Delete breakpoints from the current console."," Remove-PSBreakpoint [-Id] <i>Int32</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSBreakpoint [-Breakpoint] <i>Breakpoint</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Breakpoint <i>Breakpoint</i>[]
 The breakpoints to delete.
 Enter a variable that contains breakpoint objects or a command that
 gets breakpoint objects, such as a Get-PSBreakpoint command.
 (May be piped)  -Id Int32[]
 Delete breakpoints with the specified breakpoint IDs.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describes what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/remove-psbreakpoint.html","System Utility",
"Get-PSCallStack","Display the current call stack."," Get-PSCallStack [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-pscallstack.html","System Utility",
"gcs   ","Display the current call stack."," Get-PSCallStack [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-pscallstack.html","System Utility",
"Get-PSDrive","Get drive information (DriveInfo)."," Get-PSDrive { [[-name] <i>string</i>[]] | [-literalName] <i>string</i>[] }<br> [-Force] [-pSProvider <i>string</i>[]] [-scope <i>string</i>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 Get only the specified drives.
 Type the drive name or letter without a colon (:),
 separate multiple names with commas.
 -literalName <i>string</i>
 The Drive name which will be used exactly as typed.
 No characters are interpreted as wildcards. If the name includes escape
 characters, enclose it in single quotation marks.
 -PSProvider 
 Get only the drives supported by the specified PowerShell provider.
 Type the name of a provider, such as:
 FileSystem, Registry, or Certificate.
 
 -scope 
 The scope within which to search for the drive.
 Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative
 to the current scope (0 through the number of scopes, where 0 is the
 current scope and 1 is its parent).
 &quot;Local&quot; is the default. For more information, see about_Scopes.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-psdrive.html","Enumeration",
"gdr   ","Get drive information (DriveInfo)."," Get-PSDrive { [[-name] <i>string</i>[]] | [-literalName] <i>string</i>[] }<br> [-Force] [-pSProvider <i>string</i>[]] [-scope <i>string</i>]
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 Get only the specified drives.
 Type the drive name or letter without a colon (:),
 separate multiple names with commas.
 -literalName <i>string</i>
 The Drive name which will be used exactly as typed.
 No characters are interpreted as wildcards. If the name includes escape
 characters, enclose it in single quotation marks.
 -PSProvider 
 Get only the drives supported by the specified PowerShell provider.
 Type the name of a provider, such as:
 FileSystem, Registry, or Certificate.
 
 -scope 
 The scope within which to search for the drive.
 Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative
 to the current scope (0 through the number of scopes, where 0 is the
 current scope and 1 is its parent).
 &quot;Local&quot; is the default. For more information, see about_Scopes.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/get-psdrive.html","Enumeration",
"New-PSDrive","Create a mapped network drive."," New-PSDrive [-name] <i>string</i> -PSProvider <i>string</i> [-Persist]
 [-root] <i>string</i> [-description <i>string</i>] [-scope <i>string</i>]
 [-credential <i>PSCredential</i>] [-WhatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 The PowerShell drive name to be added.
 This is not limited to drive letters,any valid string may be used.
 PowerShell drives names are case-sensitive.
 -PSProvider 
 The name of the provider, if omitted you will be prompted.
 e.g. FileSystem, Registry or Certificate.
 type transaction.
","https://ss64.com/ps/new-psdrive.html","System Administration","Disk/Volume Management"
"mount","Create a mapped network drive."," New-PSDrive [-name] <i>string</i> -PSProvider <i>string</i> [-Persist]
 [-root] <i>string</i> [-description <i>string</i>] [-scope <i>string</i>]
 [-credential <i>PSCredential</i>] [-WhatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 The PowerShell drive name to be added.
 This is not limited to drive letters,any valid string may be used.
 PowerShell drives names are case-sensitive.
 -PSProvider 
 The name of the provider, if omitted you will be prompted.
 e.g. FileSystem, Registry or Certificate.
 type transaction.
","https://ss64.com/ps/new-psdrive.html","System Administration","Disk/Volume Management"
"ndr","Create a mapped network drive."," New-PSDrive [-name] <i>string</i> -PSProvider <i>string</i> [-Persist]
 [-root] <i>string</i> [-description <i>string</i>] [-scope <i>string</i>]
 [-credential <i>PSCredential</i>] [-WhatIf] [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name 
 The PowerShell drive name to be added.
 This is not limited to drive letters,any valid string may be used.
 PowerShell drives names are case-sensitive.
 -PSProvider 
 The name of the provider, if omitted you will be prompted.
 e.g. FileSystem, Registry or Certificate.
 type transaction.
","https://ss64.com/ps/new-psdrive.html","System Administration","Disk/Volume Management"
"Remove-PSDrive","Remove a provider/drive from its location."," Remove-PSDrive <b>{</b> [-name] <i>string</i>[] <b>|</b> [-literalName] <i>string</i>[] <b>}</b><br> [-pSProvider <i>string</i>[]] [-scope <i>string</i>] [-force]
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>[]
 The PowerShell drive name(s) to remove, separate multiple names with commas.
 Do not type a colon (:) after the drive name.
 -literalName <i>string</i>[]
 The Drive name which will be used exactly as typed.
 No characters are interpreted as wildcards. If the name includes escape
 characters, enclose it in single quotation marks.
 -pSProvider 
 Remove all of the drives associated with the specified PowerShell provider.
 e.g. FileSystem, Registry or Certificate.
 -scope 
 An index that identifies the scope from which the drive is being removed.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -force will override a files read-only
 attribute, but will not change file permissions.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-psdrive.html","System Administration","Disk/Volume Management"
"rdr","Remove a provider/drive from its location."," Remove-PSDrive <b>{</b> [-name] <i>string</i>[] <b>|</b> [-literalName] <i>string</i>[] <b>}</b><br> [-pSProvider <i>string</i>[]] [-scope <i>string</i>] [-force]
 [-Confirm] [-WhatIf] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>[]
 The PowerShell drive name(s) to remove, separate multiple names with commas.
 Do not type a colon (:) after the drive name.
 -literalName <i>string</i>[]
 The Drive name which will be used exactly as typed.
 No characters are interpreted as wildcards. If the name includes escape
 characters, enclose it in single quotation marks.
 -pSProvider 
 Remove all of the drives associated with the specified PowerShell provider.
 e.g. FileSystem, Registry or Certificate.
 -scope 
 An index that identifies the scope from which the drive is being removed.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -force will override a files read-only
 attribute, but will not change file permissions.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/remove-psdrive.html","System Administration","Disk/Volume Management"
"Get-PSProvider","Get information for the specified provider."," Get-PSProvider [[-psProvider] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -psProvider  Name(s) of the Windows PowerShell provider.
","https://ss64.com/ps/get-psprovider.html","Enumeration",
"Set-PSdebug","Turn script debugging on or off."," Set-PSDebug [-trace <i>int</i>] [-step] [-strict] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-PSDebug [-off] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -trace <i>int</i>
 Set the trace level:
 0 - Off
 1 - trace script lines as they are executed
 2 - trace script lines, variable assignments, function calls and scripts.
 -step 
 Turn on script stepping. Before each line is run, PowerShell will prompt
 to stop, continue or enter a new interpreter level to inspect the state
 of the script. (Step automatically sets Trace =1)
 -strict 
 Throw an exception if a variable is referenced before being assigned a value.
 -off 
 Turn off all debugging features.
","https://ss64.com/ps/set-psdebug.html","Logging",
"Disable-PSRemoting","Disable remote session configuration on the local computer."," <span class=""code"">Disable</span>-PSRemoting [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Force
 Suppress all user prompts. By default, you are prompted to confirm each operation.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
","https://ss64.com/ps/disable-psremoting.html","System Administration, Remote Connection",
"Enable-PSRemoting","Configure the computer to receive remote commands."," Enable-PSRemoting [-Force] [-SkipNetworkProfileCheck]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Force
 Suppress all user prompts. By default, you are prompted to confirm each operation.
 -SkipNetworkProfileCheck
 Enable remoting on client versions of Windows when the computer is on a public network.
 This parameter enables a firewall rule for public networks that allows remote access only from
 computers in the same local subnet.
 This parameter has no effect on server versions of Windows, which, by default, have a
 local subnet firewall rule for public networks. If the local subnet firewall rule is disabled on
 a server version of Windows, Enable-PSRemoting re-enables it, regardless of the value of this parameter.
 To remove the local subnet restriction and enable remote access from all locations on public networks,
 use the Set-NetFirewallRule cmdlet in the NetSecurity module. (PowerShell 3.0+)
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe the command without actually executing it.
","https://ss64.com/ps/enable-psremoting.html","System Administration, Remote Connection",
"Get-PSRepository","Get PowerShell repositories.","Not Available","Not Available","Not Available","Enumeration",
"Register-PSRepository","Register a PowerShell repository.","Not Available","Not Available","Not Available","System Administration",
"Set-PSRepository","Set values for a registered repository.","Not Available","Not Available","Not Available","System Administration",
"Connect-PSSession","Reconnect to a disconnected session."," Connect-PSSession [<b>-ConnectionUri</b>] <i>Uri</i>[] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>] [-Name <i>String</i>[]]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ConnectionUri] <i>Uri</i>[] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [<b>-ComputerName</b>] <i>String</i>[] [-ApplicationName <i>String</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>] [-Name <i>String</i>[]] [-Port <i>Int32</i>] 
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ComputerName] <i>String</i>[] [-ApplicationName <i>String</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>][-Port <i>Int32</i>] 
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [<b>-Id</b>] <i>Int32</i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-Name</b> <i>String</i>[] [-ThrottleLimit <i>Int32</i> [-Confirm]] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [-Session] <i><b>PSSession</b></i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI).
 When you use -ConnectionURI, the remote destination can return an instruction to redirect to
 a different URI. By default, PowerShell does not redirect connections.
 You can also limit the number of times the connection is redirected by changing the
 MaximumConnectionRedirectionCount session option value. Use the MaximumRedirection parameter of the
 New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property of the $PSSessionOption
 preference variable. The default value is 5.
 -ApplicationName <i>string</i>
 The name of an application. This cmdlet connects only to sessions that use the specified application.
 
 Enter the application name segment of the connection URI. For example, in the following connection URI, the 
 application name is WSMan: `http://localhost:5985/WSMAN`. The application name of a session is stored in the 
 Runspace.ConnectionInfo.AppName property of the session.
 
 The value of this parameter is used to select and filter sessions. It does not change the application that the 
 session uses.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 Basic Send username and password in clear text.
 Default Use the authentication method implemented by WS-Management protocol. This is the default.
 Digest Challenge-response scheme using a server-specified data string for the challenge.
 Kerberos Authenticate by using Kerberos certificates.
 Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 NegotiateWithImplicitCredential Use the credentials cached on the PSSession computer.
 CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 (Windows Vista or later versions.)
 -CertificateThumbprint <i>string</i>
 The certificate thumbprint of the digital public key certificate (X509) of a user account
 that has permission to perform this action.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command
 in the PowerShell Cert: drive.
 -ComputerName <i>string</i>
 Specifies the computers on which the disconnected sessions are stored. Sessions are stored on the computer 
 that is at the server-side or receiving end of a connection. The default is the local computer.
 
 Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters 
 are not permitted. To specify the local computer, type the computer name, localhost, or a dot (.)
 -ConfigurationName <i>string</i>
 Connect only to sessions that use the specified session configuration.
 
 Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify 
 only the configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. 
 The configuration name of a session is stored in the ConfigurationName property of the session.
 
 The value of this parameter is used to select and filter sessions. It does not change the session 
 configuration that the session uses.
 
 For more information about session configurations, see about_Session_Configurations.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -ConnectionURI <i>Uri</i>
 Specifies a Uniform Resource Identifier (URI) that defines the connection endpoint for the
 interactive session. The URI must be fully qualified. 
 The format of this string is as follows: 
 <i>Transport</i>://<i>ComputerName</i>:<i>Port</i>/<i>ApplicationName</i>
 The default value is as follows:
 http://localhost:5985/WSMAN
 Valid values for the Transport segment of the URI are HTTP and HTTPS.
 If you do not specify a ConnectionURI, you can use the UseSSL, ComputerName, Port, and
 ApplicationName parameters to specify the URI values.
 If you specify a connection URI with a Transport segment, but do not specify a port,
 the session is created with standards ports: 80 for HTTP and 443 for HTTPS.
 To use the default ports for PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.
 If the destination computer redirects the connection to a different URI, PowerShell will prevent
 the redirection unless you use -AllowRedirection in the command.
 -Credential <i>PSCredential</i>
 A user account that has permission to connect to the disconnected session. default=current user.
 e.g. User64, Domain01\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by Get-Credential. When you type a user name, you will be prompted for a password.
 -Id <i>int</i>
 The IDs of the disconnected sessions. (from Get-PSSession)
 The Id parameter works only when the disconnected session was previously connected to the current session.
 This parameter is valid, but not effective, when the session is stored on the local computer,
 but was not connected to the current session.
 -InstanceId <i>Guid</i>
 The instance IDs of the disconnected sessions.
 
 The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.
 
 The instance ID is stored in the InstanceID property of the PSSession.
 -Name <i>string</i>
 Specifies the friendly names of the disconnected sessions.
 -Port <i>int</i>
 The network port on the remote computer that is used to reconnect to the session.
 The default ports are 5985, which is the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.
 Before using an alternate port, configure the WinRM listener on the remote computer to listen at that
 port. Use the following commands to configure the listener:
 1. `Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse`
 2. `New-Item -Path WSMan:\Localhost\listener -Transport http -Address bashcurl.txt bashdb.csv bashdb.sh bashregex.txt CLI_Class.docx CLI_Class.odt CMDParse.py CMDParse.txt findTEST.py gtfoREGEX.txt lolbas.csv lolbasREGEX.txt mandb.sh mansyntax.txt pscmd.txt pscurl.txt psdb.sh psdescription.txt pslinks.txt psparameters.txt pssyntax.txt scratch.txt TestDoc.txt vt wincmddb.csv wincmddb.sh wincmdregex.txt -Port <i>port-number</i>`
 Do not use the Port parameter unless you must. The port setting in the command applies to
 all computers or sessions on which the command runs.
 An alternate port setting might prevent the command from running on all computers.
 -Session <i>PSSession</i>
 Specifies the disconnected sessions. Enter a variable that contains the PSSession objects or a command that 
 creates or gets the PSSession objects, such as a Get-PSSession command.
 -SessionOption <i>PSSessionOption</i>
 Set advanced options for the session. Enter a SessionOption object that you createusing New-PSSessionOption,
 or a hash table in which the keys are session option names and the values aresession option values.
 The default values for the options are determined by the value of the $PSSessionOption
 preference variable, if it is set. Otherwise, the session uses the system defaults.
 For information about the $PSSessionOption preference variable, see about_Preference_Variables.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all Windows PowerShell content transmitted over the network.
 UseSSL is an additional protection that sends the data across an HTTPS connection instead of
 an HTTP connection.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
 -ThrottleLimit <i>Int32</i>
 Specifies the maximum number of concurrent connections that can be established to run this command. If you 
 omit this parameter or enter a value of 0, the default value, 32, is used.
 
 The throttle limit applies only to the current command, not to the session or to the computer.
 
 -UseSSL
 Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected 
 session. By default, SSL is not used.
 
 WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an 
 additional protection that sends the data across an HTTPS connection instead of an HTTP connection.
 
 If you use this parameter, but SSL is not available on the port that is used for the command, the command 
 fails.
 
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/connect-pssession.html","System Administration, Remote Connection",
"cnsn","Reconnect to a disconnected session."," Connect-PSSession [<b>-ConnectionUri</b>] <i>Uri</i>[] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>] [-Name <i>String</i>[]]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ConnectionUri] <i>Uri</i>[] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [<b>-ComputerName</b>] <i>String</i>[] [-ApplicationName <i>String</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>] [-Name <i>String</i>[]] [-Port <i>Int32</i>] 
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ComputerName] <i>String</i>[] [-ApplicationName <i>String</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>String</i>] [-ConfigurationName <i>String</i>] [-Credential <i>PSCredential</i>][-Port <i>Int32</i>] 
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [<b>-Id</b>] <i>Int32</i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession <b>-Name</b> <i>String</i>[] [-ThrottleLimit <i>Int32</i> [-Confirm]] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Connect-PSSession [-Session] <i><b>PSSession</b></i>[] [-ThrottleLimit <i>Int32</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI).
 When you use -ConnectionURI, the remote destination can return an instruction to redirect to
 a different URI. By default, PowerShell does not redirect connections.
 You can also limit the number of times the connection is redirected by changing the
 MaximumConnectionRedirectionCount session option value. Use the MaximumRedirection parameter of the
 New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property of the $PSSessionOption
 preference variable. The default value is 5.
 -ApplicationName <i>string</i>
 The name of an application. This cmdlet connects only to sessions that use the specified application.
 
 Enter the application name segment of the connection URI. For example, in the following connection URI, the 
 application name is WSMan: `http://localhost:5985/WSMAN`. The application name of a session is stored in the 
 Runspace.ConnectionInfo.AppName property of the session.
 
 The value of this parameter is used to select and filter sessions. It does not change the application that the 
 session uses.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 Basic Send username and password in clear text.
 Default Use the authentication method implemented by WS-Management protocol. This is the default.
 Digest Challenge-response scheme using a server-specified data string for the challenge.
 Kerberos Authenticate by using Kerberos certificates.
 Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 NegotiateWithImplicitCredential Use the credentials cached on the PSSession computer.
 CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 (Windows Vista or later versions.)
 -CertificateThumbprint <i>string</i>
 The certificate thumbprint of the digital public key certificate (X509) of a user account
 that has permission to perform this action.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command
 in the PowerShell Cert: drive.
 -ComputerName <i>string</i>
 Specifies the computers on which the disconnected sessions are stored. Sessions are stored on the computer 
 that is at the server-side or receiving end of a connection. The default is the local computer.
 
 Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters 
 are not permitted. To specify the local computer, type the computer name, localhost, or a dot (.)
 -ConfigurationName <i>string</i>
 Connect only to sessions that use the specified session configuration.
 
 Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify 
 only the configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. 
 The configuration name of a session is stored in the ConfigurationName property of the session.
 
 The value of this parameter is used to select and filter sessions. It does not change the session 
 configuration that the session uses.
 
 For more information about session configurations, see about_Session_Configurations.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -ConnectionURI <i>Uri</i>
 Specifies a Uniform Resource Identifier (URI) that defines the connection endpoint for the
 interactive session. The URI must be fully qualified. 
 The format of this string is as follows: 
 <i>Transport</i>://<i>ComputerName</i>:<i>Port</i>/<i>ApplicationName</i>
 The default value is as follows:
 http://localhost:5985/WSMAN
 Valid values for the Transport segment of the URI are HTTP and HTTPS.
 If you do not specify a ConnectionURI, you can use the UseSSL, ComputerName, Port, and
 ApplicationName parameters to specify the URI values.
 If you specify a connection URI with a Transport segment, but do not specify a port,
 the session is created with standards ports: 80 for HTTP and 443 for HTTPS.
 To use the default ports for PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.
 If the destination computer redirects the connection to a different URI, PowerShell will prevent
 the redirection unless you use -AllowRedirection in the command.
 -Credential <i>PSCredential</i>
 A user account that has permission to connect to the disconnected session. default=current user.
 e.g. User64, Domain01\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by Get-Credential. When you type a user name, you will be prompted for a password.
 -Id <i>int</i>
 The IDs of the disconnected sessions. (from Get-PSSession)
 The Id parameter works only when the disconnected session was previously connected to the current session.
 This parameter is valid, but not effective, when the session is stored on the local computer,
 but was not connected to the current session.
 -InstanceId <i>Guid</i>
 The instance IDs of the disconnected sessions.
 
 The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.
 
 The instance ID is stored in the InstanceID property of the PSSession.
 -Name <i>string</i>
 Specifies the friendly names of the disconnected sessions.
 -Port <i>int</i>
 The network port on the remote computer that is used to reconnect to the session.
 The default ports are 5985, which is the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.
 Before using an alternate port, configure the WinRM listener on the remote computer to listen at that
 port. Use the following commands to configure the listener:
 1. `Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse`
 2. `New-Item -Path WSMan:\Localhost\listener -Transport http -Address bashcurl.txt bashdb.csv bashdb.sh bashregex.txt CLI_Class.docx CLI_Class.odt CMDParse.py CMDParse.txt findTEST.py gtfoREGEX.txt lolbas.csv lolbasREGEX.txt mandb.sh mansyntax.txt pscmd.txt pscurl.txt psdb.sh psdescription.txt pslinks.txt psparameters.txt pssyntax.txt scratch.txt TestDoc.txt vt wincmddb.csv wincmddb.sh wincmdregex.txt -Port <i>port-number</i>`
 Do not use the Port parameter unless you must. The port setting in the command applies to
 all computers or sessions on which the command runs.
 An alternate port setting might prevent the command from running on all computers.
 -Session <i>PSSession</i>
 Specifies the disconnected sessions. Enter a variable that contains the PSSession objects or a command that 
 creates or gets the PSSession objects, such as a Get-PSSession command.
 -SessionOption <i>PSSessionOption</i>
 Set advanced options for the session. Enter a SessionOption object that you createusing New-PSSessionOption,
 or a hash table in which the keys are session option names and the values aresession option values.
 The default values for the options are determined by the value of the $PSSessionOption
 preference variable, if it is set. Otherwise, the session uses the system defaults.
 For information about the $PSSessionOption preference variable, see about_Preference_Variables.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all Windows PowerShell content transmitted over the network.
 UseSSL is an additional protection that sends the data across an HTTPS connection instead of
 an HTTP connection.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
 -ThrottleLimit <i>Int32</i>
 Specifies the maximum number of concurrent connections that can be established to run this command. If you 
 omit this parameter or enter a value of 0, the default value, 32, is used.
 
 The throttle limit applies only to the current command, not to the session or to the computer.
 
 -UseSSL
 Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected 
 session. By default, SSL is not used.
 
 WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an 
 additional protection that sends the data across an HTTPS connection instead of an HTTP connection.
 
 If you use this parameter, but SSL is not available on the port that is used for the command, the command 
 fails.
 
 -WhatIf
 Show what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/connect-pssession.html","System Administration, Remote Connection",
"Disconnect-PSSession","Disconnect from a session."," Disconnect-PSSession [<b>-Id</b>] <i>Int32</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm] 
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession <b>-Name</b> <i>String</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession [-Session] <i><b>PSSession</b></i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id <i>int</i>
 An array of IDs of sessions that this cmdlet disconnects. Type one or more IDs, separated by commas,
 or use the range operator (..) to specify a range of IDs
 To get the ID of a session, use Get-PSSession.
 -OutputBufferingMode <OutputBufferingMode>
 Specifies how command output is managed in the disconnected session when the output buffer is full.
 The default value is Block.
 
 If the command in the disconnected session is returning output and the output buffer fills, the value of this 
 parameter effectively determines whether the command continues to run while the session is disconnected.
 A value of Block suspends the command until the session is reconnected. A value of Drop allows the command to 
 complete, although data might be lost. When using the Drop value, redirect the command output to a file on disk.
 
 The acceptable values for this parameter are:
 
 - Block. When the output buffer is full, execution is suspended until the buffer is clear.
 
 - Drop. When the output buffer is full, execution continues. As new output is saved, the oldest output is 
 discarded.
 
 - None. No output buffering mode is specified. The value of the OutputBufferingMode property of the session 
 configuration is used for the disconnected session.
 -Session <i>PSSession</i>
 An array of sessions. Enter PSSession objects, such as those that the New-PSSession cmdlet returns. 
 You can also pipe a PSSession object to Disconnect-PSSession.
 Get-PSSession can get all PSSession objects that end at a remote computer. These include PSSession objects
 that are disconnected and PSSession objects that are connected to other sessions on other computers.
 Disconnect-PSSession will only disconnect PSSessions that are connected to the current session.
 If you pipe other PSSession objects to Disconnect-PSSession , the Disconnect-PSSession command will fail.
 -ThrottleLimit <Int32>
 Set the throttle limit for the Disconnect-PSSession command.
 
 The throttle limit is the maximum number of concurrent connections that can be established to run this 
 command. If you omit this parameter or enter a value of 0, the default value, 32, is used.
 
 The throttle limit applies only to the current command, not to the session or to the computer.
 
 -WhatIf [<SwitchParameter>]
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/disconnect-pssession.html","System Administration, Remote Connection",
"dnsn","Disconnect from a session."," Disconnect-PSSession [<b>-Id</b>] <i>Int32</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession <b>-InstanceId</b> <i>Guid</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm] 
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession <b>-Name</b> <i>String</i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Disconnect-PSSession [-Session] <i><b>PSSession</b></i>[] [-IdleTimeoutSec <i>Int32</i>] [-Confirm]
 [-OutputBufferingMode {None | Drop | Block}] [-ThrottleLimit <i>Int32</i>] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id <i>int</i>
 An array of IDs of sessions that this cmdlet disconnects. Type one or more IDs, separated by commas,
 or use the range operator (..) to specify a range of IDs
 To get the ID of a session, use Get-PSSession.
 -OutputBufferingMode <OutputBufferingMode>
 Specifies how command output is managed in the disconnected session when the output buffer is full.
 The default value is Block.
 
 If the command in the disconnected session is returning output and the output buffer fills, the value of this 
 parameter effectively determines whether the command continues to run while the session is disconnected.
 A value of Block suspends the command until the session is reconnected. A value of Drop allows the command to 
 complete, although data might be lost. When using the Drop value, redirect the command output to a file on disk.
 
 The acceptable values for this parameter are:
 
 - Block. When the output buffer is full, execution is suspended until the buffer is clear.
 
 - Drop. When the output buffer is full, execution continues. As new output is saved, the oldest output is 
 discarded.
 
 - None. No output buffering mode is specified. The value of the OutputBufferingMode property of the session 
 configuration is used for the disconnected session.
 -Session <i>PSSession</i>
 An array of sessions. Enter PSSession objects, such as those that the New-PSSession cmdlet returns. 
 You can also pipe a PSSession object to Disconnect-PSSession.
 Get-PSSession can get all PSSession objects that end at a remote computer. These include PSSession objects
 that are disconnected and PSSession objects that are connected to other sessions on other computers.
 Disconnect-PSSession will only disconnect PSSessions that are connected to the current session.
 If you pipe other PSSession objects to Disconnect-PSSession , the Disconnect-PSSession command will fail.
 -ThrottleLimit <Int32>
 Set the throttle limit for the Disconnect-PSSession command.
 
 The throttle limit is the maximum number of concurrent connections that can be established to run this 
 command. If you omit this parameter or enter a value of 0, the default value, 32, is used.
 
 The throttle limit applies only to the current command, not to the session or to the computer.
 
 -WhatIf [<SwitchParameter>]
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/disconnect-pssession.html","System Administration, Remote Connection",
"Enter-PSSession","Start an interactive session with a remote computer."," Enter-PSSession [<b>-ComputerName</b>] <i>string</i> [-ApplicationName <i>string</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-Port <i>Int32</i>] [-UseSSL][-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-SessionOption <i>PSSessionOption</i>] [-EnableNetworkAccess] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[<b>-ConnectionUri</b>] <i>Uri</i>] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-EnableNetworkAccess]
 [-Credential <i>PSCredential</i>] [-SessionOption <i>PSSessionOption</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-VMId] <i>Guid</i> [-ConfigurationName <i>string</i>] -Credential <i>PSCredential</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-VMName] <i>string</i> [-ConfigurationName <i>string</i>] -Credential <i>PSCredential</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-ContainerId] <i>string</i> [-ConfigurationName <i>string</i>] [-RunAsAdministrator] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[-Id] <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-InstanceId <i>Guid</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-Name <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[-Session] <i>PSSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI).
 When you use -ConnectionURI, the remote destination can return an instruction to redirect to
 a different URI. By default, PowerShell does not redirect connections.
 You can also limit the number of times that the connection is redirected by setting the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable, or the
 MaximumConnectionRedirectionCount property of the value of the SessionOption parameter.
 The default value is 5. For more information, see New-PSSessionOption.
 -ApplicationName <i>string</i>
 The application name segment of the connection URI. Use -ApplicationName to specify the
 application name when you are not using -ConnectionURI.
 The default value is the value of the $PSSessionApplicationName preference variable on
 the local computer. If this variable is not defined, the default value is WSMAN.
 This value is appropriate for most uses. For more information, see about_Preference_Variables.
 The WinRM service uses the application name to select a listener to service the connection request.
 The value of this parameter should match the value of the URLPrefix property of a listener on
 the remote computer.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 Basic Send username and password in clear text.
 Default Use the authentication method implemented by WS-Management protocol. This is the default.
 Digest Challenge-response scheme using a server-specified data string for the challenge.
 Kerberos Authenticate by using Kerberos certificates.
 Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 NegotiateWithImplicitCredential Use the credentials cached on the PSSession computer.
 CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 (Windows Vista or later versions.)
 -CertificateThumbprint <i>string</i>
 The certificate thumbprint of the digital public key certificate (X509) of a user account
 that has permission to perform this action.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command
 in the PowerShell Cert: drive.
 -ComputerName <i>string</i>
 Start an interactive session with the specified remote computer.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 To use an IP address in the value of the ComputerName parameter, the command must include the
 Credential parameter. Also, the computer must be configured for HTTPS transport or the IP address
 of the remote computer must be included in the WinRM TrustedHosts list on the local computer.
 For more see Help about_Remote_Troubleshooting.
 Note: In Windows Vista and later versions of Windows, to include the local computer in the value
 of the -ComputerName parameter, you must start PowerShell with the &quot;Run as administrator&quot; option.
 The local computer is the default. You can pipe a value for ComputerName.
 When the remote computer is in a different domain, use a fully qualified domain name. 
 -ConfigurationName <i>string</i>
 The session configuration that is used for the interactive session.
 Enter a configuration name or the fully qualified resource URI for a session configuration.
 If you specify only the configuration name, the following schema URI is prepended:
 http://schemas.microsoft.com/powershell.
 The session configuration for a session is located on the remote computer.
 If the specified session configuration does not exist on the remote computer, the command fails.
 The default value is the value of the $PSSessionConfigurationName preference variable on the local computer.
 If this preference variable is not set, the default is Microsoft.PowerShell.
 For more information, see about_Preference_Variables.
 -ConnectionURI <i>Uri</i>
 Specifies a Uniform Resource Identifier (URI) that defines the connection endpoint for the
 interactive session. The URI must be fully qualified. 
 The format of this string is as follows: 
 <i>Transport</i>://<i>ComputerName</i>:<i>Port</i>/<i>ApplicationName</i>
 The default value is as follows:
 http://localhost:5985/WSMAN
 Valid values for the Transport segment of the URI are HTTP and HTTPS.
 If you do not specify a ConnectionURI, you can use the UseSSL, ComputerName, Port, and
 ApplicationName parameters to specify the URI values.
 If the destination computer redirects the connection to a different URI, PowerShell will prevent
 the redirection unless you use -AllowRedirection in the command.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain01\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by Get-Credential. When you type a user name, you will be prompted for a password.
 -Id <i>int</i>
 The ID of an existing session. (from Get-PSSession)
 Enter-PSSession uses the specified session for the interactive session.
 -InstanceId <i>Guid</i>
 The instance ID of an existing session. Enter-PSSession will then use the
 specified session for the interactive session.
 The instance ID is a GUID. To find the instance ID of a session, use Get-PSSession.
 You can also use the Session, Name, or ID parameters to specify an existing session.
 Or, you can use the ComputerName parameter to start a temporary session.
 -Name <i>string</i>
 The friendly name of an existing session. Enter-PSSession will then use the
 specified session for the interactive session.
 If the name that you specify matches more than one session, the command fails.
 You can also use the Session, InstanceID, or ID parameters to specify an existing session.
 Or, you can use the ComputerName parameter to start a temporary session.
 To establish a friendly name for a session, use the Name parameter of New-PSSession.
 -Port <i>int</i>
 The network port on the remote computer used for this command.
 The default is port 80 (the HTTP port).
 Before using an alternate port, configure the WinRM listener on the remote computer to listen at that
 port. Use the following commands to configure the listener:
 1. winrm delete winrm/config/listener?Address=*+Transport=HTTP
 2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port=&quot;<i>port-number</i>&quot;}
 Do not use the Port parameter unless you must. The port setting in the command applies to
 all computers or sessions on which the command runs.
 An alternate port setting might prevent the command from running on all computers.
 -Session <i>PSSession</i>
 A Windows PowerShell session (PSSession) to use for the interactive session.
 This parameter takes a session object.
 You can also use the Name, InstanceID, or ID parameters to specify a PSSession.
 Enter a variable that contains a session object or a command that creates or gets a
 session object, such as New-PSSession or Get-PSSession.
 Session objects may also be piped to Enter-PSSession.
 Submit only one PSSession with this parameter. If you enter a variable that contains more
 than one PSSession, the command fails.
 Exit-PSSession or the EXIT keyword, will end the interactive session, but the PSSession
 that you created remains open and available for use.
 -SessionOption <i>PSSessionOption</i>
 Set advanced options for the session. Enter a SessionOption object that you create
 using New-PSSessionOption.
 The default values for the options are determined by the value of the $PSSessionOption
 preference variable, if it is set. Otherwise, the session uses the system defaults.
 For information about the $PSSessionOption preference variable, see about_Preference_Variables.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all Windows PowerShell content transmitted over the network.
 UseSSL is an additional protection that sends the data across an HTTPS connection instead of
 an HTTP connection.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
","https://ss64.com/ps/enter-pssession.html","System Administration, Remote Connection",
"etsn","Start an interactive session with a remote computer."," Enter-PSSession [<b>-ComputerName</b>] <i>string</i> [-ApplicationName <i>string</i>]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-Port <i>Int32</i>] [-UseSSL][-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-SessionOption <i>PSSessionOption</i>] [-EnableNetworkAccess] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[<b>-ConnectionUri</b>] <i>Uri</i>] [-AllowRedirection]
 [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-EnableNetworkAccess]
 [-Credential <i>PSCredential</i>] [-SessionOption <i>PSSessionOption</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-VMId] <i>Guid</i> [-ConfigurationName <i>string</i>] -Credential <i>PSCredential</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-VMName] <i>string</i> [-ConfigurationName <i>string</i>] -Credential <i>PSCredential</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-ContainerId] <i>string</i> [-ConfigurationName <i>string</i>] [-RunAsAdministrator] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[-Id] <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-InstanceId <i>Guid</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [-Name <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Enter-PSSession [[-Session] <i>PSSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI).
 When you use -ConnectionURI, the remote destination can return an instruction to redirect to
 a different URI. By default, PowerShell does not redirect connections.
 You can also limit the number of times that the connection is redirected by setting the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable, or the
 MaximumConnectionRedirectionCount property of the value of the SessionOption parameter.
 The default value is 5. For more information, see New-PSSessionOption.
 -ApplicationName <i>string</i>
 The application name segment of the connection URI. Use -ApplicationName to specify the
 application name when you are not using -ConnectionURI.
 The default value is the value of the $PSSessionApplicationName preference variable on
 the local computer. If this variable is not defined, the default value is WSMAN.
 This value is appropriate for most uses. For more information, see about_Preference_Variables.
 The WinRM service uses the application name to select a listener to service the connection request.
 The value of this parameter should match the value of the URLPrefix property of a listener on
 the remote computer.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 Basic Send username and password in clear text.
 Default Use the authentication method implemented by WS-Management protocol. This is the default.
 Digest Challenge-response scheme using a server-specified data string for the challenge.
 Kerberos Authenticate by using Kerberos certificates.
 Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 NegotiateWithImplicitCredential Use the credentials cached on the PSSession computer.
 CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 (Windows Vista or later versions.)
 -CertificateThumbprint <i>string</i>
 The certificate thumbprint of the digital public key certificate (X509) of a user account
 that has permission to perform this action.
 Certificates are used in client certificate-based authentication.
 They can be mapped only to local user accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command
 in the PowerShell Cert: drive.
 -ComputerName <i>string</i>
 Start an interactive session with the specified remote computer.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 To use an IP address in the value of the ComputerName parameter, the command must include the
 Credential parameter. Also, the computer must be configured for HTTPS transport or the IP address
 of the remote computer must be included in the WinRM TrustedHosts list on the local computer.
 For more see Help about_Remote_Troubleshooting.
 Note: In Windows Vista and later versions of Windows, to include the local computer in the value
 of the -ComputerName parameter, you must start PowerShell with the &quot;Run as administrator&quot; option.
 The local computer is the default. You can pipe a value for ComputerName.
 When the remote computer is in a different domain, use a fully qualified domain name. 
 -ConfigurationName <i>string</i>
 The session configuration that is used for the interactive session.
 Enter a configuration name or the fully qualified resource URI for a session configuration.
 If you specify only the configuration name, the following schema URI is prepended:
 http://schemas.microsoft.com/powershell.
 The session configuration for a session is located on the remote computer.
 If the specified session configuration does not exist on the remote computer, the command fails.
 The default value is the value of the $PSSessionConfigurationName preference variable on the local computer.
 If this preference variable is not set, the default is Microsoft.PowerShell.
 For more information, see about_Preference_Variables.
 -ConnectionURI <i>Uri</i>
 Specifies a Uniform Resource Identifier (URI) that defines the connection endpoint for the
 interactive session. The URI must be fully qualified. 
 The format of this string is as follows: 
 <i>Transport</i>://<i>ComputerName</i>:<i>Port</i>/<i>ApplicationName</i>
 The default value is as follows:
 http://localhost:5985/WSMAN
 Valid values for the Transport segment of the URI are HTTP and HTTPS.
 If you do not specify a ConnectionURI, you can use the UseSSL, ComputerName, Port, and
 ApplicationName parameters to specify the URI values.
 If the destination computer redirects the connection to a different URI, PowerShell will prevent
 the redirection unless you use -AllowRedirection in the command.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain01\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by Get-Credential. When you type a user name, you will be prompted for a password.
 -Id <i>int</i>
 The ID of an existing session. (from Get-PSSession)
 Enter-PSSession uses the specified session for the interactive session.
 -InstanceId <i>Guid</i>
 The instance ID of an existing session. Enter-PSSession will then use the
 specified session for the interactive session.
 The instance ID is a GUID. To find the instance ID of a session, use Get-PSSession.
 You can also use the Session, Name, or ID parameters to specify an existing session.
 Or, you can use the ComputerName parameter to start a temporary session.
 -Name <i>string</i>
 The friendly name of an existing session. Enter-PSSession will then use the
 specified session for the interactive session.
 If the name that you specify matches more than one session, the command fails.
 You can also use the Session, InstanceID, or ID parameters to specify an existing session.
 Or, you can use the ComputerName parameter to start a temporary session.
 To establish a friendly name for a session, use the Name parameter of New-PSSession.
 -Port <i>int</i>
 The network port on the remote computer used for this command.
 The default is port 80 (the HTTP port).
 Before using an alternate port, configure the WinRM listener on the remote computer to listen at that
 port. Use the following commands to configure the listener:
 1. winrm delete winrm/config/listener?Address=*+Transport=HTTP
 2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port=&quot;<i>port-number</i>&quot;}
 Do not use the Port parameter unless you must. The port setting in the command applies to
 all computers or sessions on which the command runs.
 An alternate port setting might prevent the command from running on all computers.
 -Session <i>PSSession</i>
 A Windows PowerShell session (PSSession) to use for the interactive session.
 This parameter takes a session object.
 You can also use the Name, InstanceID, or ID parameters to specify a PSSession.
 Enter a variable that contains a session object or a command that creates or gets a
 session object, such as New-PSSession or Get-PSSession.
 Session objects may also be piped to Enter-PSSession.
 Submit only one PSSession with this parameter. If you enter a variable that contains more
 than one PSSession, the command fails.
 Exit-PSSession or the EXIT keyword, will end the interactive session, but the PSSession
 that you created remains open and available for use.
 -SessionOption <i>PSSessionOption</i>
 Set advanced options for the session. Enter a SessionOption object that you create
 using New-PSSessionOption.
 The default values for the options are determined by the value of the $PSSessionOption
 preference variable, if it is set. Otherwise, the session uses the system defaults.
 For information about the $PSSessionOption preference variable, see about_Preference_Variables.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used.
 WS-Management encrypts all Windows PowerShell content transmitted over the network.
 UseSSL is an additional protection that sends the data across an HTTPS connection instead of
 an HTTP connection.
 If you use this parameter, but SSL is not available on the port used for the command, the command fails.
","https://ss64.com/ps/enter-pssession.html","System Administration, Remote Connection",
"Exit-PSSession","End an interactive session with a remote computer."," Exit-PSSession [<i><a href=""common.html"">CommonParameters</a></i>] <i>ErrorLevel</i>
"," <i>ErrorLevel</i> An exit code to return between 0 and 65535.
 An exit code of 0 indicates success.
 <p>Standard Exit - Keyword, Exit a script or exit PowerShell.
","https://ss64.com/ps/exit-pssession.html","System Administration, Remote Connection",
"exsn","End an interactive session with a remote computer."," Exit-PSSession [<i><a href=""common.html"">CommonParameters</a></i>] <i>ErrorLevel</i>
"," <i>ErrorLevel</i> An exit code to return between 0 and 65535.
 An exit code of 0 indicates success.
 <p>Standard Exit - Keyword, Exit a script or exit PowerShell.
","https://ss64.com/ps/exit-pssession.html","System Administration, Remote Connection",
"Export-PSSession","Import commands and save them in a PowerShell module."," Export-PSSession [-Session] <i>PSSession</i> [-OutputModule] <i>string</i> 
 [[-CommandName] <i>string</i>[]] [[-FormatTypeName] <i>string</i>[]]
 [-AllowClobber] [-ArgumentList <i>Object</i>[]]
 [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | Script | All}]
 [-Encoding <i>string</i>] [-Force] [-Module <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowClobber
 Export the specified commands, even if they have the same names as
 commands in the current session.
 If you import a command with the same name as a command in the current session,
 the imported command hides or replaces the original commands.
 For more information, see about_Command_Precedence. 
 By default Export-PSSession does not import commands that have the same names as commands
 in the current session. The default behavior is designed to prevent command name conflicts.
 -ArgumentList <i>Object</i>[]
 Export the variant of the command that results from using the specified arguments (parameter values). 
 For example, to export the variant of the Get-Item command in the certificate (Cert:) drive
 in the PSSession in $sess, type &quot;export-pssession -session $sess -command get-item -argumentlist cert:&quot;.
 -CommandName <i>string</i>[]
 Export only the commands with the specified <i>string</i> names or name patterns.
 Wildcards are permitted.
 Use &quot;-CommandName&quot; or its alias, &quot;-Name&quot;.
 By default, Export-PSSession will export all commands from the PSSession except
 for commands that have the same names as commands in the current session.
 This prevents imported commands from hiding or replacing commands in the
 current session. To export all commands, even those that hide or replace other commands,
 use -AllowClobber 
 If you use -CommandName, the formatting files for the commands are not exported unless
 you use -FormatTypeName. Similarly, if you use -FormatTypeName, no commands are exported unless 
 you specify -CommandName.
 -CommandType <i>CommandTypes</i>
 Export only specific types of command objects. Use &quot;-CommandType&quot; or its alias, &quot;-Type&quot;.
 Valid values are:
 Alias All PowerShell aliases in the current session.
 All All command types. It is the equivalent of &quot;get-command *&quot;.
 Application All files other than PowerShell files in paths listed in the Path environment variable 
 ($env:path), including .txt, .exe, and .dll files.
 Cmdlet The cmdlets in the current session. &quot;Cmdlet&quot; is the default.
 ExternalScript All .ps1 files in the path(s) listed in the Path environment variable ($env:path).
 Filter All PowerShell functions.
 Function All PowerShell functions.
 Script Script blocks in the current session.
 -Encoding <i>string</i>
 The encoding for the output files. Valid values are &quot;Unicode&quot;, &quot;UTF7&quot;, &quot;UTF8&quot;, &quot;ASCII&quot;, &quot;UTF32&quot;, &quot;Big
 EndianUnicode&quot;, &quot;Default&quot;, and &quot;OEM&quot;. The default is &quot;UTF-8&quot;.
 -Force
 Overwrite one or more existing output files, even if the file has the read-only attribute.
 -FormatTypeName <i>string</i>[]
 Export formatting instructions only for the specified Microsoft .NET Framework types.
 Enter the type names. By default, Export-PSSession exports formatting instructions for all
 .NET Framework types that are not in the System.Management.Automation namespace.
 The value of this parameter must be the name of a type that is returned by a Get-FormatData
 command in the session from which the commands are being imported.
 To get all of the formatting data in the remote session, type *
 If you use the FormatTypeName parameter, no commands are exported unless you use -CommandName.
 Similarly, if you use -CommandName, the formatting files for the commands are not exported unless 
 you also use -FormatTypeName.
 -Module <i>string</i>[]
 Export only the commands in the specified PowerShell snap-ins and modules.
 Enter the snap-in and module names. Wildcards are not permitted.
 For more information, see about_PSSnapins and Import-Module.
 -OutputModule <i>string</i>
 A path (optional) and name for the module that Export-PSSession creates.
 The default path is $home\Documents\WindowsPowerShell\Modules.
 This parameter is required.
 If the module subdirectory or any of the files that Export-PSSession creates already exist,
 the command fails. 
 To overwrite existing files, use -Force.
 -Session <i>PSSession</i>
 The PSSession from which the commands are exported.
 Enter a variable that contains a session object or a command that gets a session object,
 such as a Get-PSSession command. This parameter is required.
","https://ss64.com/ps/export-pssession.html","System Administration, Remote Connection",
"epsn","Import commands and save them in a PowerShell module."," Export-PSSession [-Session] <i>PSSession</i> [-OutputModule] <i>string</i> 
 [[-CommandName] <i>string</i>[]] [[-FormatTypeName] <i>string</i>[]]
 [-AllowClobber] [-ArgumentList <i>Object</i>[]]
 [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | Script | All}]
 [-Encoding <i>string</i>] [-Force] [-Module <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowClobber
 Export the specified commands, even if they have the same names as
 commands in the current session.
 If you import a command with the same name as a command in the current session,
 the imported command hides or replaces the original commands.
 For more information, see about_Command_Precedence. 
 By default Export-PSSession does not import commands that have the same names as commands
 in the current session. The default behavior is designed to prevent command name conflicts.
 -ArgumentList <i>Object</i>[]
 Export the variant of the command that results from using the specified arguments (parameter values). 
 For example, to export the variant of the Get-Item command in the certificate (Cert:) drive
 in the PSSession in $sess, type &quot;export-pssession -session $sess -command get-item -argumentlist cert:&quot;.
 -CommandName <i>string</i>[]
 Export only the commands with the specified <i>string</i> names or name patterns.
 Wildcards are permitted.
 Use &quot;-CommandName&quot; or its alias, &quot;-Name&quot;.
 By default, Export-PSSession will export all commands from the PSSession except
 for commands that have the same names as commands in the current session.
 This prevents imported commands from hiding or replacing commands in the
 current session. To export all commands, even those that hide or replace other commands,
 use -AllowClobber 
 If you use -CommandName, the formatting files for the commands are not exported unless
 you use -FormatTypeName. Similarly, if you use -FormatTypeName, no commands are exported unless 
 you specify -CommandName.
 -CommandType <i>CommandTypes</i>
 Export only specific types of command objects. Use &quot;-CommandType&quot; or its alias, &quot;-Type&quot;.
 Valid values are:
 Alias All PowerShell aliases in the current session.
 All All command types. It is the equivalent of &quot;get-command *&quot;.
 Application All files other than PowerShell files in paths listed in the Path environment variable 
 ($env:path), including .txt, .exe, and .dll files.
 Cmdlet The cmdlets in the current session. &quot;Cmdlet&quot; is the default.
 ExternalScript All .ps1 files in the path(s) listed in the Path environment variable ($env:path).
 Filter All PowerShell functions.
 Function All PowerShell functions.
 Script Script blocks in the current session.
 -Encoding <i>string</i>
 The encoding for the output files. Valid values are &quot;Unicode&quot;, &quot;UTF7&quot;, &quot;UTF8&quot;, &quot;ASCII&quot;, &quot;UTF32&quot;, &quot;Big
 EndianUnicode&quot;, &quot;Default&quot;, and &quot;OEM&quot;. The default is &quot;UTF-8&quot;.
 -Force
 Overwrite one or more existing output files, even if the file has the read-only attribute.
 -FormatTypeName <i>string</i>[]
 Export formatting instructions only for the specified Microsoft .NET Framework types.
 Enter the type names. By default, Export-PSSession exports formatting instructions for all
 .NET Framework types that are not in the System.Management.Automation namespace.
 The value of this parameter must be the name of a type that is returned by a Get-FormatData
 command in the session from which the commands are being imported.
 To get all of the formatting data in the remote session, type *
 If you use the FormatTypeName parameter, no commands are exported unless you use -CommandName.
 Similarly, if you use -CommandName, the formatting files for the commands are not exported unless 
 you also use -FormatTypeName.
 -Module <i>string</i>[]
 Export only the commands in the specified PowerShell snap-ins and modules.
 Enter the snap-in and module names. Wildcards are not permitted.
 For more information, see about_PSSnapins and Import-Module.
 -OutputModule <i>string</i>
 A path (optional) and name for the module that Export-PSSession creates.
 The default path is $home\Documents\WindowsPowerShell\Modules.
 This parameter is required.
 If the module subdirectory or any of the files that Export-PSSession creates already exist,
 the command fails. 
 To overwrite existing files, use -Force.
 -Session <i>PSSession</i>
 The PSSession from which the commands are exported.
 Enter a variable that contains a session object or a command that gets a session object,
 such as a Get-PSSession command. This parameter is required.
","https://ss64.com/ps/export-pssession.html","System Administration, Remote Connection",
"Get-PSSession","Get the PSSessions in the current session."," Get-PSSession [[-ComputerName] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-Id] <i>Int32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-InstanceId <i>Guid</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-Name <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Get only the PSSessions that are connected to the specified computers.
 Wildcards are permitted. 
 Type the NetBIOS name, an IP address, or a fully-qualified domain name of one or more computers.
 To specify the local computer, type the computer name, &quot;localhost&quot;, or a dot (.).
 -Id <i>Int32</i>[]
 Get only the PSSessions with the specified IDs. Type one or more IDs (separated by commas),
 or use the get-pssession&quot; without parameters.
","https://ss64.com/ps/get-pssession.html","Enumeration",
"gsn","Get the PSSessions in the current session."," Get-PSSession [[-ComputerName] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-Id] <i>Int32</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-InstanceId <i>Guid</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-PSSession [-Name <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Get only the PSSessions that are connected to the specified computers.
 Wildcards are permitted. 
 Type the NetBIOS name, an IP address, or a fully-qualified domain name of one or more computers.
 To specify the local computer, type the computer name, &quot;localhost&quot;, or a dot (.).
 -Id <i>Int32</i>[]
 Get only the PSSessions with the specified IDs. Type one or more IDs (separated by commas),
 or use the get-pssession&quot; without parameters.
","https://ss64.com/ps/get-pssession.html","Enumeration",
"Import-PSSession","Import commands from another session."," Import-PSSession [-Session] <i>PSSession</i> 
 [[-CommandName] <i>string</i>[]] [[-FormatTypeName] <i>string</i>[]]
 [-AllowClobber] [-ArgumentList <i>Object</i>[]]
 [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | Script | All}]
 [-Encoding <i>string</i>] [-Force] [-Module <i>string</i>[]]
 [-Prefix <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowClobber
 Import the specified commands, even if they have the same names as
 commands in the current session.
 If you import a command with the same name as a command in the current session,
 the imported command hides or replaces the original commands.
 For more information, see about_Command_Precedence. 
 By default Import-PSSession does not import commands that have the same names as commands
 in the current session. The default behavior is designed to prevent command name conflicts.
 -ArgumentList <i>Object</i>[]
 Import the variant of the command that results from using the specified arguments (parameter values). 
 For example, to import the variant of the Get-Item command in the certificate (Cert:) drive
 in the PSSession in $sess, type &quot;import-pssession -session $sess -command get-item -argumentlist cert:&quot;.
 -CommandName <i>string</i>[]
 Import only the commands with the specified <i>string</i> names or name patterns.
 Wildcards are permitted.
 Use &quot;-CommandName&quot; or its alias, &quot;-Name&quot;.
 By default, import-PSSession will import all commands from the PSSession except
 for commands that have the same names as commands in the current session.
 This prevents imported commands from hiding or replacing commands in the
 current session. To import all commands, even those that hide or replace other commands,
 use -AllowClobber 
 If you use -CommandName, the formatting files for the commands are not imported unless
 you use -FormatTypeName. Similarly, if you use -FormatTypeName, no commands are imported unless 
 you specify -CommandName.
 -CommandType <i>CommandTypes</i>
 Import only specific types of command objects. Use &quot;-CommandType&quot; or its alias, &quot;-Type&quot;.
 Valid values are:
 Alias All PowerShell aliases in the current session.
 All All command types. It is the equivalent of &quot;get-command *&quot;.
 Application All files other than PowerShell files in paths listed in the Path environment variable 
 ($env:path), including .txt, .exe, and .dll files.
 Cmdlet The cmdlets in the current session. &quot;Cmdlet&quot; is the default.
 ExternalScript All .ps1 files in the path(s) listed in the Path environment variable ($env:path).
 Filter All PowerShell functions.
 Function All PowerShell functions.
 Script Script blocks in the current session.
 -FormatTypeName <i>string</i>[]
 Import formatting instructions only for the specified Microsoft .NET Framework types.
 Enter the type names. Wildcards are permitted. 
 The value of this parameter must be the name of a type that is returned by a Get-FormatData
 command in the session from which the commands are being imported.
 To get all of the formatting data in the remote session, type *
 If the command does not include either -CommandName or -FormatTypeName, Import-PSSession 
 will import formatting instructions for all .NET Framework types returned by a
 Get-FormatData command in the remote session.
 If you use the FormatTypeName parameter, no commands are imported unless you use -CommandName.
 Similarly, if you use -CommandName, the formatting files for the commands are not imported unless 
 you also use -FormatTypeName.
 -Module <i>string</i>[]
 Import only the commands in the specified PowerShell snap-ins and modules.
 Enter the snap-in and module names. Wildcards are not permitted.
 For more information, see about_PSSnapins and Import-Module.
 -Prefix <i>string</i>
 Add the specified prefix to the nouns in the names of imported commands.
 Use this parameter to avoid name conflicts that might occur when different commands in the
 session have the same name. 
 For example, if you specify the prefix &quot;Remote&quot; and then import a Get-Date cmdlet, the cmdlet
 is known in the session as Get-RemoteDate and it is not confused with the original Get-Date cmdlet.
 -Session <i>PSSession</i>
 The PSSession from which the commands are imported.
 Enter a variable that contains a session object or a command that gets a session object,
 such as a Get-PSSession command. This parameter is required.
","https://ss64.com/ps/import-pssession.html","System Administration, Remote Connection",
"ipsn","Import commands from another session."," Import-PSSession [-Session] <i>PSSession</i> 
 [[-CommandName] <i>string</i>[]] [[-FormatTypeName] <i>string</i>[]]
 [-AllowClobber] [-ArgumentList <i>Object</i>[]]
 [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | Script | All}]
 [-Encoding <i>string</i>] [-Force] [-Module <i>string</i>[]]
 [-Prefix <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowClobber
 Import the specified commands, even if they have the same names as
 commands in the current session.
 If you import a command with the same name as a command in the current session,
 the imported command hides or replaces the original commands.
 For more information, see about_Command_Precedence. 
 By default Import-PSSession does not import commands that have the same names as commands
 in the current session. The default behavior is designed to prevent command name conflicts.
 -ArgumentList <i>Object</i>[]
 Import the variant of the command that results from using the specified arguments (parameter values). 
 For example, to import the variant of the Get-Item command in the certificate (Cert:) drive
 in the PSSession in $sess, type &quot;import-pssession -session $sess -command get-item -argumentlist cert:&quot;.
 -CommandName <i>string</i>[]
 Import only the commands with the specified <i>string</i> names or name patterns.
 Wildcards are permitted.
 Use &quot;-CommandName&quot; or its alias, &quot;-Name&quot;.
 By default, import-PSSession will import all commands from the PSSession except
 for commands that have the same names as commands in the current session.
 This prevents imported commands from hiding or replacing commands in the
 current session. To import all commands, even those that hide or replace other commands,
 use -AllowClobber 
 If you use -CommandName, the formatting files for the commands are not imported unless
 you use -FormatTypeName. Similarly, if you use -FormatTypeName, no commands are imported unless 
 you specify -CommandName.
 -CommandType <i>CommandTypes</i>
 Import only specific types of command objects. Use &quot;-CommandType&quot; or its alias, &quot;-Type&quot;.
 Valid values are:
 Alias All PowerShell aliases in the current session.
 All All command types. It is the equivalent of &quot;get-command *&quot;.
 Application All files other than PowerShell files in paths listed in the Path environment variable 
 ($env:path), including .txt, .exe, and .dll files.
 Cmdlet The cmdlets in the current session. &quot;Cmdlet&quot; is the default.
 ExternalScript All .ps1 files in the path(s) listed in the Path environment variable ($env:path).
 Filter All PowerShell functions.
 Function All PowerShell functions.
 Script Script blocks in the current session.
 -FormatTypeName <i>string</i>[]
 Import formatting instructions only for the specified Microsoft .NET Framework types.
 Enter the type names. Wildcards are permitted. 
 The value of this parameter must be the name of a type that is returned by a Get-FormatData
 command in the session from which the commands are being imported.
 To get all of the formatting data in the remote session, type *
 If the command does not include either -CommandName or -FormatTypeName, Import-PSSession 
 will import formatting instructions for all .NET Framework types returned by a
 Get-FormatData command in the remote session.
 If you use the FormatTypeName parameter, no commands are imported unless you use -CommandName.
 Similarly, if you use -CommandName, the formatting files for the commands are not imported unless 
 you also use -FormatTypeName.
 -Module <i>string</i>[]
 Import only the commands in the specified PowerShell snap-ins and modules.
 Enter the snap-in and module names. Wildcards are not permitted.
 For more information, see about_PSSnapins and Import-Module.
 -Prefix <i>string</i>
 Add the specified prefix to the nouns in the names of imported commands.
 Use this parameter to avoid name conflicts that might occur when different commands in the
 session have the same name. 
 For example, if you specify the prefix &quot;Remote&quot; and then import a Get-Date cmdlet, the cmdlet
 is known in the session as Get-RemoteDate and it is not confused with the original Get-Date cmdlet.
 -Session <i>PSSession</i>
 The PSSession from which the commands are imported.
 Enter a variable that contains a session object or a command that gets a session object,
 such as a Get-PSSession command. This parameter is required.
","https://ss64.com/ps/import-pssession.html","System Administration, Remote Connection",
"New-PSSession","Create a persistent connection to a local or remote computer."," New-PSSession [[<b>-ComputerName</b>] <i>string</i>[]] [-ApplicationName <i>string</i>] [-Name <i>string</i>[]]
 [-Authentication {<u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-EnableNetworkAccess]
 [-Port <i>Int32</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [<b>-ConnectionUri</b>] <i>Uri</i>[] [-AllowRedirection] [-Name <i>string</i>[]] 
 [-Authentication {<u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-EnableNetworkAccess]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [<b>-VMId</b>] <i>Guid</i>[] -Credential <i>PSCredential</i> [-ConfigurationName <i>string</i>][-Name <i>string</i>[]] 
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession <b>-VMName</b> <i>string</i>[] -Credential <i>PSCredential</i> [-ConfigurationName <i>string</i>] [-Name <i>string</i>[]]
 [-ThrottleLimit <i>Int32</i>][<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession <b>-ContainerId</b> <i>String</i>[] [-ConfigurationName <i>string</i>] [-Name <i>string</i>[]] [-RunAsAdministrator] 
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [[<b>-Session</b>] <i>PSSession</i>[]] [-EnableNetworkAccess] [-Name <i>string</i>[]]
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI). 
 By default, PowerShell does not redirect connections.
 To also limit the number of times that the connection is redirected, set the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable, or
 the MaximumConnectionRedirectionCount property of the value of the SessionOption parameter.
 The default value is 5.
 For more information, see the description of the SessionOption parameter, and see New-PSSessionOption.
 -ApplicationName <i>string</i>
 The application name segment of the connection URI.
 Use this to specify the application name when you are not using -ConnectionURI.
 The default value is the value of the $PSSessionApplicationName preference variable on
 the local computer. If this preference variable is not defined, the default value is &quot;WSMAN&quot;.
 This value is appropriate for most uses. For more see about_Preference_Variables.
 The WinRM service uses the application name to select a listener to service the connection
 request. This name should match the URLPrefix property of a listener on the remote computer.
 -Authentication <i>AuthenticationMechanism</i>
 The mechanism used to authenticate the user's credentials:
 <u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | CredSSP | Digest | Kerberos
 The default value is &quot;Default&quot;.
 CredSSP authentication is available only in Windows Vista and later versions of Windows.
 For more information about the values of this parameter, see docs.Microsoft.com
 Caution: Credential Security Service Provider (CredSSP) authentication, in which the user's
 credentials are passed to a remote computer to be authenticated, is designed for commands
 that require authentication on more than one resource, such as accessing a remote network share.
 This mechanism increases the security risk of the remote operation.
 If the remote computer is compromised, the credentials that are passed to it can be used to
 control the network session.
 -CertificateThumbprint <i>string
","https://ss64.com/ps/new-pssession.html","System Administration, Remote Connection",
"nsn","Create a persistent connection to a local or remote computer."," New-PSSession [[<b>-ComputerName</b>] <i>string</i>[]] [-ApplicationName <i>string</i>] [-Name <i>string</i>[]]
 [-Authentication {<u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-EnableNetworkAccess]
 [-Port <i>Int32</i>] [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [-UseSSL] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [<b>-ConnectionUri</b>] <i>Uri</i>[] [-AllowRedirection] [-Name <i>string</i>[]] 
 [-Authentication {<u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}]
 [-CertificateThumbprint <i>string</i>] [-ConfigurationName <i>string</i>] [-Credential <i>PSCredential</i>] [-EnableNetworkAccess]
 [-SessionOption <i>PSSessionOption</i>] [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [<b>-VMId</b>] <i>Guid</i>[] -Credential <i>PSCredential</i> [-ConfigurationName <i>string</i>][-Name <i>string</i>[]] 
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession <b>-VMName</b> <i>string</i>[] -Credential <i>PSCredential</i> [-ConfigurationName <i>string</i>] [-Name <i>string</i>[]]
 [-ThrottleLimit <i>Int32</i>][<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession <b>-ContainerId</b> <i>String</i>[] [-ConfigurationName <i>string</i>] [-Name <i>string</i>[]] [-RunAsAdministrator] 
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-PSSession [[<b>-Session</b>] <i>PSSession</i>[]] [-EnableNetworkAccess] [-Name <i>string</i>[]]
 [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllowRedirection
 Allow redirection of this connection to an alternate Uniform Resource Identifier (URI). 
 By default, PowerShell does not redirect connections.
 To also limit the number of times that the connection is redirected, set the
 MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable, or
 the MaximumConnectionRedirectionCount property of the value of the SessionOption parameter.
 The default value is 5.
 For more information, see the description of the SessionOption parameter, and see New-PSSessionOption.
 -ApplicationName <i>string</i>
 The application name segment of the connection URI.
 Use this to specify the application name when you are not using -ConnectionURI.
 The default value is the value of the $PSSessionApplicationName preference variable on
 the local computer. If this preference variable is not defined, the default value is &quot;WSMAN&quot;.
 This value is appropriate for most uses. For more see about_Preference_Variables.
 The WinRM service uses the application name to select a listener to service the connection
 request. This name should match the URLPrefix property of a listener on the remote computer.
 -Authentication <i>AuthenticationMechanism</i>
 The mechanism used to authenticate the user's credentials:
 <u>Default</u> | Basic | Negotiate | NegotiateWithImplicitCredential | CredSSP | Digest | Kerberos
 The default value is &quot;Default&quot;.
 CredSSP authentication is available only in Windows Vista and later versions of Windows.
 For more information about the values of this parameter, see docs.Microsoft.com
 Caution: Credential Security Service Provider (CredSSP) authentication, in which the user's
 credentials are passed to a remote computer to be authenticated, is designed for commands
 that require authentication on more than one resource, such as accessing a remote network share.
 This mechanism increases the security risk of the remote operation.
 If the remote computer is compromised, the credentials that are passed to it can be used to
 control the network session.
 -CertificateThumbprint <i>string
","https://ss64.com/ps/new-pssession.html","System Administration, Remote Connection",
"Remove-PSSession","Close PowerShell sessions."," Remove-PSSession [[-ComputerName] <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Id] <i>Int32</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-InstanceId <i>Guid</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Name <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Session] <i>PSSession</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Close the PSSessions that are connected to the specified computers. Wildcards are permitted.
 Type the NetBIOS name, an IP address, or a fully qualified domain name of one
 or more remote computers. To specify the local computer, type the computer name,
 &quot;localhost&quot;, or a dot (.).
 -Id <i>Int32</i>[] Close the PSSessions with the specified IDs.
 Type one or more IDs (separated by commas) or use the Get-PSSession.
 The resulting PSSessions have the same computer name, application name,
 connection URI, port, configuration name, throttle limit, and Secure Sockets Layer (SSL)
 value as the originals, but they have a different display name, ID, and instance ID (GUID).
","https://ss64.com/ps/remove-pssession.html","System Administration, Remote Connection",
"rsn","Close PowerShell sessions."," Remove-PSSession [[-ComputerName] <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Id] <i>Int32</i>[] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-InstanceId <i>Guid</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Name <i>string</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-PSSession [-Session] <i>PSSession</i>[]] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>[]
 Close the PSSessions that are connected to the specified computers. Wildcards are permitted.
 Type the NetBIOS name, an IP address, or a fully qualified domain name of one
 or more remote computers. To specify the local computer, type the computer name,
 &quot;localhost&quot;, or a dot (.).
 -Id <i>Int32</i>[] Close the PSSessions with the specified IDs.
 Type one or more IDs (separated by commas) or use the Get-PSSession.
 The resulting PSSessions have the same computer name, application name,
 connection URI, port, configuration name, throttle limit, and Secure Sockets Layer (SSL)
 value as the originals, but they have a different display name, ID, and instance ID (GUID).
","https://ss64.com/ps/remove-pssession.html","System Administration, Remote Connection",
"Disable-PSSessionConfiguration","Disable session configurations on the local computer."," Disable-PSSessionConfiguration [[-Name] <i>string</i>[]]
 [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>
 The name(s) of session configurations to disable.
 Enter one or more configuration names. Wildcards are permitted.
 You can also pipe a configuration name (a string or a session configuration object.)
 
 If you omit this parameter, Disable-PSSessionConfiguration will disable
 Microsoft.PowerShell session configuration, which is the default.
 -force
 Suppress all user prompts.
 By default, you are prompted to confirm each operation.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/disable-pssessionconfiguration.html","System Administration",
"Enable-PSSessionConfiguration","Enable session configurations on the local computer."," Enable-PSSessionConfiguration [[-Name] <i>String</i>[]]
 [-Force] [-SecurityDescriptorSddl <i>String</i>] [-SkipNetworkProfileCheck]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name
 The names of session configurations to enable.
 Enter one or more configuration names. Wildcards are permitted.
 You can also pipe a string containing a configuration name or a session configuration object.
 -force
 Suppress all user prompts.
 By default, you are prompted to confirm each operation.
 -SecurityDescriptorSddl
 Replace the security descriptor on the session configuration with the specified security
 descriptor. If you omit this parameter, Enable-PSSessionConfiguration just deletes the
 &quot;deny all&quot; item from the security descriptor.
 -SkipNetworkProfileCheck
 Enable the session configuration when the computer is on a public network.
 Enables a firewall rule for public networks that allows remote access only from computers in
 the same local subnet. By default, Enable-PSSessionConfiguration fails on a public network.
 This parameter is designed for client versions of Windows. (PowerShell 3.0+)
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/enable-pssessionconfiguration.html","System Administration",
"Get-PSSessionConfiguration","Get the registered PS session configuration."," Get-PSSessionConfiguration [[-Name] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name
 Get only the session configurations with the specified name or pattern.
 Enter one or more session configuration names.
 Wildcards are permitted.
","https://ss64.com/ps/get-pssessionconfiguration.html","Enumeration",
"Register-PSSessionConfiguration","Create and register a new PS session configuration."," Register-PSSessionConfiguration [-Name] <i>string</i> [-Force] 
 [-AssemblyName] <i>string</i> [-ConfigurationTypeName] <i>string</i> 
 [-ApplicationBase <i>string</i>] [-MaximumReceivedDataSizePerCommandMB <i>double</i>]
 [-MaximumReceivedObjectSizeMB <i>double</i>] [-NoServiceRestart]
 [-ProcessorArchitecture <i>string</i>] [-SecurityDescriptorSDDL <i>string</i>]
 [-ShowSecurityDescriptorUI] [-StartupScript <i>string</i>]
 [-ThreadApartmentState {STA | MTA | <u>Unknown</u>}]
 [-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>
 A name for the session configuration. This parameter is required.
 -ApplicationBase 
 The path to the assembly file (*.dll) that is specified in the value of -AssemblyName.
 Use this parameter when the value of the AssemblyName parameter does not include a path.
 The default is the current directory.
 
 -AssemblyName 
 The name of an assembly file (*.dll) in which the configuration type is defined.
 You can specify the path to the .dll in this parameter or in the value of -ApplicationBase.
 
 This parameter is required when -ConfigurationTypeName is specified.
 
 -ConfigurationTypeName <i>string</i>
 The fully qualified name of the Microsoft .NET Framework type that is used for this configuration. 
 The type that you specify must implement the
 System.Management.Automation.Remoting.PSSessionConfiguration class.
 
 To specify the assembly file (.dll) that implements the configuration type, use -AssemblyName
 and -AssemblyBase parameters.
 
 Creating a type allows you to control more aspects of the session configuration, such as
 exposing or hiding certain parameters of cmdlets, or setting data size and object size limits
 that users cannot override. 
 
 If you omit this parameter, the DefaultRemotePowerShellConfiguration class is used for
 the session configuration.
 
 -Force
 Suppress all user prompts and restart the WinRM service without prompting.
 Restarting the service makes the configuration change effective.
 
 To prevent a restart and suppress the restart prompt, use -NoServiceRestart.
 
 -MaximumReceivedDataSizePerCommandMB double
 Limit the amount of data that can be sent to this computer in any single remote command. 
 Enter the data size in megabytes (MB). The default is 50 MB.
 
 If a data size limit is defined in the configuration type that is specified in
 -ConfigurationTypeName, the limit in the configuration type is used and the value of
 this parameter is ignored.
 
 -MaximumReceivedObjectSizeMB <i>double</i>
 Limit the amount of data that can be sent to this computer in any single object. 
 Enter the data size in megabytes (MB). The default is 10 MB.
 
 If an object size limit is defined in the configuration type that is specified
 in -ConfigurationTypeName, the limit in the configuration type is used and the value of
 this parameter is ignored.
 
 -NoServiceRestart
 Do not restart the WinRM service and suppress the prompt to restart the service.
 
 By default, when you enter a Register-PSSessionConfiguration command, you are prompted to
 restart the WinRM service to make the new session configuration effective.
 Until the WinRM service is restarted, the new session configuration is not effective.
 
 To restart the WinRM service without prompting, use -Force.
 To restart the WinRM service manually, use Restart-Service.
 
 -ProcessorArchitecture <i>string</i>
 A processor architecture for the configuration.
 This value determines whether a 32-bit or 64-bit version of the process that hosts
 PowerShell is started when the configuration is used.
 Valid values are x86, AMD64, and IA64.
 
 The default is determined by the processor architecture of the computer that hosts
 the session configuration.
 
 -SecurityDescriptorSDDL <i>string</i>
 A Security Descriptor Definition Language (SDDL) string for the configuration. 
 
 This string determines the permissions that are required to use the new session configuration.
 To use a session configuration in a session, users must have at least Execute(Invoke)
 permission for the configuration.
 
 If the security descriptor is complex, consider using the ShowSecurityDescriptorUI parameter
 instead of this parameter. You cannot use both parameters in the same command.
 
 If you omit this parameter, the root SDDL for the WinRM service is used for this configuration.
 To view or change the root SDDL, use the WS-Management provider.
 For example get-item wsman:\localhost\service\rootSDDL.
 For more information about the WS-Management provider, type get-help wsman.
 
 -ShowSecurityDescriptorUI
 Display a property sheet that help create the SDDL for the session configuration.
 The property sheet appears after you run Register-PSSessionConfiguration and restart the WinRM service.
 
 When setting the permissions for the configuration, remember that users must have at
 least Execute(Invoke) permission to use the session configuration in a session.
 
 You cannot use -SecurityDescriptorSDDL and -ShowSecurityDescriptorUI in the same command.
 
 -StartupScript <i>string</i>
 The fully qualified path to a Windows PowerShell script. The specified script runs in
 the new session that uses the session configuration. 
 
 You can use the script to further configure the session. If the script generates an error
 (even a non-terminating error), the session is not created and the user's New-PSSession command fails.
 
 -ThreadApartmentState {STA | MTA | <u>Unknown</u>}
 The apartment state for threads in the session.
 
 -ThreadOptions <i>PSThreadOptions</i>
 Define how threads are created and used when a command is executed in the session.
 Valid values are Default, ReuseThread, UseCurrentThread, and UseNewThread.
 UseCurrentThread is the default.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/register-pssessionconfiguration.html","System Administration",
"Set-PSSessionConfiguration","Change properties of a registered session configuration."," Set-PSSessionConfiguration [-AssemblyName] <i>string</i> [-ConfigurationTypeName] <i>string</i>
 [-Name] <i>string</i> [-ApplicationBase <i>string</i>] [-Force]
 [-MaximumReceivedDataSizePerCommandMB <i>double</i>] [-MaximumReceivedObjectSizeMB <i>double</i>]
 [-NoServiceRestart] [-SecurityDescriptorSDDL <i>string</i>]
 [-ShowSecurityDescriptorUI] [-StartupScript <i>string</i>]
 [-ThreadApartmentState {STA | MTA | Unknown}]
 [-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationBase <i>string</i>
 Change the path to the assembly file (*.dll) that is specified in the value of
 the AssemblyName parameter.
 
 -AssemblyName <i>string</i>
 Specify a different assembly file for the configuration.
 Enter the path (optional) and file name of an assembly (.dll) file that
 defines the configuration type. 
 
 If you enter only the name, you can enter the path in the value of the ApplicationBase parameter.
 
 -ConfigurationTypeName <i>string</i>
 A different configuration type for the configuration.
 The type that you specify must implement the
 System.Management.Automation.Remoting.PSSessionConfiguration class.
 
 If &quot;$null&quot; or an empty string is entered, the DefaultRemotePowerShellConfiguration class
 is used for the session configuration.
 
 -Force
 Suppress all user prompts, and restart the WinRM service without prompting.
 Restarting the service makes the configuration change effective.
 
 To prevent a restart and suppress the restart prompt, use the -NoServiceRestart parameter.
 
 -MaximumReceivedDataSizePerCommandMB <i>double</i>
 Change the limit on the amount of data that can be sent to this computer in
 any single remote command. Enter the data size in megabytes (MB). The default is 50 MB.
 
 If a data size limit is defined in the configuration type that is specified in the
 -ConfigurationTypeName parameter, the limit in the configuration type is used and the
 value of this parameter is ignored.
 
 -MaximumReceivedObjectSizeMB <i>double</i>
 Change the limits on the amount of data that can be sent to this computer in any single
 object. Enter the data size in megabytes (MB). The default is 10 MB.
 
 If an object size limit is defined in the configuration type that is specified in the
 -ConfigurationTypeName parameter, the limit in the configuration type is used and the
 value of this parameter is ignored.
 
 -Name <i>string</i>
 The name of the session configuration to be changed. 
 This parameter cannot be used to change the name of the session configuration.
 
 -NoServiceRestart
 Do not restart the WinRM service, and suppress the prompt to restart the service.
 
 By default, Set-PSSessionConfiguration will prompt to restart the WinRM service, 
 this makes the new session configuration effective.
 
 To restart the WinRM service without prompting, use the -Force parameter.
 To restart the WinRM service manually, use the Restart-Service cmdlet.
 
 -SecurityDescriptorSDDL <i>string</i>
 Specify a different Security Descriptor Definition Language (SDDL) string for the configuration. 
 
 This string determines the permissions that are required to use the new session configuration.
 To use a session configuration in a session, users must have at least
 &quot;Execute(Invoke)&quot; permission for the configuration.
 
 To use the default security descriptor for the configuration, enter an empty
 string (&quot;&quot;) or a value of $null. The default is the root SDDL in the WSMan: drive.
 
 If the security descriptor is complex, consider using the ShowSecurityDescriptorUI
 parameter instead of this one. You cannot use both parameters in the same command.
 
 -ShowSecurityDescriptorUI
 Display a property sheet that helps you to create a new SDDL for the session configuration.
 The property sheet appears after you enter the Set-PSSessionConfiguration command and
 then restart the WinRM service.
 
 When setting the permissions to the configuration, remember that users must have
 at least &quot;Execute(Invoke)&quot; permission to use the session configuration in a session.
 
 You cannot use the SecurityDescriptorSDDL parameter and this parameter in the same command.
 
 -StartupScript <i>string</i>
 Add or change the startup script for the configuration.
 Enter the fully qualified path to a PowerShell script. The specified script runs in
 the new session that uses the session configuration. 
 
 To delete a startup script from a session configuration, enter an empty string (&quot;&quot;) or a value of $null.
 
 You can use a startup script to further configure the user's session.
 If the script generates an error (even a non-terminating error), the session is not
 created and the user's New-PSSession command fails.
 
 -ThreadApartmentState <i>ApartmentState</i>
 Change the apartment state setting for the threads in the session.
 Valid values are STA, MTA and <u>Unknown</u>.
 
 -ThreadOptions <i>PSThreadOptions</i>
 Change the thread options setting in the configuration.
 This setting defines how threads are created and used when a command is executed
 in the session. Valid values are Default, ReuseThread, <u>UseCurrentThread</u>, and
 UseNewThread. 
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/set-pssessionconfiguration.html","System Administration",
"Unregister-PSSessionConfiguration","Delete registered PS session configuration."," Unregister-PSSessionConfiguration [-Name] <i>string</i> 
 [-Force] [-NoServiceRestart]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name
 The names of session configurations to delete.
 Enter one or more configuration names. Wildcards are permitted.
 This parameter is required.
 -force
 Suppress all user prompts, and restarts the WinRM service without prompting.
 Restarting the service makes the configuration change effective.
 
 To prevent a restart and suppress the restart prompt, use -NoServiceRestart
 -NoServiceRestart
 Do not restart the WinRM service, and suppress the default restart prompt.
 Until WinRM is restarted, users can still use the unregistered session configuration,
 even though Get-PSSessionConfiguration does not find it.
 
 To restart the WinRM service manually, use Restart-Service.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/unregister-pssessionconfiguration.html","System Administration",
"New-PSSessionConfigurationFile","Create a file that defines a session configuration.","Not Available","Not Available","Not Available","System Administration",
"New-PSSessionOption","Advanced options for a PSSession."," New-PSSessionOption [-ApplicationArguments <i>PSPrimitiveDictionary</i>] [-CancelTimeOut <i>int</i>]
 [-Culture <i>CultureInfo</i>] [-IdleTimeOut <i>int</i>] [-MaximumReceivedDataSizePerCommand <i>int</i>]
 [-MaximumReceivedObjectSize <i>int</i>] [-MaximumRedirection <i>int</i>] [-NoCompression]
 [-NoEncryption] [-NoMachineProfile] [-OpenTimeOut <i>int</i>] [-OperationTimeOut <i>int</i>]
 [-ProxyAccessType <i>ProxyAccessType</i>] [-ProxyAuthentication <i>AuthenticationMechanism</i>]
 [-ProxyCredential PSCredential] [-SkipCACheck] [-SkipCNCheck] [-SkipRevocationCheck]
 [-UICulture <i>CultureInfo</i>] [-UseUTF16] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationArguments <i>PSPrimitiveDictionary</i>
 A hash table that is sent directly to the session configuration without interpretation.
 This hash table is available to the session configuration as a property of the PSSenderInfo class.
 -CancelTimeOut <i>int</i>
 How long PowerShell will wait for a cancel operation (CTRL + C) to complete before terminating.
 (<i>int</i> milliseconds) The default value is 60000 (one minute).
 A value of 0 (zero) means no timeout; the command continues indefinitely.
 -Culture <i>CultureInfo</i>
 The culture to use for the PSSession.
 Enter a culture name in <i>languagecode2-country</i>/<i>regioncode2</i> format, such as &quot;ja-jP&quot;,
 or a variable/command that gets a CultureInfo object, such as &quot;get-culture&quot;.
 The default value is $null, and the culture that is set in the operating system when
 the PSSession is created is used in the PSSession.
 -IdleTimeOut <i>int</i>
 How long the PSSession will stay open if the remote computer does not receive any communication
 from the local computer, including the heartbeat signal.
 (<i>int</i> milliseconds) The default value is 240000 (4 minutes).
 The minimum value is 60000 (1 minute). When the interval expires, the PSSession closes. 
 If both the local and remote computers specify an idle timeout value, the PSSession uses
 the shorter timeout value. The local computer can set an idle timeout value by using -IdleTimeOut or
 by setting an idle timeout in the $PSSessionOption preference variable.
 The remote computer can specify an idle timeout value in the WS-Management configuration
 (WSMAN:\localhost\shell\idletimeout).
 -MaximumReceivedDataSizePerCommand <i>int</i>
 The maximum number of bytes that the local computer can receive from the remote computer
 in a single command. Enter a value in bytes. By default, there is no data size limit.
 This option is designed to protect the resources on the client computer.
 -MaximumReceivedObjectSize <i>int</i>
 The maximum size of an object that the local computer can receive from the remote computer.
 Enter a value in bytes. By default, there is no data size limit.
 This option is designed to protect the resources on the client computer.
 -MaximumRedirection <i>int</i>
 How many times PowerShell will redirect a connection to an alternate Uniform Resource Identifier(URI)
 before the connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.
 This option is only used when -AllowRedirection is used in the command that creates the PSSession.
 -NoCompression
 Turn off packet compression in the PSSession.
 Compression uses more processor cycles, but it makes transmission faster.
 -NoEncryption
 Turn off data encryption.
 -NoMachineProfile
 Prevent loading the user's Windows user profile.
 As a result, the PSSession might be created faster, but user-specific registry settings,
 items such as environment variables, and certificates are not available in the PSSession.
 -OpenTimeOut <i>int</i>
 How long the client computer waits for the session connection to be established.
 (<i>int</i> milliseconds)
 When the interval expires, the command to establish the connection fails.
 The default value is 180000 (3 minutes).
 A value of 0 (zero) means no time-out; the command continues indefinitely.
 -OperationTimeOut <i>int</i>
 The maximum time that any operation in the PSSession can run.
 (<i>int</i> milliseconds)
 When the interval expires, the operation fails.
 The default value is 180000 (3 minutes).
 A value of 0 (zero) means no time-out; the operation continues indefinitely.
 -ProxyAccessType <i>AuthenticationMechanism</i>
 The authentication method that is used for proxy resolution.
 Valid values are:
 Default | Basic | Credssp | Digest | Kerberos | <u>Negotiate</u> | NegotiateWithImplicitCredential
 -ProxyCredential <i>PSCredential</i>
 The credentials to use for proxy authentication.
 Enter a variable that contains a PSCredential object or a command that gets a
 PSCredential object, such as Get-Credential. If this option is not set, no credentials are specified.
 -SkipCACheck
 Specifies that when connecting over HTTPS, the client does not validate that the
 server certificate is signed by a trusted certificate authority (CA). 
 Use this option only when the remote computer is trusted by using another mechanism,
 such as when the remote computer is part of a network that is physically secure and isolated,
 or the remote computer is listed as a trusted host in a WinRM configuration.
 -SkipCNCheck
 Specifies that the certificate common name (CN) of the server does not need to match the hostname
 of the server. This option is used only in remote operations that use the HTTPS protocol. 
 Use this option only for trusted computers.
 -SkipRevocationCheck
 Do not validate the revocation status of the server certificate.
 -UICulture <i>CultureInfo</i>
 The UI culture to use for the PSSession. 
 Enter a culture name in <i>languagecode2-country</i>/<i>regioncode2</i> format, such as &quot;ja-jP&quot;,
 or a variable/command that gets a CultureInfo object, such as &quot;get-culture&quot;.
 The default value is $null, and the UI culture that is set in the operating system
 when the PSSession is created is used in the PSSession.
 -UseUTF16
 Encode the request in UTF16 format rather than UTF8 format.
","https://ss64.com/ps/new-pssessionoption.html","System Administration",
"Add-PsSnapIn","Add snap-ins to the console."," Add-PSSnapin [-name] <i>string</i>[] [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string[]</i>
 Name of each PSSnapIn to add to the current console
 e.g. Microsoft.Exchange or MyCompany.User. 
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
","https://ss64.com/ps/add-pssnapin.html","System Administration",
"asnp","Add snap-ins to the console."," Add-PSSnapin [-name] <i>string</i>[] [-passThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string[]</i>
 Name of each PSSnapIn to add to the current console
 e.g. Microsoft.Exchange or MyCompany.User. 
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
","https://ss64.com/ps/add-pssnapin.html","System Administration",
"Get-PsSnapin","List PowerShell snap-ins on this computer."," Get-PSSnapin [[-name] <i>string</i>[]] [-registered] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 The PowerShell snap-in(s). Wildcards are permitted.
 
 -registered 
 Get only the PowerShell snap-ins that have been registered on 
 the system. The snap-ins that are installed with Windows PowerShell do 
 not appear in this list.
","https://ss64.com/ps/get-pssnapin.html","System Administration, Enumeration",
"gsnp","List PowerShell snap-ins on this computer."," Get-PSSnapin [[-name] <i>string</i>[]] [-registered] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 The PowerShell snap-in(s). Wildcards are permitted.
 
 -registered 
 Get only the PowerShell snap-ins that have been registered on 
 the system. The snap-ins that are installed with Windows PowerShell do 
 not appear in this list.
","https://ss64.com/ps/get-pssnapin.html","System Administration, Enumeration",
"Remove-PSSnapin","Remove PowerShell snap-ins from the console."," Remove-PSSnapin [-name] <i>string</i>[] [-passThru]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/remove-pssnapin.html","System Administration",
"rsnp","Remove PowerShell snap-ins from the console."," Remove-PSSnapin [-name] <i>string</i>[] [-passThru]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/remove-pssnapin.html","System Administration",
"Get-Random","Get a random number."," Get-Random [-InputObject] <i>Object</i>[] [-Count <i>int</i>]
 [-SetSeed <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-Random [[-Maximum] <i>Object</i>] [-Minimum <i>Object</i>]
 [-SetSeed <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-random.html","System Utility",
"Read-Host","Read a line of input from the host console."," Read-Host [[-prompt] <i>Object</i>] [-asSecureString] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -prompt <i>Object</i>
 The string that will become the prompt object. If the prompt 
 string includes spaces, it must be surrounded by quotes.
 
 -asSecureString 
 If set to true, the input will be echoed as star characters (*). 
 The output will then be a Securestring object.
 <p>Password data should never be stored as a regular string, as it would be visible in memory.
 ::IsKeyDown - Key press detection via WPF.
","https://ss64.com/ps/read-host.html","System Utility",
"Rename-Item","Change the name of an existing item."," Rename-Item [-path] <i>string</i>[] [-newName] <i>string</i> [-force]
 [-passThru] [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the item(s) to be renamed. Wildcards are permitted.
 -newName <i>string</i> 
 The new name for the item.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru 
 Pass the object created by Rename-Item along the pipeline. 
 -credential<i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-item.html","System Utility",
"ren","Change the name of an existing item."," Rename-Item [-path] <i>string</i>[] [-newName] <i>string</i> [-force]
 [-passThru] [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the item(s) to be renamed. Wildcards are permitted.
 -newName <i>string</i> 
 The new name for the item.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru 
 Pass the object created by Rename-Item along the pipeline. 
 -credential<i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-item.html","System Utility",
"rni","Change the name of an existing item."," Rename-Item [-path] <i>string</i>[] [-newName] <i>string</i> [-force]
 [-passThru] [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>
 The path(s) to the item(s) to be renamed. Wildcards are permitted.
 -newName <i>string</i> 
 The new name for the item.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. Force will create file path directories 
 or override a files read-only attribute, but will not change file permissions.
 -passThru 
 Pass the object created by Rename-Item along the pipeline. 
 -credential<i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 This parameter is not supported by any PowerShell core cmdlets or providers.
 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-item.html","System Utility",
"Rename-ItemProperty","Rename a property of an item."," Rename-ItemProperty <b>{</b> [-path] <i>string</i>[] <b>|</b> [-literalPath] <i>string</i>[] <b>}</b>
 [[-name] <i>string</i>[]] [-newName] <i>string</i>
 [-passThru] [-force] [-filter <i>string</i>] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-credential <i>PSCredential</i>] [-whatIf]
 [-confirm] [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path(s) to the item to be renamed. Wildcards are permitted.
 -LiteralPath <i>string</i>
 Like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -Name <i>string</i>
 The name(s) of the property to rename.
 -NewName <i>string</i>
 The new name for the property.
 -PassThru 
 Pass the object created by Rename-ItemProperty along the pipeline. 
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings.
 -Filter <i>string</i>
 A filter in the provider's format or language. 
 The exact syntax of the filter (wildcard support etc) depends on the provider.
 Filters are more efficient than -include/-exclude, because the provider
 applies the filter when retrieving the objects, rather than having 
 PowerShell filter the objects after they are retrieved.
 -Exclude <i>string</i>
 Omit the specified items from the Path e.g. *SS64*&quot;
 this only works when the path includes a wildcard character.
 -include <i>string</i>
 Include only the specified items from the Path. e.g. May*
 this only works when the path includes a wildcard character.
 
 -Credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User64 or Domain64\User64, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/rename-itemproperty.html","System Utility",
"Restart-Computer","Restart the operating system on a computer."," Restart-Computer [[-ComputerName] <i>string</i>[]] [[-Credential] <i>PSCredential</i>]
 [-AsJob] [-Authentication <i>AuthenticationLevel</i>] [-Delay <i>Int16</i>] [-For <i>WaitForServiceTypes</i>] [-Force]
 [-WsmanAuthentication <i>String</i>] [-Impersonation <i>ImpersonationLevel</i>] [-DcomAuthentication <i>AuthenticationLevel</i>] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AsJob
 Run the command as a background job.
 When this parameter is used, Restart-Computer will immediately return an
 object that represents the background job.
 You can continue to work in the session while the job completes. 
 The job is created on the local computer and results from remote computers are
 automatically returned to the local computer.
 To manage the job, use the Job cmdlets.
 To get the job results, use Receive-Job.
 To use this parameter, the local and remote computers must be configured for remoting.
 On Windows Vista and later, you must open PowerShell with the &quot;Run as administrator&quot; option.
 -Authentication <i>AuthenticationLevel</i>
 The authentication level that is used for the WMI connection.
 (Restart-Computer uses WMI.) The default value is Packet.
 
 Valid values are:
 Unchanged The authentication level is the same as the previous command.
 Default Windows Authentication
 None No COM authentication
 Connect Connect-level COM authentication
 Call Call-level COM authentication
 <u>Packet</u> Packet-level COM authentication.
 PacketIntegrity Packet Integrity-level COM authentication
 PacketPrivacy Packet Privacy-level COM authentication.
 -ComputerName <i>string</i>[]
 One or more remote computers. The default is the local computer.
 Type the NETBIOS name, an IP address, or a fully qualified domain name
 of a remote computer. To specify the local computer, type the computer name,
 a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 The default is the current user.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;, or enter a
 PSCredential object, such as one generated by Get-Credential.
 If you type a user name, you will be prompted for a password.
 -Delay
 The frequency of queries, in seconds. PowerShell queries the service specified by the For parameter to
 determine whether the service is available after the computer is restarted.
 This parameter is valid only together with the -Wait and -For parameters.
 This parameter was introduced in Windows PowerShell 3.0.
 If the Delay parameter isn’t specified, Restart-Computer uses a five second delay.
 -Force
 Force an immediate restart of the computer(s).
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use when calling WMI. (Restart-Computer uses WMI.)
 The default value is &quot;Impersonate&quot;.
 Valid values are:
 Default Default impersonation.
 Delegate Delegate impersonation.
 Anonymous Hide the identity of the caller.
 Identify Allow objects to query the credentials of the caller.
 <u>Impersonate</u> Allow objects to use the credentials of the caller.
 -ThrottleLimit <i>int</i>
 The maximum number of concurrent connections that can be established to run this command.
 If this parameter is set to 0, or omitted, the default value of 32, is used.
 The throttle limit applies only to the current command, not to the session.
 -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/restart-computer.html","System Administration",
"Return","Exit the current scope, (function, script, or script block)."," return
 return <i>expression</i></pre>
","Not Available","https://ss64.com/ps/return.html","System Utility","Command Execution, Scripting"
"Scheduler","Get/Set scheduled jobs.","Not Available","Not Available","https://ss64.com/ps/scheduler.html","Enumeration",
"Confirm-SecureBootUEFI","Confirm that Secure Boot is enabled on the local computer.","Not Available","Not Available","Not Available","System Administration",
"Select-Object","Select properties of objects."," Select-Object [[-property] <i>Object</i>[]] [-excludeProperty <i>string</i>[]]
 [-expandProperty <i>string</i>] [-first <i>int</i>] [-last <i>int</i>]
 [-Skip <i>int</i>] [-unique] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-Object [-Index <i>Int32</i>[]] [-InputObject <i>psobject</i>] [-Unique] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>[]
 The property or properties to select.
 -ExcludeProperty <i>string</i>
 Properties that will not be selected.
 
 -ExpandProperty <i>string</i>
 Select and expand the specified property. If the specified property is 
 an array, for example, each value of the array should be included.
 -First <i>int</i>
 Select <i>int</i> number of objects from the beginning of an array of input objects.
 
 -Last <i>int</i>
 Select <i>int</i> number of objects from the end of an array of input objects.
 -Skip <i>int</i>
 Skip (do not select) the specified number of items.
 By default, the Skip parameter counts from the beginning of the array
 or list of objects, but if the command uses the Last parameter, it
 counts from the end of the list or array.
 Unlike the Index parameter, which starts counting from 0, the Skip parameter begins at 1.
 -Unique 
 Select unique objects only, (identical properties and values)
 -InputObject <i>psobject</i>
 An object or objects to input to Select-Object.
 When the -InputObject parameter is used to submit a collection of items, Select-Object receives
 one object that represents the collection and returns the collection unchanged.
 To select multiple individual items, pipe them to Select-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Index <i>Int32</i>[]
 Select objects from an array based on their index values.
 Enter the indexes in a comma-separated list.
 Indexes in an array begin with 0, where 0 represents the first value
 and (n-1) represents the last value.
","https://ss64.com/ps/select-object.html","System Utility",
"select","Select properties of objects."," Select-Object [[-property] <i>Object</i>[]] [-excludeProperty <i>string</i>[]]
 [-expandProperty <i>string</i>] [-first <i>int</i>] [-last <i>int</i>]
 [-Skip <i>int</i>] [-unique] [-inputObject <i>psobject</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-Object [-Index <i>Int32</i>[]] [-InputObject <i>psobject</i>] [-Unique] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>[]
 The property or properties to select.
 -ExcludeProperty <i>string</i>
 Properties that will not be selected.
 
 -ExpandProperty <i>string</i>
 Select and expand the specified property. If the specified property is 
 an array, for example, each value of the array should be included.
 -First <i>int</i>
 Select <i>int</i> number of objects from the beginning of an array of input objects.
 
 -Last <i>int</i>
 Select <i>int</i> number of objects from the end of an array of input objects.
 -Skip <i>int</i>
 Skip (do not select) the specified number of items.
 By default, the Skip parameter counts from the beginning of the array
 or list of objects, but if the command uses the Last parameter, it
 counts from the end of the list or array.
 Unlike the Index parameter, which starts counting from 0, the Skip parameter begins at 1.
 -Unique 
 Select unique objects only, (identical properties and values)
 -InputObject <i>psobject</i>
 An object or objects to input to Select-Object.
 When the -InputObject parameter is used to submit a collection of items, Select-Object receives
 one object that represents the collection and returns the collection unchanged.
 To select multiple individual items, pipe them to Select-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Index <i>Int32</i>[]
 Select objects from an array based on their index values.
 Enter the indexes in a comma-separated list.
 Indexes in an array begin with 0, where 0 represents the first value
 and (n-1) represents the last value.
","https://ss64.com/ps/select-object.html","System Utility",
"Select-XML","Find text in an XML string or document."," Select-XML -Content <i>string</i>[] [-Xpath] <i>string
 </i> [-Namespace <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-XML [-Path] <i>string</i>[] [-Xpath] <i>string</i>
 [-Namespace <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Select-XML [-Xml] <i>XmlNode</i>[] [-Xpath] <i>string</i>
 [-Namespace <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Content <i>string</i>[]
 A string that contains the XML to search.
 You can also pipe strings to Select-XML.
 -Namespace <i>hashtable</i>
 A hash table of the namespaces used in the XML.
 Use the format @{<i>namespaceName</i> = <i>namespaceValue</i>}.
 -Path <i>path</i>
 The path and file names of the XML files to search.
 Wildcards are permitted.
 -Xml <i>XmlNode</i>[]
 One or more XML nodes.
 A Path or XML parameter is required in every command.
 An XML document will be processed as a collection of XML nodes.
 If an XML document is passed to Select-XML, each
 document node will be searched separately as it comes through the pipeline.
 -Xpath <i>string</i>
 An XPath search query.
 The query language is case-sensitive. This parameter is required.
","https://ss64.com/ps/select-xml.html","System Utility",
"New-SelfSignedCertificate","Create a new self-signed certificate for testing purposes.","Not Available","Not Available","Not Available","System Utility","Certificate"
"Send-MailMessage","Send an email message."," Send-MailMessage [-To] <i>string</i>[] [-Subject] <i>string</i> -From <i>string
 </i> [[-Body] <i>string</i>] [[-SmtpServer] <i>string</i>] [-Attachments <i>string</i>[]]
 [-Bcc <i>string</i>[]] [-Cc <i>string</i>[]] [-BodyAsHtml]
 [-Credential <i>PSCredential</i>] [-DeliveryNotificationOption <i>NotifyOptions</i>]
 [-Encoding <i>Encoding</i>] [-Priority <b>{</b>Normal <b>|</b> Low <b>|</b> High<b>}</b>]
 [-UseSSL] [-Port <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Attachments <i>string</i>[]
 The path and file names of files to be attached to the email message.
 Use this parameter or pipe the path/file names.
 -Bcc <i>string</i>[]
 Email addresses that receive a copy of the mail but are not listed as recipients of the message.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;
 -Body string
 The body (content) of the email message.
 -BodyAsHtml
 Indicates that the value of the Body parameter contains HTML.
 -Cc <i>string</i>[]
 Email addresses to which a carbon copy (CC) of the email message is sent.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. The default is the current user.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;. Or, enter a PSCredential object,
 such as one from the Get-Credential cmdlet.
 -DeliveryNotificationOption
 Delivery notifications (if accepted by the recipient) will be passed back to the email address
 specified in the -From parameter. The alias for this parameter is &quot;-dno&quot;.
 <i>NotifyOptions</i>:
 <u>None</u> No notification.
 OnSuccess Notify if the delivery is successful.
 OnFailure Notify if the delivery is unsuccessful.
 Delay Notify if the delivery is delayed.
 Never Never notify.
 -Encoding <i>Encoding</i>
 The encoding used for the body and subject. 'unicode' will send UTF16.
 Valid values are <u><b>ASCII</b></u>, <b>UTF8</b>, UTF7, UTF32, Unicode, BigEndianUnicode, Default, and OEM.
 -From <i>string</i>
 The address from which the mail is sent.
 Enter a name (optional) and email address, such as &quot;Name &lt;someone@example.com&gt;&quot;. This parameter is required.
 -Port
 An alternate port on the SMTP server.
 The default value is 25, which is the default SMTP port.
 The standard secure SMTP port is 587.
 This parameter is available in Windows PowerShell 3.0 and newer releases.
 -Priority <i>MailPriority</i>
 The priority of the email message.
 The valid values for this are <u>Normal</u>, High, and Low.
 -SmtpServer <i>string</i>
 The name of the SMTP server that sends the email message.
 The default value is the value of the $PSEmailServer preference variable.
 If the preference variable is not set and this parameter is omitted, the command fails.
 -Subject <i>string</i>
 The subject of the email message. This parameter is required.
 -To <i>string</i>[]
 The addresses to which the mail is sent.
 Enter names (optional) and the email address, such as &quot;Name &lt;someone@example.com&gt;&quot;. Required.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer 
 to send mail. By default, SSL is not used, though most mail servers now require it.
","https://ss64.com/ps/send-mailmessage.html","System Utility","email"
"Get-Service","Get a list of services."," Get-Service { [-name] <i>string</i>[] | -displayName <i>string</i>[]
 | -inputObject <i>ServiceController</i>[] }
 [-ComputerName <i>string</i>[]] [-DependentServices] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-RequiredServices] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 Service names to retrieve. Wildcards are permitted. 
 
 -displayName
 Display names of services to retrieve. Wildcards permitted.
 -inputObject
 ServiceController object(s) to retrieve.
 A variable containing objects or a command / expression that
 gets the objects.
 -ComputerName <i>string</i>[]
 Get the services running on the specified computers.
 The default is the local computer.
 Type the NetBIOS name, an IP address, or a fully qualified domain
 name of a remote computer.
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -DependentServices
 Get only the services that depend upon the specified service. 
 By default, Get-Service gets all services.
 -Include
 Retrieve only the Service Name(s) specified.
 Qualifies the -Name parameter, Wildcards are permitted.
 -Exclude
 Omit the Service Name(s) specified.
 Qualifies the -Name parameter, Wildcards are permitted.
 -RequiredServices
 Get only the services that this service requires. 
 This parameter gets the value of the ServicesDependedOn property of the service.
 By default, Get-Service gets all services.
","https://ss64.com/ps/get-service.html","Enumeration",
"gsv","Get a list of services."," Get-Service { [-name] <i>string</i>[] | -displayName <i>string</i>[]
 | -inputObject <i>ServiceController</i>[] }
 [-ComputerName <i>string</i>[]] [-DependentServices] 
 [-include <i>string</i>[]] [-exclude <i>string</i>[]]
 [-RequiredServices] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 Service names to retrieve. Wildcards are permitted. 
 
 -displayName
 Display names of services to retrieve. Wildcards permitted.
 -inputObject
 ServiceController object(s) to retrieve.
 A variable containing objects or a command / expression that
 gets the objects.
 -ComputerName <i>string</i>[]
 Get the services running on the specified computers.
 The default is the local computer.
 Type the NetBIOS name, an IP address, or a fully qualified domain
 name of a remote computer.
 To specify the local computer, type the computer name, a dot (.), or &quot;localhost&quot;.
 This parameter does not rely on PowerShell remoting.
 -DependentServices
 Get only the services that depend upon the specified service. 
 By default, Get-Service gets all services.
 -Include
 Retrieve only the Service Name(s) specified.
 Qualifies the -Name parameter, Wildcards are permitted.
 -Exclude
 Omit the Service Name(s) specified.
 Qualifies the -Name parameter, Wildcards are permitted.
 -RequiredServices
 Get only the services that this service requires. 
 This parameter gets the value of the ServicesDependedOn property of the service.
 By default, Get-Service gets all services.
","https://ss64.com/ps/get-service.html","Enumeration",
"New-Service","Create a new service."," New-Service [-name] <i>string</i> [-binaryPathName] <i>string</i> 
 -displayName <i>string</i> [-description <i>string</i>] [-DependsOn <i>string</i>[]]
 [-startupType {<u>Automatic</u> | Manual | Disabled}] 
 [-credential <i>PSCredential</i>] [-dependsOn <i>string</i>[]] 
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name
 A name for the new Service. (required)
 
 -binaryPathName <i>string</i>
 The path to the executable file for the service.
 -displayName <i>string</i>
 The display name for the service.
 -description <i>string</i>
 A description of the service.
 -DependsOn <i>string</i>[]
 The names of other services upon which the new service depends.
 To enter multiple service names, use a comma to separate the names.
 -startupType <i>ServiceStartMode</i>
 Will the service start at system bootup: Automatic or Manual or Disabled
 -credential <i>PSCredential</i>
 Use a credential to validate access to the file. <i>Credential</i> represents
 a user-name, such as User01 or Domain01\User01, or a PSCredential
 object, such as the one retrieved by using the Get-Credential cmdlet.
 If you type a user name, you will be prompted for a password.
 -dependsOn <i>string</i>[]
 A comma-separated list Names of other services upon which
 the new service depends.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-service.html","System Administration",
"Restart-Service","Stop and then restart a service."," Restart-Service <b>{</b> [-name] <i>string[]
 </i> | [-displayName] <i>string[]</i>
 | [-inputObject <i>ServiceController[]</i>] <b>}</b>
 [-force] [-include <i>string[]</i>] [-exclude <i>string[]</i>]
 [-passthru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The service names to be restarted.
 -displayName <i>string</i>
 The display names to be restarted, wildcards are permitted.
 -inputObject <i>ServiceController</i>
 Restart the services represented by <i>ServiceController</i>.
 Enter a command, expression or variable containing the object(s).
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -Force will stop and restart a
 service that has dependent services.
 -include <i>string</i>
 Restart only the specified services. Qualifies the -Name parameter.
 Wildcards , such as s* are permitted.
 -exclude <i>string</i>
 Omit the specified services e.g. *SS64*&quot;
 Qualifies the -Name parameter, Wildcards are permitted.
 -passThru 
 Pass the object created by Restart-Service along the pipeline. 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/restart-service.html","System Administration",
"Resume-Service","Resume a suspended service."," Resume-Service <b>{</b> [-name] <i>string[]
 </i> | [-displayName] <i>string[]</i>
 | [-inputObject ServiceController[]] <b>}</b>
 [-include <i>string[]</i>] [-exclude <i>string[]</i>]
 [-passthru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>
 The service names to be resumed.
 -DisplayName <i>string</i>
 The display names to be resumed, wildcards are permitted.
 -inputObject <i>ServiceController</i>
 Restart the services represented by <i>ServiceController</i>.
 Enter a command, expression or variable contains the objects.
 -include <i>string</i>
 Resume only the specified services. Qualifies the -Name parameter.
 Wildcards , such as s* are permitted.
 -Exclude <i>string</i>
 Omit the specified services e.g. *SS64*&quot;
 Qualifies the -Name parameter, Wildcards are permitted.
 -PassThru 
 Pass the object created by Resume-Service along the pipeline. 
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/resume-service.html","System Administration",
"Set-Service","Change the start mode/properties of a service."," Set-Service [-name] <i>string</i>[] [ -displayName <i>string</i> ]
 [-description <i>string</i>] [-startupType <b>{ </b>Automatic | Manual | Disabled <b>}</b>]
 [-Status <i>string</i>] [-ComputerName <i>string</i>[]] [-PassThru]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-Service [-InputObject <i>ServiceController</i>] [ -displayName <i>string</i> ]
 [-description <i>string</i>] [-startupType <b>{ </b>Automatic | Manual | Disabled <b>}</b>]
 [-Status <i>string</i>] [-ComputerName <i>string</i>[]] [-PassThru]
 [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/set-service.html","System Administration",
"Start-Service","sasv   Start a stopped service."," Start-Service <b>{</b> [-name] <i>string[]
 </i> | [-displayName] <i>string[]</i>
 | [-inputObject ServiceController[]] <b>}</b>
 [-include <i>string[]</i>] [-exclude <i>string[]</i>]
 [-passthru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The service names to be started.
 -displayName <i>string</i>
 The display names to be started, wildcards are permitted.
 -inputObject <i>ServiceController</i>
 Start the services represented by <i>ServiceController</i>.
 Enter a command, expression or variable that contains the objects.
 -include <i>string</i>
 Start only the specified services. Qualifies the -Name parameter.
 Wildcards , such as s* are permitted.
 -exclude <i>string</i>
 Omit the specified services e.g. *SS64*&quot;
 Qualifies the -Name parameter, Wildcards are permitted.
 -passThru 
 Pass the object created by Start-Service along the pipeline. 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/start-service.html","System Administration",
"Stop-Service","spsv   Stop a running service."," Stop-Service <b>{</b> [-name] <i>string[]
 </i> | [-displayName] <i>string[]</i>
 | [-inputObject ServiceController[]] <b>}</b>
 [-include <i>string[]</i>] [-exclude <i>string[]</i>]
 [-force] [-passthru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The service names to be stopped.
 -displayName <i>string</i>
 The display names to be stopped, wildcards are permitted.
 -inputObject <i>ServiceController</i>
 Stop the services represented by <i>ServiceController</i>.
 Enter a command, expression or variable contains the objects.
 -include <i>string</i>
 Stop only the specified services. qualifies the Name parameter.
 Wildcards , such as s* are permitted.
 -exclude <i>string</i>
 Omit the specified services e.g. *SS64*&quot;
 Qualifies the -Name parameter, Wildcards are permitted.
 -force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -Force will stop a service
 that has dependent services.
 -passThru 
 Pass the object created by Stop-Service along the pipeline. 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/stop-service.html","System Administration",
"Suspend-Service","Suspend a running service."," Suspend-Service <b>{</b> [-name] <i>string[]
 </i> | [-displayName] <i>string[]</i>
 | [-inputObject ServiceController[]] <b>}</b>
 [-include <i>string[]</i>] [-exclude <i>string[]</i>]
 [-passthru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 The service names to be suspended.
 -displayName <i>string</i>
 The display names to be suspended, wildcards are permitted.
 -inputObject <i>ServiceController</i>
 Suspend the services represented by <i>ServiceController</i>.
 Enter a command, expression or variable contains the objects.
 -include <i>string</i>
 Suspend only the specified services. Qualifies the -Name parameter.
 Wildcards , such as s* are permitted.
 -exclude <i>string</i>
 Omit the specified services e.g. *SS64*&quot;
 Qualifies the -Name parameter, Wildcards are permitted.
 -passThru 
 Pass the object created by Suspend-Service along the pipeline. 
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/suspend-service.html","System Administration",
"Sort-Object","Sort objects by property value."," Sort-Object [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>] [-culture <i>string</i>]
 [-caseSensitive] [-unique] [-descending] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>
 A property or properties to use when sorting. Wildcards are permitted. 
 Objects are sorted based on the values of these properties.
 Multiple properties may be specified, the objects will be sorted by 
 each property in turn. i.e Surname and then FirstName
 If not property is specified, sort-object will sort using the default
 property for the object type.
 -CaseSensitive
 Sort UPPER and lower case letters separately.
 -Culture <i>string</i>
 The cultural/country configuration to use when sorting.
 -Descending 
 Sort in descending order. The Descending parameter applies to all properties.
 To sort by some properties in ascending order and others in descending order, 
 specify their property values with a hash table.
 -InputObject <i>psobject</i>
 The objects to be sorted.
 When the -InputObject parameter is used to submit a collection of items,
 Sort-Object receives one object that represents the collection.
 Because one object cannot be sorted, Sort-Object returns the entire collection unchanged.
 To sort multiple items, pipe them to Sort-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Unique 
 Return only the unique values.
","https://ss64.com/ps/sort-object.html","System Utility",
"sort","Sort objects by property value."," Sort-Object [[-property] <i>Object</i>[]] [-inputObject <i>psobject</i>] [-culture <i>string</i>]
 [-caseSensitive] [-unique] [-descending] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Property <i>Object</i>
 A property or properties to use when sorting. Wildcards are permitted. 
 Objects are sorted based on the values of these properties.
 Multiple properties may be specified, the objects will be sorted by 
 each property in turn. i.e Surname and then FirstName
 If not property is specified, sort-object will sort using the default
 property for the object type.
 -CaseSensitive
 Sort UPPER and lower case letters separately.
 -Culture <i>string</i>
 The cultural/country configuration to use when sorting.
 -Descending 
 Sort in descending order. The Descending parameter applies to all properties.
 To sort by some properties in ascending order and others in descending order, 
 specify their property values with a hash table.
 -InputObject <i>psobject</i>
 The objects to be sorted.
 When the -InputObject parameter is used to submit a collection of items,
 Sort-Object receives one object that represents the collection.
 Because one object cannot be sorted, Sort-Object returns the entire collection unchanged.
 To sort multiple items, pipe them to Sort-Object.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -Unique 
 Return only the unique values.
","https://ss64.com/ps/sort-object.html","System Uility",
"Get-SmbConnection","Retrieve the connections established from the SMB client to the SMB servers."," Get-SmbConnection [[-ServerName] <i>String</i>[]] [[-UserName] <i>String</i>[]] [-CimSession <i>CimSession</i>[]]
 [-SmbInstance {Default | CSV}] [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession [<i>CimSession</i>[]]
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -ServerName
 Specifies that the connections made to the server are enumerated.
 -SmbInstance
 Specifies the input to this cmdlet. You can use this parameter, or you can pipe the input to this cmdlet.
 -ThrottleLimit [<i>Int32</i>]
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 -UserName
 Specifies that the connections made by the user are enumerated.
","https://ss64.com/ps/get-smbconnection.html","Enumeration, System Administration, Remote Connection","SMB"
"Get-SmbOpenFile","Information about files that are open on behalf of SMB server clients.","Not Available","Not Available","Not Available","Enumeration","SMB"
"Get-SMBMapping","Get an SMB mapping."," Get-SmbMapping [[-LocalPath] <i>String</i>[]] [[-RemotePath] <i>String</i>[]]
 [-CimSession <i>CimSession</i>[]] [-ThrottleLimit <i>Int32</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession [<i>CimSession</i>[]]
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 -LocalPath [<i>String</i>]
 The local path used to map the remote path on this computer.
 -RemotePath [<i>String</i>]
 The remote path that is accessed from this computer.
 -ThrottleLimit [<i>Int32</i>]
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
","https://ss64.com/ps/get-smbmapping.html","Enumeration","SMB"
"New-SmbMapping","Create an SMB mapping."," New-SmbMapping [[-LocalPath] <i>String</i>] [[-RemotePath] <i>String</i>] [-CimSession <i>CimSession</i>[]]
 [-HomeFolder] [-Password <i>String</i>] [-Persistent <i>Boolean</i>] [-SaveCredentials] [-ThrottleLimit <i>Int32</i>]
 [-UserName <i>String</i>] [-whatIf] [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession [<i>CimSession</i>[]]
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 
 -HomeFolder
 Indicates that the connection is made to the home folder of the user.
 
 -LocalPath [<i>String</i>]
 A local path to which the remote path is mapped.
 This is not limited to drive letters,any valid string may be used.
 
 -Password [<i>String</i>]
 A password to be used to connect to the SMB share.
 
 -Persistent [<i>Boolean</i>]
 Make this connection persistent.
 
 -RemotePath [<i>String</i>]
 The remote path that will be accessed from this computer.
 
 -SaveCredentials
 Save the credentials provided to use when another mapping to the same SMB server is created.
 
 -ThrottleLimit [<i>Int32</i>]
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 
 -UserName [<i>String</i>]
 The user name to use to connect to the SMB share.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-smbmapping.html","System Administration, Remote Connection","SMB"
"Remove-SmbMapping","Remove an SMB mapping."," Remove-SmbMapping [[-LocalPath] <i>String</i>[]] [[-RemotePath] <i>String</i>[]] 
 [-CimSession <i>CimSession</i>[]] [-Force]
 [-PassThru] [-ThrottleLimit <i>Int32</i>] [-UpdateProfile]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -CimSession [<i>CimSession</i>[]]
 Run the cmdlet in a remote session or on a remote computer.
 Enter a computer name or a session object, such as the output of a Get-CimSession cmdlet.
 The default is the current session on the local computer.
 
 -Force
 Force the command to run without asking for user confirmation.
 
 -LocalPath [<i>String</i>[]]
 An array of the local paths associated with the SMB mappings to remove.
 
 -PassThru
 Return an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 
 -RemotePath [<i>String</i>[]]
 An array of the remote paths of the SMB shares associated with the mappings that this cmdlet removes.
 
 -ThrottleLimit [<i>Int32</i>]
 The maximum number of concurrent operations that can be established to run the cmdlet.
 If this parameter is omitted or a value of 0 is entered, then PowerShell will calculate an optimum throttle limit 
 for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies 
 only to the current cmdlet, not to the session or to the computer.
 
 -UpdateProfile
 Remove the mapping persistently.
 If the drive mapping is currently persistent, it will no longer be re-established when the computer restarts.
 
 -Confirm
 Prompt for confirmation before running the cmdlet.
 
 -WhatIf
 Show what would happen if the cmdlet was run. The cmdlet is not run.
","https://ss64.com/ps/remove-smbmapping.html","System Administration, Remote Connection","SMB"
"Get-SmbSession","Retrieve information about current SMB sessions.","Not Available","Not Available","Not Available","Enumeration, System Administration, Remote Connection",
"Set-SmbClientConfiguration","Set the SMB client configuration.","Not Available","Not Available","Not Available","System Administration, Remote Connection","SMB"
"Get-SmbServerConfiguration","Get the SMB Server configuration.","Not Available","Not Available","Not Available","Enumeration, System Administration, Remote Connection",
"Set-SmbServerConfiguration","Set the SMB Server configuration.","Not Available","Not Available","Not Available","System Administration, Remote Connection","SMB"
"Get-SmbShare","Retrieve the SMB shares on the computer.","Not Available","Not Available","Not Available","Enumeration, System Administration, Remote Connection",
"Set-SmbShare","Modify the properties of an SMB share.     ","Not Available","Not Available","Not Available","System Administration, Remote Connection","SMB"
"New-SmbShare","Create an SMB share.","Not Available","Not Available","Not Available","System Administration, Remote Connection","SMB"
"Get-SmbShareAccess","Retrieve the ACL of an SMB share.","Not Available","Not Available","Not Available","Enumeration, System Administration, Remote Connection",
"Grant-SmbShareAccess","Add an allow ACE for a trustee to the security descriptor of the SMB share.","Not Available","Not Available","Not Available","System Administration, Remote Connection","SMB"
"Set-StrictMode","Enforce coding rules in expressions &amp; scripts."," Set-StrictMode -Off [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-StrictMode -Version <i>Version</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Off
 Turn strict mode off.
 This parameter also turns off &quot;Set-PSDebug -Strict&quot;.
 -Version <i>Version</i>
 The conditions that cause an error in strict mode. (Required)
 valid values:
 1.0 Prohibit references to uninitialized variables,
 except for uninitialized variables in strings.
 2.0 Prohibit references to uninitialized variables (including uninitialized variables in strings).
 Prohibit references to non-existent properties of an object.
 Prohibit function calls that use the syntax for calling methods.
 Prohibit a variable without a name (${}).
 3.0 Prohibits references to uninitialized variables. This includes uninitialized variables in strings.
 Prohibits references to non-existent properties of an object.
 Prohibits function calls that use the syntax for calling methods.
 Prohibit out of bounds or unresolvable array indexes.
 Latest Select the latest (most strict) version available.
 Use this value to assure that scripts use the strictest
 available version, even when new versions are added to PowerShell.
","https://ss64.com/ps/set-strictmode.html","System Administration",
"Get-StartApps","Get the names and IDs of apps installed on the Start Menu."," Get-StartApps [[-Name] <i>Object</i>] [<a href=""common.html""><i>CommonParameters</i></a>]
"," -Name [<i>Object</i>] The name of an app.
 Wildcard accepted.
 If you do not specify this, all start menu apps will be retrieved.
","https://ss64.com/ps/get-startapps.html","Enumeration",
"Export-StartLayout","Export layout of the Start screen as an .xml file.","Not Available","Not Available","Not Available","System Utility",
"Import-StartLayout","Import the layout of the Start into a mounted Windows image.","Not Available","Not Available","Not Available","System Utility",
"Start-Sleep","Suspend shell, script, or runspace activity."," Start-Sleep [-seconds] <i>int</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Sleep -milliseconds <i>int</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -seconds <i>int</i>
 How long to sleep, can be abbreviated to -s
 {can be piped}
 -milliseconds<i> int</i>
 How long to sleep in Milliseconds, can be abbreviated as -m
 
 <p>PS C:\&gt; $host.UI.RawUI.ReadKey(&quot;NoEcho,IncludeKeyDown&quot;)|out-null 
 
 <i class=quote>&ldquo;Many things--such as loving, going to sleep, or behaving unaffectedly--are done worst when we try hardest to do them&rdquo; ~ C.S. Lewis</i></p>
","https://ss64.com/ps/start-sleep.html","System Administration",
"sleep","Suspend shell, script, or runspace activity."," Start-Sleep [-seconds] <i>int</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Start-Sleep -milliseconds <i>int</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -seconds <i>int</i>
 How long to sleep, can be abbreviated to -s
 {can be piped}
 -milliseconds<i> int</i>
 How long to sleep in Milliseconds, can be abbreviated as -m
 
 <p>PS C:\&gt; $host.UI.RawUI.ReadKey(&quot;NoEcho,IncludeKeyDown&quot;)|out-null 
 
 <i class=quote>&ldquo;Many things--such as loving, going to sleep, or behaving unaffectedly--are done worst when we try hardest to do them&rdquo; ~ C.S. Lewis</i></p>
","https://ss64.com/ps/start-sleep.html","System Administration",
"Get-StorageJob","Information about long-running Storage module jobs, such as a repair task.","Not Available","Not Available","Not Available","Enumeration",
"New-StoragePool","Create a new storage pool using a group of physical disks.","Not Available","Not Available","Not Available","System Administration",
"Switch","Check multiple conditions."," Switch ($<i>item</i>)
 {
 <i>value</i> { <i>expression</i> }
 <i>value</i> { <i>expression</i> }
 }
"," <b>-r</b>egex Treat the match clause, if a string, as a Regex.
 default This provides an optional 'catch-all' for any data items that are not explicitly
 handled in the list of switch statements.
 Append 'default {<i>statementlist</i>}' as the last choice.
 The 'default' will only be used if no match is found for the other conditions.
 <b>-w</b>ildcard Treat the match clause, if a string, as a wildcard string
 Wildcard characters:
 ? = Any single unspecified character.
 bashcurl.txt bashdb.csv bashdb.sh bashregex.txt CLI_Class.docx CLI_Class.odt CMDParse.py CMDParse.txt findTEST.py gtfoREGEX.txt lolbas.csv lolbasREGEX.txt mandb.sh mansyntax.txt pscmd.txt pscurl.txt psdb.sh psdescription.txt pslinks.txt psparameters.txt pssyntax.txt scratch.txt TestDoc.txt vt wincmddb.csv wincmddb.sh wincmdregex.txt = Zero or more unspecified chars.
 [a-b] = Any character in the range a-b
 [ab] = The specified characters.
 The wildcard match is case in-sensitive 
 <b>-e</b>xact Match strings exactly (disable wildcards)
 <b>-c</b>asesensitive Modify the match clause, if a string, to be case sensitive
 <b>-f</b>ile Take input from a file (or representative)
","https://ss64.com/ps/switch.html","System Utility","Command Execution, Scripting"
"ConvertFrom-StringData","Convert a here-string into a hash table."," ConvertFrom-StringData [-StringData] <i>string</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -StringData <i>string</i> The string to be converted. Accepts piped data (string)
","https://ss64.com/ps/convertfrom-stringdata.html","File Manipulation",
"Select-String","Search through strings or files for patterns."," Select-String <b>{</b> -inputObject <i>PSObject</i><b> |</b> [-path] <i>string</i>[] <b>|</b> -LiteralPath <i>string</i>[]<b> }</b>
 [-CaseSensitive] [-Context <i>Int32</i>[]] [-Culture <i>String</i>] [-Encoding <i>Encoding</i>]
 [-Pattern] <i>string</i>[] [-Raw] [-SimpleMatch] [-Quiet]
 [-List] [-NoEmphasis] [-Include <i>string</i>[]] [-Exclude <i>string</i>[]]
 [-NotMatch] [-AllMatches] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AllMatches
 Search for more than one match in each line of text.
 Without this parameter, Select-String will find only the first match in each line. 
 When more than one match is found, Select-string still emits only
 one MatchInfo object for the line, but the Matches property of the
 object contains all of the matches.
 This parameter is ignored when used in combination with the SimpleMatch parameter.
 If you wish to return all matches and the pattern that you are searching for contains
 regular expression characters, you must escape those characters rather than using SimpleMatch.
 -CaseSensitive 
 Make the matches case sensitive. By default, matches are not case-sensitive.
 -Context <i>Int32</i>[]
 Capture the specified number of lines before and after the line with the match.
 This allows viewing the matching text in context.
 If one number is given as the value of -context, that number of lines will be
 captured before and after the match.
 If two numbers are given as the value of -context, the first number determines the
 number of lines before the match and the second number determines the number of lines after the match.
 In the default display, lines with a match are indicated by a right angle bracket (&gt;)
 in the first column of the display. Unmarked lines are the context.
 This parameter does not change the number of objects generated by Select-String.
 Select-String generates one MatchInfo object for each match.
 The context is stored as an array of strings in the Context property of the object.
 If the output of a Select-String command is piped to another Select-String command,
 the receiving command searches only the text in the matched line
 (the value of the Line property of the MatchInfo object), not the text in the context lines.
 
 When the context includes a match, the MatchInfo object for each match includes
 all of the context lines, but the overlapping lines appear only once in the display.
 -Culture <i>String
","https://ss64.com/ps/select-string.html","System Utility",
"Tee-Object","Send input objects to two places."," Tee-Object [-inputObject <i>psobject</i>] [-filePath] <i>string</i> [-Append]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Tee-Object [-inputObject <i>psobject</i>] -LiteralPath <i>string</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Tee-Object [-inputObject <i>psobject</i>] -variable <i>string</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Append
 Indicates that the cmdlet appends the output to the specified file.
 Without this parameter, the new content replaces any existing content in the file without warning.
 This parameter was introduced in Windows PowerShell 3.0.
 -inputObject <i>psobject</i>
 The object to tee.
 Enter a variable, command or expression that gets the objects.
 When you use -InputObject, instead of piping command results to Tee-Object, the -InputObject value,
 even if the value is a collection that is the result of a command, such as `InputObject (Get-Process)`
 is treated as a single object.
 Because -InputObject cannot return individual properties from an array or collection of objects, it is
 recommended that if you use Tee-Object to perform operations on a collection of objects for those objects
 that have specific values in defined properties, you use Tee-Object in the pipeline
 -filePath <i>string</i>
 Save the input object(s) to a file named <i>string</i>.
 Wildcard characters are permitted, but must resolve to a single file.
 -LiteralPath <i>string</i>
 A file that this cmdlet saves the object to.
 Unlike -FilePath, the value of -LiteralPath is used exactly as it is typed. No characters are interpreted
 as wildcards. If the path includes escape characters, enclose it in single quotation marks.
 -variable <i>string</i>
 Assign the input object(s) to a variable named <i>string</i>.
 Enter a variable name without the preceding dollar sign ($)
","https://ss64.com/ps/tee-object.html","System Utility",
"tee","Send input objects to two places."," Tee-Object [-inputObject <i>psobject</i>] [-filePath] <i>string</i> [-Append]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Tee-Object [-inputObject <i>psobject</i>] -LiteralPath <i>string</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Tee-Object [-inputObject <i>psobject</i>] -variable <i>string</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Append
 Indicates that the cmdlet appends the output to the specified file.
 Without this parameter, the new content replaces any existing content in the file without warning.
 This parameter was introduced in Windows PowerShell 3.0.
 -inputObject <i>psobject</i>
 The object to tee.
 Enter a variable, command or expression that gets the objects.
 When you use -InputObject, instead of piping command results to Tee-Object, the -InputObject value,
 even if the value is a collection that is the result of a command, such as `InputObject (Get-Process)`
 is treated as a single object.
 Because -InputObject cannot return individual properties from an array or collection of objects, it is
 recommended that if you use Tee-Object to perform operations on a collection of objects for those objects
 that have specific values in defined properties, you use Tee-Object in the pipeline
 -filePath <i>string</i>
 Save the input object(s) to a file named <i>string</i>.
 Wildcard characters are permitted, but must resolve to a single file.
 -LiteralPath <i>string</i>
 A file that this cmdlet saves the object to.
 Unlike -FilePath, the value of -LiteralPath is used exactly as it is typed. No characters are interpreted
 as wildcards. If the path includes escape characters, enclose it in single quotation marks.
 -variable <i>string</i>
 Assign the input object(s) to a variable named <i>string</i>.
 Enter a variable name without the preceding dollar sign ($)
","https://ss64.com/ps/tee-object.html","System Utility",
"New-Timespan","Create a timespan object."," New-TimeSpan [-start] <i>DateTime</i> [-end] <i>DateTime</i>
 [<i><a href=""common.html"">CommonParameters</a></i>]
 New-TimeSpan [-days <i>int</i>] [-hours <i>int</i>] [-minutes <i>int</i>]
 [-seconds <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," The timespan can either be a specific number of days/hours/minutes
 or you can enter a Start/End and PowerShell will calculate the difference.
 -Start<i>DateTime</i>
 The start of the timespan.
 -End<i> DateTime</i>
 The end of the timespan, may be piped. Default=Now
 -Days <i>int</i>
 Days in the timespan.
 -Hours <i>int</i>
 Hours in the timespan.
 -Minutes <i>int</i>
 Minutes in the timespan.
 -Seconds <i>int</i>
 Seconds in the timespan.
","https://ss64.com/ps/new-timespan.html","System Utility",
"Get-TimeZone","Get the current time zone or a list of available time zones."," Get-TimeZone -Id <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-TimeZone -ListAvailable [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-TimeZone [[-Name] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id Specify the ID or IDs of the time zones to get.
 -ListAvailable Get all the available time zones.
 -Name Specify the <i>name</i> or names of the time zones to get.
","https://ss64.com/ps/get-timezone.html","Enumeration",
"gtz","Get the current time zone or a list of available time zones."," Get-TimeZone -Id <i>String</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-TimeZone -ListAvailable [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-TimeZone [[-Name] <i>String</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id Specify the ID or IDs of the time zones to get.
 -ListAvailable Get all the available time zones.
 -Name Specify the <i>name</i> or names of the time zones to get.
","https://ss64.com/ps/get-timezone.html","Enumeration",
"Set-TimeZone","Set the system time zone to a specified time zone."," Set-TimeZone [-Confirm] -Id <i>String</i> [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TimeZone [-InputObject] <i>TimeZoneInfo</i> [-Confirm] [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TimeZone [-Name] <i>String</i> [-Confirm] [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id The ID of the time zone to set.
 -InputObject A TimeZoneInfo object to use as input.
 -Name The <i>name</i> of a time zone to set.
 -Confirm Prompt for confirmation before running the cmdlet.
 -PassThru Return an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 -WhatIf Show what would happen if the cmdlet was run. The cmdlet is not run.
","https://ss64.com/ps/set-timezone.html","System Utility",
"stz","Set the system time zone to a specified time zone."," Set-TimeZone [-Confirm] -Id <i>String</i> [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TimeZone [-InputObject] <i>TimeZoneInfo</i> [-Confirm] [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TimeZone [-Name] <i>String</i> [-Confirm] [-PassThru] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Id The ID of the time zone to set.
 -InputObject A TimeZoneInfo object to use as input.
 -Name The <i>name</i> of a time zone to set.
 -Confirm Prompt for confirmation before running the cmdlet.
 -PassThru Return an object representing the item with which you are working.
 By default, this cmdlet does not generate any output.
 -WhatIf Show what would happen if the cmdlet was run. The cmdlet is not run.
","https://ss64.com/ps/set-timezone.html","System Utility",
"Get-TlsCipherSuite","Get the list of cipher suites for TLS for a computer.","Not Available","Not Available","Not Available","Enumeration",
"Get-Tpm","Trusted Platform Module (TPM)","Not Available","Not Available","Not Available","Enumeration",
"Trace-Command","Trace an expression or command."," Trace-Command [-command] <i>string </i>[-argumentList <i>Object</i>[]] [-name] <i>string</i>[] 
 [-option] <i>PSTraceSourceOptions</i> [-FilePath <i>string</i>]
 [-debugger] [-PSHost] [-ListenerOption <i>TraceOptions</i>]
 [-inputObject <i>psobject</i>] 
 [-force] [<i><a href=""common.html"">CommonParameters</a></i>]
 Trace-Command [-Expression] <i>scriptblock</i> [-Name] <i>string</i>[] 
 [-Option] <i>PSTraceSourceOptions</i> [-FilePath <i>string</i>]
 [-Debugger] [-PSHost] [-ListenerOption <i>TraceOptions</i>]
 [-InputObject <i>psobject</i>] [-Force] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>[]
 Name of the trace source of each component to be traced.
 Wildcards are permitted.
 Use Get-TraceSource to find the trace sources on your computer.
 -ArgumentList <i>Object</i>[]
 Parameters and parameter values for the command being traced.
 This feature is especially useful for debugging dynamic parameters.
 -Command <i>string
","https://ss64.com/ps/trace-command.html","System Utility",
"Get-Tracesource","Get components that are instrumented for tracing."," Get-TraceSource [[-name] <i>string</i>[]] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -name <i>string</i>
 Get only the specified trace sources, wildcards are permitted.
","https://ss64.com/ps/get-tracesource.html","Enumeration",
"Set-Tracesource","Trace a PowerShell component."," Set-TraceSource [-name] <i>string</i>[] [[-option] <i>PSTraceSourceOptions</i>
 [-filePath <i>string</i>] [-debugger] [-pSHost] [-listenerOption <i>TraceOptions</i>]
 [-passThru] [-force] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TraceSource [-removeListener <i>string</i>[]] [-name] <i>string</i>[] 
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-TraceSource [-removeFileListener <i>string</i>[]] [-name] <i>string</i>[] 
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>[]
 Name of the trace source of each component to be traced.
 Wildcards are permitted.
 -Option <i>PSTraceSourceOptions</i>
 Type of events to trace, comma separated enclosed in quotes: 
 
 &quot;None, Constructor, Dispose, Finalizer, Method, Property, Delegates,
 Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine,
 Data, Scope, ExecutionFlow, Assert, <u>All</u>&quot;.
 -FilePath <i>string</i>
 Send the trace output to specified file. This will also select the
 file trace listener. Use -RemoveFileListener to stop this trace.
 -Debugger 
 Send the trace output to the debugger (or in Visual Studio) This will
 also select the default trace listener.
 -pSHost 
 Send the trace output to the PowerShell host.
 This will also select the PSHost trace listener.
 -ListenerOption <i>TraceOptions</i>
 Add optional data to the prefix of each trace message in the output:
 &quot;<u>None</u>, LogicalOperationStack, DateTime, Timestamp,
 ProcessId, ThreadId, or Callstack&quot;
 -PassThru
 Pass the object created by this cmdlet through the pipeline.
 -RemoveListener <i>string</i>[]
 Stop the trace by removing the trace listener. 
 Either Host to remove PSHost (console)
 or Debug to remove Debugger
 or * to remove all trace listeners.
 -RemoveFileListener <i>string</i>[]
 Stop the trace by removing the file trace listener associated with the
 specified trace output filename. Enter the path and filename of the  trace output file.
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. overwrite a read-only file.
","https://ss64.com/ps/set-tracesource.html","System Utility",
"Start-Transaction","Start a new transaction."," Start-Transaction [-Independent]
 [-RollbackPreference {Error | TerminatingError | Never}]
 [-Timeout <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Independent
 Start a transaction that is independent of any transactions in progress.
 By default, if you use Start-Transaction while another transaction is in
 progress, a new subscriber is added to the transaction in progress.
 This parameter only takes effect when a transaction is already in progress in the session. 
 
 By default, if you use Start-Transaction while a transaction is in progress,
 the existing transaction object is reused and the subscriber count is
 incremented. The effect is much like joining the original transaction.
 An Undo-Transaction command will roll back the entire the transaction.
 To complete the transaction, a Complete-Transaction command must be run for
 each subscriber. Because most transactions that are in progress at the same time
 are related, the default is sufficient for most uses.
 
 If you use the -Independent parameter, a new transaction is created that
 can be completed or undone without affecting the original transaction.
 However, because only one transaction can be active at a time, the new
 transaction must be completed or rolled back before resuming the original transaction.
 
 -RollbackPreference <i>RollbackSeverity</i>
 The conditions under which a transaction is automatically rolled back.
 Valid values:
 
 <u>Error</u> The transaction is rolled back automatically if a 
 terminating or non-terminating error occurs.
 Terminating error The transaction is rolled back automatically if a
 terminating error occurs.
 Never The transaction is never rolled back automatically.
 
 -Timeout <i>int</i>
 The maximum time, in minutes, that the transaction may be active.
 When the time-out expires, the transaction is automatically rolled back. 
 
 By default, there is no time-out for transactions that are started at
 the command line. When transactions are started by a script, the
 default time-out is 30 minutes.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if the command was executed without actually
 executing the command.
","https://ss64.com/ps/start-transaction.html","System Utility",
"Complete-Transaction","Commit the transaction."," Complete-Transaction [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 
","https://ss64.com/ps/complete-transaction.html","System Utility",
"Get-Transaction","Get information about the active transaction."," Get-Transaction [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-transaction.html","Enumeration",
"Use-Transaction","Add a command or expression to the transaction."," Use-Transaction [-TransactedScript] <i>scriptblock</i> 
 [-UseTransaction] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -TransactedScript <i>scriptblock</i>
 The script block that is run in the transaction.
 Enter any valid script block enclosed in braces { }
 This parameter is required.
 -UseTransaction
 Include the command in the active transaction.
","https://ss64.com/ps/use-transaction.html","System Utility",
"Undo-Transaction","Roll back a transaction."," Undo-Transaction [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/undo-transaction.html","System Utility",
"Start-Transcript","Start a transcript of a command shell session."," Start-Transcript [-Path] <i>string</i>] [-Force] [-noClobber]
 [-Append] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Path <i>string</i>
 The path to the transcript file. 
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. override a files read-only attribute.
 -NoClobber 
 Do not overwrite an existing file.
 -Append 
 Add the new transcript to the end of an existing file.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/start-transcript.html","System Utility",
"Stop-Transcript","Stop the transcription process."," Stop-Transcript [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/stop-transcript.html","System Utility",
"Trap","Handle a terminating error."," trap [[<i>error_type</i>]] <b>{</b><i>statement_list</i><b>}</b>
"," error_type The terminating error to trap, requires [brackets].
 <i>statement_list</i> A scriptblock of code to be run.
","https://ss64.com/ps/trap.html","System Utility","Command Execution, Scripting"
"Try","Handle a terminating error within a scriptblock."," try <b>{</b><i>statement_list</i><b>}</b>
 catch [[<i>error_type</i>][',' <i>error_type</i>]*] <b>{</b><i>statement_list</i><b>}</b>
 finally <b>{</b><i>statement_list</i><b>}</b>
"," <i>statement_list</i> A scriptblock of code to be run
","https://ss64.com/ps/try.html","System Utility","Command Execution, Scripting"
"Add-Type","Add a .NET Framework type to a PowerShell session."," Add-Type <b>-AssemblyName</b> <i>string</i>[]
 [-IgnoreWarnings] [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-Type [<b>-Name</b>] <i>string</i> [-MemberDefinition] <i>string</i>[]
 [-CodeDomProvider <i>CodeDomProvider</i>] [-CompilerParameters <i>CompilerParameters</i>]
 [-Language {CSharp | CSharpVersion3 | VisualBasic | JScript}]
 [-Namespace <i>string</i>] [-OutputAssembly <i>string</i>]
 [-OutputType <i>OutputAssemblyType</i>] [-ReferencedAssemblies <i>string</i>[]]
 [-UsingNamespace <i>string</i>[]] [-IgnoreWarnings] [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-Type [<b>-Path</b>] <i>string</i>[] [-CompilerParameters <i>CompilerParameters</i>]
 [-OutputAssembly <i>string</i>]
 [-OutputType <i>OutputAssemblyType</i>] [-ReferencedAssemblies <i>string</i>[]]
 [-IgnoreWarnings] [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Add-Type [<b>-TypeDefinition</b>] <i>string</i> [-CodeDomProvider <i>CodeDomProvider</i>]
 [-CompilerParameters <i>CompilerParameters</i>]
 [-Language {CSharp | CSharpVersion3 | VisualBasic | JScript}]
 [-OutputAssembly <i>string</i>] [-OutputType <i>OutputAssemblyType</i>]
 [-ReferencedAssemblies <i>string</i>[]] [-IgnoreWarnings] 
 [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
 Add-Type [<b>-CompilerParameters</b> <i>CompilerParameters</i>] [-OutputAssembly <i>String</i>]
 [-OutputType {ConsoleApplication | Library | WindowsApplication}]
 [-ReferencedAssemblies <i>String</i>[]] -LiteralPath <i>String</i>[]
 [-IgnoreWarnings] [-PassThru] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AssemblyName 
 The name of an assembly that includes the types. Wildcard characters are permitted
 This parameter does not accept a path or file name. To enter the path to the assembly DLL, use -Path.
 -CodeDomProvider A code generator or compiler. The default is the CSharp compiler.
 -CompilerParameters The options for the source code compiler.
 You cannot use -CompilerParameters and -ReferencedAssemblies in the same command.
 These options are sent to the compiler without revision.  -IgnoreWarnings Ignores compiler warnings. Don’t handle compiler warnings as errors.
 -Language Specifies the language used in the source code. Valid values are &quot;CSharp&quot;, &quot;CSharpVersion3&quot;, &quot;VisualBasic&quot;, and &quot;JScript&quot;.
 &quot;CSharp&quot; is the default.
 -LiteralPath <i>String</i>[]
 The path to source code files or assembly DLL files that contain the types.
 Unlike -Path, the value of -LiteralPath is used exactly as it is typed.
 No characters are interpreted as wildcards. If the path includes escape characters,
 enclose it in single quotation marks, this tells PowerShell not to interpret any
 characters as escape sequences.
 -MemberDefinition <i>String</i>[] Specify new properties or methods for the class. Add-Type generates the template code
 required to support the properties or methods.
 Use this feature to make Platform Invoke (P/Invoke) calls to unmanaged functions in PowerShell.
 -Name <i>String</i> The name of the class to create. Required when generating a type from a member definition.
 The type name and namespace must be unique within a session. You cannot unload a type or
 change it.
 If you need to change the code for a type, change the name or start a new PowerShell session.
 Otherwise, the command will fail.
 -Namespace <i>String</i> A namespace for the type. If this parameter is not included in the command, the type is
 created in the <i>Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes</i> namespace.
 If the parameter is included in the command with an empty string value or a value of $null,
 the type is generated in the global namespace.
 -OutputAssembly <i>String</i> Generate a DLL file for the assembly with the specified name in the location. Enter a path (optional)
 and file name. Wildcard characters are permitted. By default, Add-Type generates the assembly only in memory.
 -OutputType <i>OutputAssemblyType</i> The output type of the output assembly. 
 Valid values are Library, ConsoleApplication, and WindowsApplication.  By default, no output type is specified.
 -PassThru Return a System.Runtime object that represents the types that were added.
 -Path The path to source code files or assembly DLL files that contain the types.
 -ReferencedAssemblies  The assemblies upon which the type depends in addition to the default references,
 System.dll and System.Management.Automation.dll
 You cannot use -CompilerParameters and -ReferencedAssemblies in the same command.
 -TypeDefinition  The source code that contains the type definitions. Enter the source code in a
 string or here-string, or enter a variable that contains the source code.
 Include a namespace declaration in your type definition. If you omit the namespace declaration,
 your type might have the same name as another type or the shortcut for another type,
 causing an unintentional overwrite. For example, if you define a type called &quot;Exception&quot;,
 scripts that use &quot;Exception&quot; as the shortcut for System.Exception will fail.
 -UsingNamespace Other namespaces that are required for the class.
 This is much like the <i>Using</i> keyword in C#.
","https://ss64.com/ps/add-type.html","System Utility","Command Execution, Scripting"
"Update-TypeData","Update extended type configuration."," Update-TypeData [[-AppendPath] <i>string</i>[]] [-PrependPath <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AppendPath <i>string</i>[]
 Path to additional .ps1xml format files to be loaded. 
 These files will be processed in the order they are 
 specified and <b>after</b> the built-in files are loaded.
 -PrependPath <i>string</i>[]
 Path to additional .ps1xml format files to be loaded.
 These files will be processed in the order they are 
 specified and <b>before</b> the built-in files are loaded.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/update-typedata.html","System Utility",
"Get-Uiculture","Get the ui culture information."," Get-UICulture [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-uiculture.html","Enumeration",
"Unblock-File","Unblock files downloaded from the Internet."," Unblock-File [ [-path] | -literalPath ] <i>string</i>[]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -path <i>string</i>[]
 The files to unblock. Wildcard characters are supported.
 -literalPath <i>string</i>[]
 The files to unblock, like Path above, only the value is used exactly as typed.
 No characters are interpreted as wildcards. If the path includes any
 escape characters then enclose the path in single quotation marks.
 -confirm
 Prompt for confirmation before executing the cmdlet.
 -whatIf
 Describe what would happen if you executed the command without actually
 executing the command.
","https://ss64.com/ps/unblock-file.html","System Administration, File Manipulation",
"Get-Unique","Get the unique items in a collection."," Get-Unique [-inputObject <i>psobject</i>] [-asString] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Unique [-inputObject <i>psobject</i>] [-onType] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -asString 
 Treat the data as a string, not an object.
 Use this parameter to find the unique values of object properties
 e.g. file names.
 For a collection of objects of the same type, Get-Unique will
 returns just one (the first). 
 -inputObject
 The objects to filter. Enter a variable that contains the objects or type
 an expression that returns the objects.
 When the -InputObject parameter is used to submit a collection of items,
 Get-Unique receives one object that represents the collection.
 Because one object cannot be filtered, Get-Unique returns the entire collection unchanged.
 To filter multiple items, pipe them to Get-Unique.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -onType 
 Return only one object of each type.
","https://ss64.com/ps/get-unique.html","Enumeration",
"gu","Get the unique items in a collection."," Get-Unique [-inputObject <i>psobject</i>] [-asString] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-Unique [-inputObject <i>psobject</i>] [-onType] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -asString 
 Treat the data as a string, not an object.
 Use this parameter to find the unique values of object properties
 e.g. file names.
 For a collection of objects of the same type, Get-Unique will
 returns just one (the first). 
 -inputObject
 The objects to filter. Enter a variable that contains the objects or type
 an expression that returns the objects.
 When the -InputObject parameter is used to submit a collection of items,
 Get-Unique receives one object that represents the collection.
 Because one object cannot be filtered, Get-Unique returns the entire collection unchanged.
 To filter multiple items, pipe them to Get-Unique.
 This parameter is an implementation detail: its purpose is to enable input via the pipeline, and its
 direct use with arrays (collections) does not (yet) provide any useful functionality.
 -onType 
 Return only one object of each type.
","https://ss64.com/ps/get-unique.html","Enumeration",
"Update-Formatdata","Update and append format data files."," Update-FormatData [[-appendPath] <i>string</i>[]]
 [-prependPath <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AppendPath <i>string</i>[]
 Add the specified formatting files to the session.
 Path to additional .ps1xml format files to be loaded. 
 These files will be processed in the order they are 
 specified and <b>after</b> the built-in files are loaded.
 -PrependPath <i>string</i>[]
 Add the specified formatting files to the session.
 Path to additional .ps1xml format files to be loaded.
 These files will be processed in the order they are 
 specified and <b>before</b> the built-in files are loaded.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/update-formatdata.html","File Manipulation, System Administration",
"Update-Help","Download and install help files."," Update-Help [[-Module] <i>String</i>[]] [<b>-LiteralPath</b> <i>String</i>[]]
 [[-UICulture] <i>CultureInfo</i>[]] [-Credential <i>PSCredential</i>] [-UseDefaultCredentials]
 [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-Force] [-Recurse] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Update-Help [[-Module] <i>String</i>[]] [[<b>-SourcePath</b>] <i>String</i>[]]
 [[-UICulture] <i>CultureInfo</i>[]] [-Credential <i>PSCredential</i>] [-UseDefaultCredentials]
 [-FullyQualifiedModule <i>ModuleSpecification</i>[]]
 [-Recurse] [-Force] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Credential <i>PSCredential</i>
 Specify credentials of a user who has permission to access the file system location specified by -SourcePath.
 This parameter is valid only when the -SourcePath or -LiteralPath parameter is used in the command.
 
 This parameter enables you to run Update-Help commands that have -SourcePath on remote computers.
 By providing explicit credentials, you can run the command on a remote computer and access a file
 share on a third computer without an access denied error or using CredSSP authentication to delegate credentials.
 
 -Force
 Ignore the once-per-day update limitation, skip version checking, and allow downloading help files that exceed 1 GB.
 
 Without this parameter, Update-Help runs only once in each 24-hour period, downloads are limited to 1 GB of 
 uncompressed content per module and help files are installed only when they are newer than the files on the 
 computer.
 
 The once-per-day limit protects the servers that host the help files and makes it practical for you to add an 
 Update-Help command to your Windows PowerShell profile without incurring the resource cost of repeated 
 connections or downloads.
 
 To update help for a module in multiple UI cultures without the Force parameter, include all UI cultures in 
 the same command, such as: `Update-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR`
 
 -FullyQualifiedModule <i>ModuleSpecification</i>[]
 Specifies modules with names that are specified in the form of ModuleSpecification objects. These are 
 described in the Remarks section of about_Group_Policy_Settings.
 
 -UICulture <i>CultureInfo</i>[]
 Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, 
 such as es-ES, a variable that contains culture objects, or a command that gets culture objects, such as a 
 Get-Culture or Get-UICulture command. Wildcard characters are not permitted and you cannot submit a partial 
 language code, such as de.
 
 By default, Update-Help gets help files in the UI culture set for Windows or its fallback culture.
 If you specify -UICulture, Update-Help looks for help only for the specified UI culture, not in any 
 fallback culture.
 
 Commands that use the UICulture parameter succeed only when the module provides help files for the specified 
 UI culture. If the command fails because the specified UI culture is not supported, the error message includes 
 a list of UI cultures that the module supports.
 
 -UseDefaultCredentials
 Indicates that this cmdlet runs the command, including the Internet download, by using the credentials of the 
 current user. By default, the command runs without explicit credentials.
 
 This parameter is effective only when the Web download uses NTLM, negotiate, or Kerberos-based authentication.
 
 -confirm
 Prompt for confirmation before executing the command.
 
 -WhatIf
 Shows what would happen if the cmdlet runs. The cmdlet is not run.
","https://ss64.com/ps/update-help.html","System Administration",
"Update-Typedata","Update the current extended type configuration."," Update-TypeData [[-AppendPath] <i>string</i>[]] [-PrependPath <i>string</i>[]]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -AppendPath <i>string</i>[]
 Path to additional .ps1xml format files to be loaded. 
 These files will be processed in the order they are 
 specified and <b>after</b> the built-in files are loaded.
 -PrependPath <i>string</i>[]
 Path to additional .ps1xml format files to be loaded.
 These files will be processed in the order they are 
 specified and <b>before</b> the built-in files are loaded.
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/update-typedata.html","System Administration",
"Clear-Variable","Remove the value from a variable."," Clear-Variable [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-scope <i>string</i>] [-force] [-passThru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/clear-variable.html","System Utility",
"clv","Remove the value from a variable."," Clear-Variable [-name] <i>string</i>[]
 [-include <i>string</i>[]] [-exclude <i>string</i>[] ]
 [-scope <i>string</i>] [-force] [-passThru] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/clear-variable.html","System Utility",
"Get-Variable","Get a PowerShell variable."," Get-Variable [[-Name] <i>String[] </i>]
 [-Include <i>string</i>] [-Exclude <i>string</i>] 
 [-valueOnly] [-scope <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the variable(s), may be piped.
 -include <i>string</i>
 Retrieve only the specified items.
 Wildcards are permitted.
 -exclude <i>string</i>
 Omit the specified items. Wildcards are permitted.
 
 -valueOnly
 Get only the value of the variable.
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
","https://ss64.com/ps/get-variable.html","System Utility",
"Get-Variable","Get a PowerShell variable."," Get-Variable [[-Name] <i>String[] </i>]
 [-Include <i>string</i>] [-Exclude <i>string</i>] 
 [-valueOnly] [-scope <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the variable(s), may be piped.
 -include <i>string</i>
 Retrieve only the specified items.
 Wildcards are permitted.
 -exclude <i>string</i>
 Omit the specified items. Wildcards are permitted.
 
 -valueOnly
 Get only the value of the variable.
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
","https://ss64.com/ps/get-variable.html","System Utility",
"gv","Get a PowerShell variable."," Get-Variable [[-Name] <i>String[] </i>]
 [-Include <i>string</i>] [-Exclude <i>string</i>] 
 [-valueOnly] [-scope <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the variable(s), may be piped.
 -include <i>string</i>
 Retrieve only the specified items.
 Wildcards are permitted.
 -exclude <i>string</i>
 Omit the specified items. Wildcards are permitted.
 
 -valueOnly
 Get only the value of the variable.
 -scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
","https://ss64.com/ps/get-variable.html","System Utility",
"New-Variable","Create a new variable."," New-Variable [-Name] <i>String</i> [[-value] <i>Object</i>]
 [-scope <i>string</i>] [-description <i>string</i>] [-Visibility {Public | Private}]
 [-option {<u>None</u> | ReadOnly | Constant | Private | AllScope}]
 [-force] [-passThru] [-whatIf] [-confirm]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the new variable(s).
 -Value <i>Object</i>
 The value to assign to the variable, may be piped.
 -Scope <i>string</i>
 The scope in which this variable is valid. 
 Valid values are Global, <u>Local</u>, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -Description <i>string</i>
 A description of the variable
 -Option <i>string</i>
 Where the new variable should be visible/changeable:
 Valid values are:
 <u>None</u> Set no options. (&quot;None&quot; is the default.)
 ReadOnly The value of the variable cannot be changed except by using
 the Force parameter. You can use Remove-Variable to delete the variable.
 Constant The variable cannot be deleted, and its properties cannot be changed.
 &quot;Constant&quot; is available only when you are creating an alias.
 You cannot change the option of an existing variable to &quot;Constant&quot;.
 Private The variable is available only within the scope specified by the Scope parameter.
 It is inherited by child scopes. (This value is not related to the
 &quot;Private&quot; value of the Visibility parameter.)
 AllScope The variable is copied to any new scopes that are created.
 To see the Options property of the variables, type:
 &quot;get-variable| format-table -property name, options -autosize&quot;
 -Force 
 Override restrictions as long as security is not compromised.
 Allow a new variable to be created with the same name as an existing read-only variable.
 -Visibility {Public | Private}
 Whether the variable is visible outside of the session in which it was created.
 This parameter is designed for use in scripts and commands that will be delivered to other users.
 When a variable is private, it does not appear in lists of variables, such as
 those returned by Get-Variable, or in displays of the Variable: drive.
 Commands to read or change the value of a private variable return an error.
 However, the user can run commands that use a private variable if the commands were
 written in the session in which the variable was defined.
 -PassThru
 Pass the object through the pipeline. By default, New-Variable 
 does not pass any objects through the pipeline.
 
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-variable.html","System Utility",
"nv","Create a new variable."," New-Variable [-Name] <i>String</i> [[-value] <i>Object</i>]
 [-scope <i>string</i>] [-description <i>string</i>] [-Visibility {Public | Private}]
 [-option {<u>None</u> | ReadOnly | Constant | Private | AllScope}]
 [-force] [-passThru] [-whatIf] [-confirm]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the new variable(s).
 -Value <i>Object</i>
 The value to assign to the variable, may be piped.
 -Scope <i>string</i>
 The scope in which this variable is valid. 
 Valid values are Global, <u>Local</u>, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -Description <i>string</i>
 A description of the variable
 -Option <i>string</i>
 Where the new variable should be visible/changeable:
 Valid values are:
 <u>None</u> Set no options. (&quot;None&quot; is the default.)
 ReadOnly The value of the variable cannot be changed except by using
 the Force parameter. You can use Remove-Variable to delete the variable.
 Constant The variable cannot be deleted, and its properties cannot be changed.
 &quot;Constant&quot; is available only when you are creating an alias.
 You cannot change the option of an existing variable to &quot;Constant&quot;.
 Private The variable is available only within the scope specified by the Scope parameter.
 It is inherited by child scopes. (This value is not related to the
 &quot;Private&quot; value of the Visibility parameter.)
 AllScope The variable is copied to any new scopes that are created.
 To see the Options property of the variables, type:
 &quot;get-variable| format-table -property name, options -autosize&quot;
 -Force 
 Override restrictions as long as security is not compromised.
 Allow a new variable to be created with the same name as an existing read-only variable.
 -Visibility {Public | Private}
 Whether the variable is visible outside of the session in which it was created.
 This parameter is designed for use in scripts and commands that will be delivered to other users.
 When a variable is private, it does not appear in lists of variables, such as
 those returned by Get-Variable, or in displays of the Variable: drive.
 Commands to read or change the value of a private variable return an error.
 However, the user can run commands that use a private variable if the commands were
 written in the session in which the variable was defined.
 -PassThru
 Pass the object through the pipeline. By default, New-Variable 
 does not pass any objects through the pipeline.
 
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/new-variable.html","System Utility",
"Remove-Variable","Remove a variable and its value."," Remove-Variable [[-Name] <i>String[] </i>]
 [-Include <i>string</i>] [-Exclude <i>string</i>] 
 [-scope <i>string</i>] [-force] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the variable(s) to be removed.
 -include <i>string</i>
 Delete only the specified items.
 Wildcards are permitted.
 Qualifies the -Name parameter.
 -Exclude <i>string</i>
 Omit the specified items. Wildcards are permitted.
 Qualifies the -Name parameter.
 -Scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scopes<b>.</b>
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -force will override a files read-only
 attribute, but will not remove a constant.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/remove-variable.html","System Utility",
"rv","Remove a variable and its value."," Remove-Variable [[-Name] <i>String[] </i>]
 [-Include <i>string</i>] [-Exclude <i>string</i>] 
 [-scope <i>string</i>] [-force] [-whatIf]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name 
 The name of the variable(s) to be removed.
 -include <i>string</i>
 Delete only the specified items.
 Wildcards are permitted.
 Qualifies the -Name parameter.
 -Exclude <i>string</i>
 Omit the specified items. Wildcards are permitted.
 Qualifies the -Name parameter.
 -Scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scopes<b>.</b>
 -Force
 Override restrictions that prevent the command from succeeding, apart
 from security settings. e.g. -force will override a files read-only
 attribute, but will not remove a constant.
 -WhatIf
 Describe what would happen if you executed the command without
 actually executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
","https://ss64.com/ps/remove-variable.html","System Utility",
"Set-Variable","Set a variable and a value."," Set-Variable [-Name] <i>String[] </i>[-value] <i>Object</i>] 
 [-Include <i>string[]</i>] [-Exclude <i>string[]</i>] [-option <i>option</i>]
 [-scope <i>string</i>] [-force] [-passThru] [-whatIf]
 [-Description <i>string</i>] [-Visibility <b>{</b><u>Public</u> | Private<b>}</b> ]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>String</i>
 The name of the variable(s), may be piped.
 -Value <i>Object</i>
 The value to assign to the variable.
 -Include <i>string</i>
 Items upon which Set-variable will act, excluding all others.
 -Exclude <i>string</i>
 Items upon which Set-variable will not act, include all others.
 -Option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes. 
 AllScope: The variable is copied to any new scopes that are created.
 -Scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -force
 create a variable with the same name as an existing read-only variable,
 or change the value of a read-only variable. 
 By default, a variable may be overwritten, unless it has an option value
 of &quot;ReadOnly&quot; or &quot;Constant&quot;. For more information, see the -Option parameter.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -Visibility <b>{</b><u>Public</u> | Private<b>}</b>
 Whether the variable is visible outside of the session in which it was created. This parameter is designed for use in scripts and commands that
 will be delivered to other users.  When a variable is private, it does not appear in lists of variables, such as
 those returned by Get-Variable, or in displays of the Variable: drive.
 Commands to read or change the value of a private variable return an error.
 However, the user can run commands that use a private variable if the
 commands were written in the session in which the variable was defined.
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -Description <i>string</i>
 The description of the variable.
","https://ss64.com/ps/set-variable.html","System Utility",
"set","Set a variable and a value."," Set-Variable [-Name] <i>String[] </i>[-value] <i>Object</i>] 
 [-Include <i>string[]</i>] [-Exclude <i>string[]</i>] [-option <i>option</i>]
 [-scope <i>string</i>] [-force] [-passThru] [-whatIf]
 [-Description <i>string</i>] [-Visibility <b>{</b><u>Public</u> | Private<b>}</b> ]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>String</i>
 The name of the variable(s), may be piped.
 -Value <i>Object</i>
 The value to assign to the variable.
 -Include <i>string</i>
 Items upon which Set-variable will act, excluding all others.
 -Exclude <i>string</i>
 Items upon which Set-variable will not act, include all others.
 -Option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes. 
 AllScope: The variable is copied to any new scopes that are created.
 -Scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -force
 create a variable with the same name as an existing read-only variable,
 or change the value of a read-only variable. 
 By default, a variable may be overwritten, unless it has an option value
 of &quot;ReadOnly&quot; or &quot;Constant&quot;. For more information, see the -Option parameter.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -Visibility <b>{</b><u>Public</u> | Private<b>}</b>
 Whether the variable is visible outside of the session in which it was created. This parameter is designed for use in scripts and commands that
 will be delivered to other users.  When a variable is private, it does not appear in lists of variables, such as
 those returned by Get-Variable, or in displays of the Variable: drive.
 Commands to read or change the value of a private variable return an error.
 However, the user can run commands that use a private variable if the
 commands were written in the session in which the variable was defined.
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -Description <i>string</i>
 The description of the variable.
","https://ss64.com/ps/set-variable.html","System Utility",
"sv","Set a variable and a value."," Set-Variable [-Name] <i>String[] </i>[-value] <i>Object</i>] 
 [-Include <i>string[]</i>] [-Exclude <i>string[]</i>] [-option <i>option</i>]
 [-scope <i>string</i>] [-force] [-passThru] [-whatIf]
 [-Description <i>string</i>] [-Visibility <b>{</b><u>Public</u> | Private<b>}</b> ]
 [-confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>String</i>
 The name of the variable(s), may be piped.
 -Value <i>Object</i>
 The value to assign to the variable.
 -Include <i>string</i>
 Items upon which Set-variable will act, excluding all others.
 -Exclude <i>string</i>
 Items upon which Set-variable will not act, include all others.
 -Option <i>option</i>
 The valid options are: 
 None : Set no options. (default) 
 ReadOnly: The alias cannot be changed unless you use -Force. 
 Constant: The alias cannot be changed, even by using -Force. 
 Private : The alias is available only within the scope specified by -Scope. 
 It is invisible in all other scopes. 
 AllScope: The variable is copied to any new scopes that are created.
 -Scope <i>string</i>
 The scope in which this alias is valid. 
 Valid values are Global, Local, &quot;Private&quot; or Script, or a number 
 relative to the current scope ( 0 through the number of scopes, where 
 0 is the current scope and 1 is its parent). Local is the default.
 For more, type get-help about_scope<b>.</b>
 -force
 create a variable with the same name as an existing read-only variable,
 or change the value of a read-only variable. 
 By default, a variable may be overwritten, unless it has an option value
 of &quot;ReadOnly&quot; or &quot;Constant&quot;. For more information, see the -Option parameter.
 -passThru 
 Pass the object created by this cmdlet through the pipeline.
 -Visibility <b>{</b><u>Public</u> | Private<b>}</b>
 Whether the variable is visible outside of the session in which it was created. This parameter is designed for use in scripts and commands that
 will be delivered to other users.  When a variable is private, it does not appear in lists of variables, such as
 those returned by Get-Variable, or in displays of the Variable: drive.
 Commands to read or change the value of a private variable return an error.
 However, the user can run commands that use a private variable if the
 commands were written in the session in which the variable was defined.
 -WhatIf
 Describe what would happen if you executed the command without actually
 executing the command.
 -Confirm
 Prompt for confirmation before executing the command.
 -Description <i>string</i>
 The description of the variable.
","https://ss64.com/ps/set-variable.html","System Utility",
"Get-VirtualDisk","Return a list of VirtualDisks across storage pools/providers.","Not Available","Not Available","Not Available","Enumeration, System Administration","Disk/Volume Management"
"New-VirtualDisk","Create a new virtual disk in the specified storage pool.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Get-Volume","Get the specified Volume object, or all Volume objects.","Not Available","Not Available","Not Available","Enumeration, System Administration","Disk/Volume Management"
"Format-Volume","Format one or more volumes.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"New-Volume","Create a volume with the specified file system.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Optimize-Volume","Optimize a volume.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Repair-Volume","Perform repairs on a volume.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Add-VpnConnection","Add a VPN connection to the Connection Manager phone book.","Not Available","Not Available","Not Available","System Administration, Networking",
"Get-VpnConnection","Retrieve the specified VPN connection profile information.","Not Available","Not Available","Not Available","System Administration, Networking, Enumeration",
"Set-VpnConnection","Change the config. of a VPN connection profile.","Not Available","Not Available","Not Available","System Administration, Networking",
"Add-VpnConnectionRoute","Add a route to a VPN connection.","Not Available","Not Available","Not Available","System Administration, Networking",
"Checkpoint-WebApplicationMonitoring","Create a checkpoint for an IIS web app."," Checkpoint-WebApplicationMonitoring [-Name] <i>String</i>
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>String
","https://ss64.com/ps/checkpoint-webapplicationmonitoring.html","System Administration",
"Get-WebApplicationMonitoringStatus","Get the monitoring status of web apps."," Get-WebApplicationMonitoringStatus
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command, without actually executing the command.
","https://ss64.com/ps/get-webapplicationmonitoringstatus.html","Enumeration, System Administration",
"New-WebServiceProxy","Create a Web service proxy object."," New-WebServiceProxy [-URI] <i>Uri</i> [[-Class] <i>string</i>]
 [[-Namespace] <i>string</i>] [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 New-WebServiceProxy [-URI] <i>Uri</i> [[-Class] <i>string</i>]
 [[-Namespace] <i>string</i>] [-UseDefaultCredential] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Class <i>string</i>
 A name for the proxy class that the cmdlet creates for the Web service.
 This is used with -Namespace to provide a fully qualified name for the class.
 The default value is generated from the URI.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action.
 The default is the current user. This is an alternative to using -UseDefaultCredential.
 Type a user name, such as &quot;User64&quot; or &quot;Domain64\User64&quot;. Or, enter a PSCredential object,
 such as one generated by Get-Credential. If you type a user name, you will be prompted for a password.
 -Namespace <i>string</i>
 A namespace for the new class.
 The value of this parameter is used with -Class to generate a fully
 qualified name for the class.
 The default value is Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes
 plus a type that is generated from the URI.
 The value of -Namespace may be set so that multiple Web services can be accessed
 with the same name.
 -URI <i>Uri</i>
 The URI of the Web service.
 Enter a URI or the path and file name of a file that contains a service description.
 The URI must refer to an .asmx page or to a page that returns a service description.
 To return a service description of a Web service that was created by using ASP.NET,
 append &quot;?WSDL&quot; to the URL of the Web service (for example, https://www.ss64.com/MyWebService.asmx?WSDL).
 -UseDefaultCredential
 Set the -UseDefaultCredential parameter in the resulting proxy object to True.
 This is an alternative to using the -Credential parameter.
","https://ss64.com/ps/new-webserviceproxy.html","System Administration",
"Invoke-WebRequest","Get content from a web page."," Invoke-WebRequest [-Uri] <i>Uri</i> [-Body <i>Object</i>] [-Certificate <i>X509Certificate</i>] [-CertificateThumbprint <i>String</i>] 
 [-ContentType <i>String</i>] [-Credential <i>PSCredential</i>] [-DisableKeepAlive] [-Headers <i>IDictionary</i>]
 [-InFile <i>String</i>] [-MaximumRedirection <i>Int32</i>]
 [-Method <b>{</b>Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch<b>}</b>]
 [-OutFile <i>String</i>] [-PassThru] [-Proxy <i>Uri</i>] [-ProxyCredential <i>PSCredential</i>] 
 [-ProxyUseDefaultCredentials] [-SessionVariable <i>String</i>] [-TimeoutSec <i>Int32</i>]
 [-TransferEncoding <b>{</b>chunked | compress | deflate | gzip | identity<b>}</b>]
 [-UseBasicParsing] [-UseDefaultCredentials] [-UserAgent <i>String</i>] 
 [-WebSession <i>WebRequestSession</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Body <i>Object</i>
 The body of the request. The body is the content of the request that follows the headers.
 You can also pipe a body value to Invoke-WebRequest.
 The Body parameter can be used to specify a list of query parameters or specify the content of the response.
 When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to 
 the URI as query parameters. For other GET requests, the body is set as the value of the request body in the 
 standard name=value format.
 When the body is a form, or it is the output of an Invoke-WebRequest call, Windows PowerShell sets the request 
 content to the form fields.
 For example:
 
 `$R = Invoke-WebRequest http://website.com/login.aspx` `$R.Forms[0].Name = MyName` `$R.Forms[0].Password = 
 MyPassword` `Invoke-RestMethod http://website.com/service.aspx -Body $R`
 - or -
 `Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]`
 -Certificate <i>X509Certificate</i>
 The client certificate that is used for a secure web request. Enter a variable that contains a certificate
 or a command or expression that gets the certificate.
 To find a certificate, use Get-PfxCertificate or use the Get-ChildItem cmdlet in the Certificate (Cert:) 
 drive. If the certificate is not valid or does not have sufficient authority, the command fails.
 -CertificateThumbprint <i>String</i>
 The digital public key certificate (X509) of a user account that has permission to send the request. 
 Enter the certificate thumbprint of the certificate.
 Certificates are used in client certificate-based authentication. They can be mapped only to local user 
 accounts; they do not work with domain accounts.
 To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the PowerShell Cert: drive.
 -ContentType <i>String</i>
 The content type of the web request.
 If this parameter is omitted and the request method is POST, Invoke-WebRequest sets the content type to 
 application/x-www-form-urlencoded. Otherwise, the content type is not specified in the call.
 -Credential <i>PSCredential</i>
 A user account that has permission to send the request. The default is the current user.
 Type a user name, such as User64 or ss64Dom\User64, or enter a PSCredential object, such as one generated by 
 the Get-Credential cmdlet.
 -DisableKeepAlive
 Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. 
 KeepAlive establishes a persistent connection to the server to facilitate subsequent requests.
 -Headers <i>IDictionary</i>
 The headers of the web request. Enter a hash table or dictionary.
 To set UserAgent headers, use the UserAgent parameter. You cannot use this parameter to specify UserAgent or 
 cookie headers.
 -InFile <i>String</i>
 Gets the content of the web request from a file.
 Enter a path and file name. If you omit the path, the default is the current location.
 -MaximumRedirection <i>Int32</i>
 Specifies how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier 
 (URI) before the connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.
 -Method <i>WebRequestMethod</i>
 The method used for the web request. The acceptable values for this parameter are:
 - Default
 - Delete
 - Get
 - Head
 - Merge
 - Options
 - Patch
 - Post
 - Put
 - Trace
 -OutFile <i>String</i>
 The output file for which this cmdlet saves the response body. Enter a path and file name.
 If you omit the path, the default is the current location.
 By default, Invoke-WebRequest returns the results to the pipeline. To send the results to a file and to the 
 pipeline, use the Passthru parameter.
 -PassThru
 Indicates that the cmdlet returns the results, in addition to writing them to a file. This parameter is valid 
 only when the OutFile parameter is also used in the command.
 -Proxy <i>Uri</i>
 A proxy server for the request, rather than connecting directly to the Internet resource. Enter the 
 URI of a network proxy server.
 -ProxyCredential <i>PSCredential</i>
 A user account that has permission to use the proxy server that is specified by the -Proxy parameter. 
 The default is the current user.
 Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated 
 by the Get-Credential cmdlet.
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 -ProxyUseDefaultCredentials
 Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is 
 specified by the Proxy parameter.
 This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the 
 ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
 -SessionVariable <i>String</i>
 Specifies a variable for which this cmdlet creates a web request session and saves it in the value. Enter a 
 variable name without the dollar sign ($) symbol.
 When you specify a session variable, Invoke-WebRequest creates a web request session object and assigns it to 
 a variable with the specified name in your Windows PowerShell session. You can use the variable in your 
 session as soon as the command completes.
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 To use the web request session in subsequent web requests, specify the session variable in the value of the 
 WebSession parameter. Windows PowerShell uses the data in the web request session object when establishing the 
 new connection. To override a value in the web request session, use a cmdlet parameter, such as UserAgent or 
 Credential . Parameter values take precedence over values in the web request session.
 You cannot use the SessionVariable and WebSession parameters in the same command.
 -TimeoutSec <i>Int32</i>
 How long the request can be pending before it times out. Enter a value in seconds. The default 
 value, 0, specifies an indefinite time-out.
 A Domain Name System (DNS) query can take up to 15 seconds to return or time out. If your request contains a 
 host name that requires resolution, and you set TimeoutSec to a value greater than zero, but less than 15 
 seconds, it can take 15 seconds or more before a WebException is thrown, and your request times out.
 -TransferEncoding <i>String</i>
 A value for the transfer-encoding HTTP response header. The acceptable values for this parameter are:
 - Chunked
 - Compress
 - Deflate
 - GZip
 - Identity
 -Uri <i>Uri</i>
 The Uniform Resource Identifier (URI) of the Internet resource to which the web request is sent. 
 Enter a URI. This parameter supports HTTP, HTTPS, FTP, and FILE values.
 This parameter is required. The parameter name ( Uri ) is optional.
 -UseBasicParsing
 This parameter has been deprecated. Beginning with PowerShell 6.0.0, all Web requests use basic parsing only.
 This parameter is included for backwards compatibility only and any use of it has no effect on the operation
 of the cmdlet.
 Indicates that the cmdlet uses the response object for HTML content without using the Internet Explorer
 Document Object Model (DOM) parsing.
 -UseDefaultCredentials
 Indicates that the cmdet uses the credentials of the current user to send the web request.
 Use this when downloading files from SharePoint.
 -UserAgent <i>String</i>
 A user agent string for the web request.
 The default user agent is similar to Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) WindowsPowerShell/3.0 
 with slight variations for each operating system and platform.
 To test a website with the standard user agent string that is used by most Internet browsers, use the 
 properties of the PSUserAgent class, such as Chrome, FireFox, InternetExplorer, Opera, and Safari.
 For example, the following command uses the user agent string for Internet Explorer:
 `Invoke-WebRequest -Uri http://website.com/ -UserAgent 
 ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)`
 -WebSession <i>WebRequestSession</i>
 A web request session. Enter the variable name, including the dollar sign ($).
 To override a value in the web request session, use a cmdlet parameter, such as UserAgent or Credential . 
 Parameter values take precedence over values in the web request session.
 Unlike a remote session, the web request session is not a persistent connection. It is an object that contains 
 information about the connection and the request, including cookies, credentials, the maximum redirection 
 value, and the user agent string. You can use it to share state and data among web requests.
 To create a web request session, enter a variable name (without a dollar sign) in the value of the 
 SessionVariable parameter of an Invoke-WebRequest command. Invoke-WebRequest creates the session and saves it 
 in the variable. In subsequent commands, use the variable as the value of the WebSession parameter.
 You cannot use the SessionVariable and WebSession parameters in the same command.
","https://ss64.com/ps/invoke-webrequest.html","System Utility, Remote Connection",
"Where","Filter objects from a collection."," <i>collection</i>.Where<b>(</b>{ <i>expression</i> } [, <i>mode</i> [, <i>numberToReturn</i>]]<b>)</b>
"," <i>collection</i> A collection of objects e.g. filenames, registry keys, servernames.
 <i>expression </i>A block of script to filter the object properties.
 <i>mode</i> One of the following:
 Default Filter the collection using the expression script block (like Where-Object)
 to a maximum count if provided; or defaulting to all objects in the
 collection; if no maximum count was provided in <i>numberToReturn</i>.
 
 First Display the First item in the filtered collection; or if a specific count
 was requested in <i>numberToReturn</i>, return the first <i>N</i> objects. ('first', 5)
 Last Display the Last item in the filtered collection; or if a specific count
 was requested in <i>numberToReturn</i>, return the last <i>N</i> objects. ('Last', 3)
 
 SkipUntil Skip objects in the collection until an object passes the expression
 script block filter, and then return the first <i>N</i> objects, defaulting to
 all remaining objects if no maximum count was provided in <i>numberToReturn</i>.
 This can include non-filtered items.
 Until Return the first <i>N</i> objects in a collection until an object passes the
 expression script block filter, defaulting to all objects leading up to the
 first object that passed if no maximum count was provided in <i>numberToReturn</i>.
 This can include non-filtered items.
 Split Split a collection into two, placing all objects that pass the expression
 script block filter into the first collection up to a maximum count if
 one was provided in <i>numberToReturn</i>, with the rest of the filtered results
 being dropped into the second collection regardless if they match the criteria or not.
","https://ss64.com/ps/where-method.html","System Utility","Command Execution, Scripting"
"While","Loop while a condition is True."," while (<i>condition</i>) {<i>command_block</i>}
"," condition If this evaluates to TRUE the loop {<i>command_block</i>} runs.
 when the loop has run once the condition is evaluated again
 <i>command_block</i> Commands, separated by commas, to run each time the loop repeats.
","https://ss64.com/ps/while.html","System Utility","Command Execution, Scripting"
"Add-WindowsCapability","Install a Windows capability package on the specified OS image."," Add-WindowsCapability [-Name <i>String</i>] [-LimitAccess] [-Source <i>String</i>[]]
 { <b>-Path</b> <i>String</i> | <b>-Online</b> }
 [-WindowsDirectory <i>String</i>] [-SystemDrive <i>String</i>] [-ScratchDirectory <i>String</i>]
 [-LogLevel {Errors | Warnings | WarningsInfo}] [-LogPath <i>String</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -LimitAccess
 Indicates that this cmdlet does not access Windows Update for the source package.
 -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the net use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 
 -Name [<i>String</i>]
 Specifies the identity of the capability to add to an operating system image.
 
 -Online
 Indicates that the cmdlet operates on a running operating system on the local host.
 
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 -Source [<i>String</i>[]]
 Specifies the location of the files that are required to add a Windows capability package to an image. You can 
 specify the Windows directory of a mounted image or a running Windows installation that is shared on the 
 network.
 
 If you specify multiple Source arguments, the files are gathered from the first location where they are found 
 and the rest of the locations are ignored. Separate source locations with a comma.
 
 If you do not specify a Source, the default location set by Group Policy is used. WindowsUpdate is also used 
 for online images.
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/add-windowscapability.html","System Administration",
"Remove-WindowsCapability","Uninstall a Windows capability package from an image."," Remove-WindowsCapability [-LogLevel {Errors | Warnings | WarningsInfo}] [-LogPath <i>String</i>]
 [-Name <i>String</i>] [-ScratchDirectory <i>String</i>] [-SystemDrive <i>String</i>]
 [-WindowsDirectory <i>String</i>] <b>-Path</b> <i>String</i> [<i><a href=""common.html"">CommonParameters</a></i>]
 Remove-WindowsCapability [-LogLevel {Errors | Warnings | WarningsInfo}] [-LogPath <i>String</i>]
 [-Name <i>String</i>] [-ScratchDirectory <i>String</i>] [-SystemDrive <i>String</i>] [-Source <i>String</i>[]]
 [-WindowsDirectory <i>String</i>] <b>-Online</b> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the net use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 
 -Name [<i>String</i>]
 Specifies the identity of the capability to remove from an operating system image.
 
 -Online
 Indicates that the cmdlet operates on a running operating system on the local host.
 
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/remove-windowscapability.html","System Administration",
"Export-WindowsDriver",,"Not Available","Not Available","Not Available","System Administration",
"Add-WindowsFeature","Install roles, role services, and features. (Server 2008 R2)."," Add-WindowsFeature [-Name] <i>string</i>[] [-IncludeAllSubFeature] [-logPath <i>string</i>]
 [-WhatIf] [-Restart] [-Concurrent] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>
 The command IDs of roles, role services, or features to install.
 Alternatively, an array of Feature objects will also be accepted.
 You can find a list of command IDs for all roles, role services, and features in the
 topic &quot;Overview of Server Manager Commands&quot; in the Server Manager Help.
 -IncludeAllSubFeature
 Specifies the installation of all subordinate services and features along
 with the parent role, role service, or feature named in the -Name parameter.
 -logPath <i>string</i>
 The name and location of a log file, other than the default, %windir%\logs\ServerManager.log.
 -WhatIf
 Describe what would happen if you executed the command, without actually
 executing the command. This will also display any Windows features that
 would be installed due to dependencies.
 -Restart
 Restart the computer automatically when installation is complete,
 if restarting is required by the roles or features installed.
 -Concurrent
 Allow concurrent instances of Add-WindowsFeature or Remove-WindowsFeature
 to run at the same time. Do not add this parameter unless you are installing
 roles, role services, or features that are downloaded separately from
 Windows Server 2008 R2, and you want to install Windows features on which
 the downloaded technology depends at the same time. The use of this switch is not recommended.
 This switch is intended for out-of-band feature(s) to install their dependencies.
 -passThru <i>SwitchParameter</i>
 Pass the newly-extended object created by this cmdlet along the pipeline.
 For most objects, Add-Member adds the new members to the input object. However,
 when the input object is a string, Add-Member cannot add the member to the input object.
 For these objects, use the PassThru parameter to create an output object.
 In PowerShell 2.0, Add-Member added members only to the PSObject wrapper of objects, not to the object.
 Use -PassThru to create an output object for any object that has a PSObject wrapper.
","https://ss64.com/ps/add-windowsfeature.html","System Administration",
"Get-WindowsFeature","Retrieve roles, role services, and features."," Get-WindowsFeature [-Name] <i>string</i>[] [-Vhd <i>String</i>] [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>]
 [-logPath <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Name <i>string</i>
 The command IDs of roles, role services, or features to retrieve.
 Alternatively, an array of Feature objects will also be accepted.
 You can find a list of command IDs for all roles, role services, and features in the
 topic &quot;Overview of Server Manager Commands&quot; in the Server Manager Help.
 -ComputerName
 Gets the list of available roles, role services, and features from the specified remote computer.
 -Credential
 Specifies a user account that has access rights to perform this action.
 &quot;Domain\User&quot; or &quot;User@Domain.com&quot;
 -logPath <i>string</i>
 The name and location of a log file, other than the default, %windir%\logs\ServerManager.log.
 -Vhd
 The path to an offline VHD. The path can either point to a VHD file, or to a location on which
 the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.
","https://ss64.com/ps/get-windowsfeature.html","System Administration, Enumeration",
"Install-WindowsFeature","Install roles, role services, or features (Server 2012 R2)."," Install-WindowsFeature [-Name] <i>Feature</i>[] [-Restart] [-IncludeAllSubFeature] [-IncludeManagementTools] [-Source <i>String</i>[]]
 [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>] [-LogPath <i>String</i>] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Install-WindowsFeature [-Name] <i>Feature</i>[] <b>-Vhd <i>String</i></b> [-IncludeAllSubFeature] [-IncludeManagementTools] [-Source <i>String</i>[]]
 [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>] [-LogPath <i>String</i>] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Install-WindowsFeature <b>-ConfigurationFilePath <i>String</i></b> [-Vhd <i>String</i>] [-Restart] [-Source <i>String</i>[]]
 [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>] [-LogPath <i>String</i>] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName
 Install one or more available features on a specified remote computer.
 This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified,
 the default target is the local computer. Valid values for the parameter include a NetBIOS name, an IP address,
 or a fully qualified domain name of a remote computer that is running Windows Server
 -ConfigurationFilePath
 Provides a single path to a configuration file which specifies roles and features to be installed, and any
 configuration parameters needed. The path can be specified by using a local relative path (such as D:\myfolder)
 or by using built-in environment variables prefixed with the $env tag (such as $env:systemdrive\filename).
 A configuration file can be generated by running the arfw in Server Manager.
 If this parameter is specified, then the Name parameter cannot be used.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -Credential
 A user account that has access rights to perform this action.
 If the parameter is not added, or no value is specified, the default value is the current user.
 -IncludeAllSubFeature
 All subordinate role services, and all subfeatures of parent roles, role services, or features specified by
 the -Name parameter should be installed.
 -IncludeManagementTools
 All applicable management tools of the roles, role services, or features specified by the -Name parameter
 should be installed. Note: Although management tools are installed by default when you are installing
 features by using the arfw, management tools are not installed by default when you install features by
 using the Install-WindowsFeature cmdlet; this parameter must be added to install management tools.
 -LogPath
 Specifies a name and path to a log file. Add this parameter if the results of your command must be stored in a log.
 -Name <i>string</i>
 A list of features to install. This parameter does not support wildcard characters.
 If this parameter is specified, then the -ConfigurationFilePath parameter cannot be used.
 -Restart
 Specifies that the target computer is restarted automatically, if a restart is required by the installation
 process for the specified roles or features. This parameter cannot be used with the -Vhd parameter.
 -Source
 The path to feature files, if the files are not available in the local feature store of the target computer
 or VHD. Valid values for this parameter are either a network path or the path to a Windows image file (WIM).
 If you are installing roles or features on an offline VHD, you must use a mounted WIM.
 It is not necessary to mount the WIM file for installing on a running physical computer, because a WIM is
 mounted internally for deployments to a physical computer.
 Specify the path by using a local relative path, or by using built-in environment variables that are prefixed
 with the $env tag as shown in the following examples.
 If this parameter is used in combination with the -ComputerName parameter, the source path must be accessible
 by the target computer (e.g. local devices/drives/paths on the client system will cause the installation to fail).
 The path specified in this parameter is only used if the command cannot find feature files in the local
 side-by-side store of the specified target computer or VHD.
 The command searches for feature files in the following order:
 On the target computer or offline VHD.
 Path specified as the value of this parameter. If you add a UNC path, verify that the computer account of
 the target server has Read permissions on the share. The computer account should be in one of the
 following formats: DOMAIN\SERVERNAME$ or SERVER$
 Repository path specified by the Group Policy Object (GPO), Specify settings for optional component
 installation and component repair, located in Computer Configuration/Administrative Templates/System
 in Local Group Policy Editor. This Group Policy setting controls the following Windows Registry
 setting: HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Servicing\LocalSourcePath.
 Windows Update.
 -Vhd
 The path to an offline VHD.
 The path can either point to a VHD file, or to a location on which the VHD is already mounted by using
 Deployment Image Servicing and Management (DISM) tools.
 The VHD can be on a local disk on the target computer, or on a network shared folder.
 If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD.
 In this case, the computer account of the computer that you are using to mount the VHD must have read and
 write permissions (Read/Write permissions in File Sharing, or Full Control Security) on the shared folder,
 or the VHD will not be accessible. Local loopback UNC paths are not supported.
 Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.
 Add the -ComputerName parameter to specify the target computer you want to use to mount the VHD.
 If the -ComputerName parameter is not specified, then the local computer is used.
 The computer that you are using to mount the VHD must be running Windows Server 2012 R2.
 Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
 -WhatIf
 Describe what would happen if you executed the command, without actually
 executing the command. This will also display any Windows features that
 would be installed due to dependencies.
","https://ss64.com/ps/install-windowsfeature.html","System Administration",
"Uninstall-WindowsFeature","Uninstall/remove roles, role services, and features (2012 R2)"," Uninstall-WindowsFeature [-Name] <i>Feature</i>[] [-Restart] [-IncludeManagementTools] [-Remove]
 [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>] [-LogPath <i>String</i>][-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
 Uninstall-WindowsFeature [-Name] <i>Feature</i>[] [<b>-Vhd <i>String</i></b>] [-IncludeManagementTools] [-Remove]
 [-ComputerName <i>String</i>] [-Credential <i>PSCredential</i>] [-LogPath <i>String</i>] [-WhatIf] [-Confirm] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName
 Install one or more available features on a specified remote computer.
 This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified,
 the default target is the local computer. Valid values for the parameter include a NetBIOS name, an IP address,
 or a fully qualified domain name of a remote computer that is running Windows Server
 -ConfigurationFilePath
 Provides a single path to a configuration file which specifies roles and features to be installed, and any
 configuration parameters needed. The path can be specified by using a local relative path (such as D:\myfolder)
 or by using built-in environment variables prefixed with the $env tag (such as $env:systemdrive\filename).
 A configuration file can be generated by running the arfw in Server Manager.
 If this parameter is specified, then the Name parameter cannot be used.
 -Confirm
 Prompt for confirmation before running the cmdlet.
 -Credential
 A user account that has access rights to perform this action.
 If the parameter is not added, or no value is specified, the default value is the current user.
 -IncludeAllSubFeature
 All subordinate role services, and all subfeatures of parent roles, role services, or features specified by
 the -Name parameter should be installed.
 -IncludeManagementTools
 All applicable management tools of the roles, role services, or features specified by the -Name parameter
 should be installed. Note: Although management tools are installed by default when you are installing
 features by using the arfw, management tools are not installed by default when you install features by
 using the Install-WindowsFeature cmdlet; this parameter must be added to install management tools.
 -LogPath
 Specifies a name and path to a log file. Add this parameter if the results of your command must be stored in a log.
 -Name <i>string</i>
 A list of features to install. This parameter does not support wildcard characters.
 If this parameter is specified, then the -ConfigurationFilePath parameter cannot be used.
 -Restart
 Specifies that the target computer is restarted automatically, if a restart is required by the installation
 process for the specified roles or features. This parameter cannot be used with the -Vhd parameter.
 -Source
 The path to feature files, if the files are not available in the local feature store of the target computer
 or VHD. Valid values for this parameter are either a network path or the path to a Windows image file (WIM).
 If you are installing roles or features on an offline VHD, you must use a mounted WIM.
 It is not necessary to mount the WIM file for installing on a running physical computer, because a WIM is
 mounted internally for deployments to a physical computer.
 Specify the path by using a local relative path, or by using built-in environment variables that are prefixed
 with the $env tag as shown in the following examples.
 If this parameter is used in combination with the -ComputerName parameter, the source path must be accessible
 by the target computer (e.g. local devices/drives/paths on the client system will cause the installation to fail).
 The path specified in this parameter is only used if the command cannot find feature files in the local
 side-by-side store of the specified target computer or VHD.
 The command searches for feature files in the following order:
 On the target computer or offline VHD.
 Path specified as the value of this parameter. If you add a UNC path, verify that the computer account of
 the target server has Read permissions on the share. The computer account should be in one of the
 following formats: DOMAIN\SERVERNAME$ or SERVER$
 Repository path specified by the Group Policy Object (GPO), Specify settings for optional component
 installation and component repair, located in Computer Configuration/Administrative Templates/System
 in Local Group Policy Editor. This Group Policy setting controls the following Windows Registry
 setting: HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Servicing\LocalSourcePath.
 Windows Update.
 -Vhd
 The path to an offline VHD.
 The path can either point to a VHD file, or to a location on which the VHD is already mounted by using
 Deployment Image Servicing and Management (DISM) tools.
 The VHD can be on a local disk on the target computer, or on a network shared folder.
 If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD.
 In this case, the computer account of the computer that you are using to mount the VHD must have read and
 write permissions (Read/Write permissions in File Sharing, or Full Control Security) on the shared folder,
 or the VHD will not be accessible. Local loopback UNC paths are not supported.
 Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.
 Add the -ComputerName parameter to specify the target computer you want to use to mount the VHD.
 If the -ComputerName parameter is not specified, then the local computer is used.
 The computer that you are using to mount the VHD must be running Windows Server 2012 R2.
 Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
 -WhatIf
 Describe what would happen if you executed the command, without actually
 executing the command. This will also display any Windows features that
 would be installed due to dependencies.
","https://ss64.com/ps/uninstall-windowsfeature.html","System Administration",
"Mount-WindowsImage","Mount a Windows image (WIM or VHD file) to a directory on the local computer.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Repair-WindowsImage","Repair a Windows image in a WIM or VHD file.","Not Available","Not Available","Not Available","System Administration","Disk/Volume Management"
"Disable-WindowsOptionalFeature","Disable a feature in a Windows image."," Disable-WindowsOptionalFeature [-LogLevel {Errors | Warnings | WarningsInfo}] [-LogPath <i>String</i>]
 [-NoRestart] [-PackageName <i>String</i>] [-Remove] [-ScratchDirectory <i>String</i>] [-SystemDrive <i>String</i>]
 [-WindowsDirectory <i>String</i>] -FeatureName <i>String</i>[] <b>-Online</b> [<i><a href=""common.html"">CommonParameters</a></i>]
 Disable-WindowsOptionalFeature [-LogLevel {Errors | Warnings | WarningsInfo}] [-LogPath <i>String</i>]
 [-NoRestart] [-PackageName <i>String</i>] [-Remove] [-ScratchDirectory <i>String</i>] [-SystemDrive <i>String</i>]
 [-WindowsDirectory <i>String</i>] -FeatureName <i>String</i>[] <b>-Path <i>String</i></b> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -FeatureName <i>String</i>[]
 Specifies the name of the feature to be disabled. Feature names are case sensitive if you are servicing a 
 Windows image other than Windows® 8 or a later version. You can use Get-WindowsOptionalFeature to find the 
 name of the feature in the image.
 -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the net use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 -NoRestart
 Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the 
 application from prompting for a restart or keep it from restarting automatically.
 -Online
 Specifies that the action is to be taken on the operating system that is currently running on the local 
 computer.
 -PackageName [<i>String</i>]
 dep_dism_ps_packagename
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 -Remove
 Removes the files for an optional feature without removing the feature's manifest from the image. You can use 
 Remove to reduce the disk space that is used by a Windows image. After the image has been installed, you can 
 restore the feature at any time from a remote source such as WindowsUpdate or a network share.
 Remove can only be used when servicing an image contain Windows 8 or Windows Server 2012 or a later version.
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/disable-windowsoptionalfeature.html","System Administration",
"Enable-WindowsOptionalFeature","Enable a feature in a Windows image."," Enable-WindowsOptionalFeature [-All] [-LimitAccess] [-LogLevel {Errors | Warnings | WarningsInfo}]
 [-LogPath <i>String</i>] [-NoRestart] [-PackageName <i>String</i>] [-ScratchDirectory <i>String</i>] [-Source <i>String</i>[]]
 [-SystemDrive <i>String</i>] [-WindowsDirectory <i>String</i>] -FeatureName <i>String</i>[] <b>-Online</b> [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Enable-WindowsOptionalFeature [-All] [-LimitAccess] [-LogLevel {Errors | Warnings | WarningsInfo}]
 [-LogPath <i>String</i>] [-NoRestart] [-PackageName <i>String</i>] [-ScratchDirectory <i>String</i>] [-Source <i>String</i>[]]
 [-SystemDrive <i>String</i>] [-WindowsDirectory <i>String</i>] -FeatureName <i>String</i>[] <b>-Path <i>String</i></b> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -All
 Enables all parent features of the specified feature. If a parent feature is required for the specified 
 feature to be enabled in the image, All will enable the parent and all of its default dependencies.
 
 -FeatureName <i>String</i>[]
 Specifies the name of the feature to be enabled. Feature names are case sensitive if you are servicing a 
 Windows image running a version of Windows earlier than Windows® 8. You can use Get-WindowsOptionalFeature to 
 find the name of the feature in the image.
 
 -LimitAccess
 Prevents DISM from contacting Windows Update when searching for the source files to restore a feature on an 
 online image.
 
 LimitAccess can only be used when servicing images with Windows 8, Windows Server 2012, Windows 
 Preinstallation Environment (Windows PE) 4.0 or a later version.
 
 -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the net use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 
 -NoRestart
 Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the 
 application from prompting for a restart or keep it from restarting automatically.
 If the prompt to restart is supressed, you can still use Restart-Computer to script an automatic restart.
 
 -Online
 Specifies that the action is to be taken on the operating system that is currently running on the local 
 computer.
 
 -PackageName [<i>String</i>]
 dep_dism_ps_packagename
 
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 
 -Source [<i>String</i>[]>]
 Specifies the location of the files that are required to restore a feature that has been removed from the 
 image. You can specify the Windows directory of a mounted image or a running Windows installation that is 
 shared on the network.
 
 If you specify multiple Source arguments, the files are gathered from the first location where they are found 
 and the rest of the locations are ignored. Separate feature names with a comma.
 
 If you do not specify a Source for a feature that has been removed, the default location set by Group Policy 
 is used. WindowsUpdate is also used for online images.
 
 Source can only be used when servicing an image with Windows 8 or Windows Server 2012 or a later version.
 
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/enable-windowsoptionalfeature.html","System Administration",
"Get-WindowsOptionalFeature","Get information about optional features in a Windows image."," Get-WindowsOptionalFeature [-FeatureName <i>String</i>] [-LogLevel {Errors | Warnings | WarningsInfo}]
 [-LogPath <i>String</i>] [-PackageName <i>String</i>] [-PackagePath <i>String</i>] [-ScratchDirectory <i>String</i>]
 [-SystemDrive <i>String</i>] [-WindowsDirectory <i>String</i>] <b>-Online</b> [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WindowsOptionalFeature [-FeatureName <i>String</i>] [-LogLevel {Errors | Warnings | WarningsInfo}]
 [-LogPath <i>String</i>] [-PackageName <i>String</i>] [-PackagePath <i>String</i>] [-ScratchDirectory <i>String</i>]
 [-SystemDrive <i>String</i>] [-WindowsDirectory <i>String</i>] <b>-Path</b> <i>String</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -FeatureName [<i>String</i>]
 The name of a feature to get detailed information about. Feature names are case sensitive if you are 
 servicing a Windows image other than Windows 8.
 -LogLevel [<i>LogLevel</i>]
 The maximum output level shown in the logs. The default log level is 3.
 LogLevels:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 -LogPath [<i>String</i>]
 The full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the net use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 -Online
 Apply the action on the operating system that is currently running on the local computer.
 -PackageName [<i>String</i>]
 The name of a package as it is listed in the Windows image. Use the -PackageName parameter to get all 
 of the features in the package. Use the -FeatureName and -PackageName parameters to get more detailed 
 information about a specific feature in the package.
 -PackagePath [<i>String</i>]
 The location of a .cab file in the Windows image. Use the -PackagePath parameter to get all of the 
 features in the package. Use the -FeatureName and -PackagePath parameters to get more detailed information about 
 a specific feature in the package.
 -Path <i>String</i>
 The full path to the root directory of the offline Windows image that you will service.
 If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 -ScratchDirectory [<i>String</i>]
 A temporary directory that will be used when extracting files for use during servicing.
 The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM.
 Items in the scratch directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 -SystemDrive [<i>String</i>]
 The path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 -WindowsDirectory [<i>String</i>]
 The path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/get-windowsoptionalfeature.html","System Administration, Enumeration",
"Add-WindowsPackage","Add a single .cab or .msu file to a Windows image."," Add-WindowsPackage -PackagePath <i>String</i> [-IgnoreCheck] [-PreventPending] [-NoRestart]
 { -Path <i>String</i> | -Online } 
 [-WindowsDirectory <i>String</i>] [-SystemDrive <i>String</i>] [-LogPath <i>String</i>] [-ScratchDirectory <i>String</i>]
 [-LogLevel <i>LogLevel</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -IgnoreCheck
 Skip the applicability check for each package.
 -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the NET use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 -NoRestart
 Suppress reboot. If a reboot is not required, this command does nothing.
 This option will keep the application from prompting for a restart or keep it from restarting automatically.
 -Online
 Indicates that the cmdlet operates on a running operating system on the local host.
 -PackagePath <i>String</i>
 Specifies the location of the package to add to the image.
 Valid values are:
 A single .cab or .msu file.
 A folder that contains a single expanded .cab file.
 A folder that contains a single .msu file.
 A folder that contains multiple .cab or .msu files.
 If PackagePath is a folder that contains a .cab or .msu files at its root, any subfolders will also be
 recursively checked for .cab and .msu files.
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 -PreventPending
 Skip the installation of the package if the package or Windows image has pending online actions.
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/add-windowspackage.html","System Administration",
"Get-WindowsPackage","Get information about packages in a Windows image."," Get-WindowsPackage [-PackagePath <i>String</i>] [-PackageName <i>String</i>] 
 { -Path <i>String</i> | -Online } 
 [-WindowsDirectory <i>String</i>] [-SystemDrive <i>String</i>] [-LogPath <i>String</i>]
 [-ScratchDirectory <i>String</i>] [-LogLevel <i>LogLevel</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the NET use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 -Online
 Indicates that the cmdlet operates on a running operating system on the local host.
 -PackageName [<i>String</i>]
 Specifies the name of a package as it is listed in the Windows image.
 Use the -PackageName parameter to get more detailed information about a specific package in the Windows image,
 such as whether the package can be installed completely offline without booting the image.
 -PackagePath<i>String</i>
 Specifies the location of a .cab file in the Windows image. Use the -PackagePath parameter to get more detailed
 information about a specific package in the Windows image, such as whether the package can be installed completely
 offline without booting the image.
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/get-windowspackage.html","System Administration, Enumeration",
"Remove-WindowsPackage","Remove a package from a Windows image."," Remove-WindowsPackage <b>{</b> -Path <i>String</i> <b>|</b> [-Online] <b>}</b>
 [-PackageName <i>String</i>] [-PackagePath <i>String</i>] [-NoRestart]
 [-WindowsDirectory <i>String</i>] [-SystemDrive <i>String</i>] [-ScratchDirectory <i>String</i>]
 [-LogPath <i>String</i>] [-LogLevel <i>LogLevel</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," 
 -Online
 Indicates that the cmdlet operates on a running operating system on the local host.
 -LogLevel [<i>LogLevel</i>]
 Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as 
 follows:
 1 = Errors only
 2 = Errors and warnings
 3 = Errors, warnings, and information
 4 = All of the information listed previously, plus debug output
 
 -LogPath [<i>String</i>]
 Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
 In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file 
 will automatically be archived. The archived log file will be saved with .bak appended to the file name and a 
 new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
 When using a network share that is not joined to a domain, use the NET use command together with domain 
 credentials to set access permissions before you set the log path for the DISM log.
 -NoRestart
 Suppress reboot. If a reboot is not required, this command does nothing.
 This option will keep the application from prompting for a restart or keep it from restarting automatically.
 -PackageName
 The name of a package in the Windows image.
 -PackagePath <i>String</i>
 Specifies the location of the package to add to the image.
 Valid values are:
 A single .cab or .msu file.
 A folder that contains a single expanded .cab file.
 A folder that contains a single .msu file.
 A folder that contains multiple .cab or .msu files.
 If PackagePath is a folder that contains a .cab or .msu files at its root, any subfolders will also be
 recursively checked for .cab and .msu files.
 -Path <i>String</i>
 Specifies the full path to the root directory of the offline Windows image that you will service. If the 
 directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.
 -ScratchDirectory [<i>String</i>]
 Specifies a temporary directory that will be used when extracting files for use during servicing. The 
 directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a 
 subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch 
 directory are deleted after each operation. 
 You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for 
 installation. The directory used for extracting files for temporary usage during servicing should be a local 
 directory.
 
 -SystemDrive [<i>String</i>]
 Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are 
 located on a partition other than the one that you are running the command from. Use -SystemDrive to service 
 an installed Windows image from a Windows PE environment.
 
 -WindowsDirectory [<i>String</i>]
 Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the 
 Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the 
 root of the offline image directory.
","https://ss64.com/ps/remove-windowspackage.html","System Administration",
"Get-WindowsUpdateLog","Merge Windows Update .etl files into a single log file.","Not Available","Not Available","Not Available","System Administration, Enumeration",
"Set-WinSystemLocale","Set the system locale for the current computer.","Not Available","Not Available","Not Available","System Administration",
"Set-WinUserLanguageList","Set the language list/properties for the current user.","Not Available","Not Available","Not Available","System Administration",
"Write-Debug","Write a debug message to the console (5)."," Write-Debug [-message] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -message string
 The debug message to send to the console.
 {may be piped}
","https://ss64.com/ps/write-debug.html","System Administration, Logging",
"Write-Error","Write an object to the error pipeline (2)."," Write-Error [-message] <i>string</i> [-exception <i>Exception</i>] [-category <i>ErrorCategory</i>]
 [-errorId <i>string</i>] [-targetObject <i>Object</i>] [-recommendedAction <i>string</i>]
 [-categoryActivity <i>string</i>] [-categoryReason <i>string</i>]
 [-categoryTargetName <i>string</i>] [-categoryTargetType <i>string</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Write-Error -errorRecord <i>ErrorRecord</i> [-recommendedAction <i>string</i>]
 [-categoryActivity <i>string</i>] [-categoryReason <i>string</i>]
 [-categoryTargetName <i>string</i>] [-categoryTargetType <i>string</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Key
 OperationTimeout, SyntaxError, ParserError, PermissionDenied, ResourceBusy,
 ResourceExists, ResourceUnavailable, ReadError, WriteError, FromStdErr, SecurityError
 -ErrorId <i>string</i>
 A unique ID to associate with the error.
 -TargetObject <i>Object</i>
 The object with which the error is associated.
 -RecommendedAction <i>string</i>
 Describe the recommended response to the error.
 -CategoryActivity <i>string</i>
 Describe the action which overrides the ErrorCategoryInfo default.
 -CategoryReason <i>string</i>
 Describes the reason the ErrorCategoryInfo default is overridden.
 -CategoryTargetName string
 The target name of the ErrorCategoryInfo override.
 
 -CategoryTargetType <i>string</i>
 The target type to override the ErrorCategoryInfo default.
 -ErrorRecord <i>ErrorRecord</i>
 An error record describing details about the error. This can be used in
 place of Message and Exception, in which case it should appear as the
 first parameter.
"," -Message <i>string</i>
 The message text of the error.
 -Exception <i>Exception</i>
 The exception type of the error. This can be used in place of Message and
 ErrorRecord, in which case it should appear as the first parameter.
 -Category <i>ErrorCategory</i>
 The category of the error:
 NotSpecified, OpenError, CloseError, DeviceError, DeadlockDetected,
 InvalidArgument, InvalidData, InvalidOperation, InvalidResult, InvalidType,
 MetadataError, NotImplemented, NotInstalled, ObjectNotFound, OperationStopped,
 OperationTimeout, SyntaxError, ParserError, PermissionDenied, ResourceBusy,
 ResourceExists, ResourceUnavailable, ReadError, WriteError, FromStdErr, SecurityError
 -ErrorId <i>string</i>
 A unique ID to associate with the error.
 -TargetObject <i>Object</i>
 The object with which the error is associated.
 -RecommendedAction <i>string</i>
 Describe the recommended response to the error.
 -CategoryActivity <i>string</i>
 Describe the action which overrides the ErrorCategoryInfo default.
 -CategoryReason <i>string</i>
 Describes the reason the ErrorCategoryInfo default is overridden.
 -CategoryTargetName string
 The target name of the ErrorCategoryInfo override.
 
 -CategoryTargetType <i>string</i>
 The target type to override the ErrorCategoryInfo default.
 -ErrorRecord <i>ErrorRecord</i>
 An error record describing details about the error. This can be used in
 place of Message and Exception, in which case it should appear as the
 first parameter.
","https://ss64.com/ps/write-error.html","System Administration, Logging",
"Write-Host","Display text on screen."," Write-Host [[-object] <i>Object</i>] [-noNewLine] [-separator <i>Object</i>]
 [-foregroundcolor <i>ConsoleColor</i>] [-backgroundColor <i>ConsoleColor</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
"," -object Object
 Object to display, typically a string.
 
 -noNewLine 
 Do not end with a newline character.
 
 -separator
 String to output between objects displayed on the console.
 -foregroundcolor <i>ConsoleColor</i>
 The text color
 -backgroundcolor <i>ConsoleColor</i>
 Background color
 <i>ConsoleColors:</i>
 Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow,
 Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White
","https://ss64.com/ps/write-host.html","System Utility",
"Write-Information","Write to the information data stream (6)."," Write-Error [-message] <i>string</i> [-exception <i>Exception</i>] [-category <i>ErrorCategory</i>]
 [-errorId <i>string</i>] [-targetObject <i>Object</i>] [-recommendedAction <i>string</i>]
 [-categoryActivity <i>string</i>] [-categoryReason <i>string</i>]
 [-categoryTargetName <i>string</i>] [-categoryTargetType <i>string</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Write-Error -errorRecord <i>ErrorRecord</i> [-recommendedAction <i>string</i>]
 [-categoryActivity <i>string</i>] [-categoryReason <i>string</i>]
 [-categoryTargetName <i>string</i>] [-categoryTargetType <i>string</i>]
 [<i><a href=""common.html"">CommonParameters</a></i>]
 Key
 OperationTimeout, SyntaxError, ParserError, PermissionDenied, ResourceBusy,
 ResourceExists, ResourceUnavailable, ReadError, WriteError, FromStdErr, SecurityError
 -ErrorId <i>string</i>
 A unique ID to associate with the error.
 -TargetObject <i>Object</i>
 The object with which the error is associated.
 -RecommendedAction <i>string</i>
 Describe the recommended response to the error.
 -CategoryActivity <i>string</i>
 Describe the action which overrides the ErrorCategoryInfo default.
 -CategoryReason <i>string</i>
 Describes the reason the ErrorCategoryInfo default is overridden.
 -CategoryTargetName string
 The target name of the ErrorCategoryInfo override.
 
 -CategoryTargetType <i>string</i>
 The target type to override the ErrorCategoryInfo default.
 -ErrorRecord <i>ErrorRecord</i>
 An error record describing details about the error. This can be used in
 place of Message and Exception, in which case it should appear as the
 first parameter.
"," -Message <i>string</i>
 The message text of the error.
 -Exception <i>Exception</i>
 The exception type of the error. This can be used in place of Message and
 ErrorRecord, in which case it should appear as the first parameter.
 -Category <i>ErrorCategory</i>
 The category of the error:
 NotSpecified, OpenError, CloseError, DeviceError, DeadlockDetected,
 InvalidArgument, InvalidData, InvalidOperation, InvalidResult, InvalidType,
 MetadataError, NotImplemented, NotInstalled, ObjectNotFound, OperationStopped,
 OperationTimeout, SyntaxError, ParserError, PermissionDenied, ResourceBusy,
 ResourceExists, ResourceUnavailable, ReadError, WriteError, FromStdErr, SecurityError
 -ErrorId <i>string</i>
 A unique ID to associate with the error.
 -TargetObject <i>Object</i>
 The object with which the error is associated.
 -RecommendedAction <i>string</i>
 Describe the recommended response to the error.
 -CategoryActivity <i>string</i>
 Describe the action which overrides the ErrorCategoryInfo default.
 -CategoryReason <i>string</i>
 Describes the reason the ErrorCategoryInfo default is overridden.
 -CategoryTargetName string
 The target name of the ErrorCategoryInfo override.
 
 -CategoryTargetType <i>string</i>
 The target type to override the ErrorCategoryInfo default.
 -ErrorRecord <i>ErrorRecord</i>
 An error record describing details about the error. This can be used in
 place of Message and Exception, in which case it should appear as the
 first parameter.
","https://ss64.com/ps/write-error.html","System Utility",
"Write-Output","write/echo  Write an object to the pipeline (1)."," Write-Output [-inputObject] <i>Object</i>[] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -inputObject <i>Object</i>
 The object(s) to send along the pipeline.
 A variable, command or expression that gets the objects.
","https://ss64.com/ps/write-output.html","System Utility",
"Write-Progress","Display a progress bar."," Write-Progress [-activity] <i>string</i> [-status] <i>string</i> [[-id] <i>int</i>]
 [-percentComplete <i>int</i>] [-secondsRemaining <i>int</i>]
 [-currentOperation <i>string</i>] [-parentId <i>int</i>]
 [-completed] [-sourceId <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -activity <i>string</i>
 A string that describes the activity about which progress is being reported.
 Will appear as the first heading above the progress bar.
 
 -status <i>string
","https://ss64.com/ps/write-progress.html","System Utility",
"Write-Verbose","Write a string to the host's verbose display (4)."," Write-Verbose [-message] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -message <i>string</i>
 The message to display.
 {may be piped}
","https://ss64.com/ps/write-verbose.html","System Utility",
"Write-Warning","Write a warning string (3) in <span class=""reverse"">reverse video</span> to the display."," Write-Warning [-message] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -message <i>string</i>
 The warning message to send to the host.
 {may be piped}
","https://ss64.com/ps/write-warning.html","System Utility",
"reverse","Write a warning string (3) in <span class=""reverse"">reverse video</span> to the display."," Write-Warning [-message] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -message <i>string</i>
 The warning message to send to the host.
 {may be piped}
","https://ss64.com/ps/write-warning.html","System Utility",
"Set-WmiInstance","Create or update an instance of an existing WMI class."," Set-WmiInstance <b>[</b> <b>[-Class] <i>string</i></b> [-Arguments] <i>hashtable</i>] <b>]</b>
 [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>] [-EnableAllPrivileges]
 [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}]
 [-ThrottleLimit <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-WmiInstance <b>-InputObject <i>ManagementObject</i></b> [-Arguments <i>hashtable</i>]
 [-AsJob] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}]
 [-ThrottleLimit <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Set-WmiInstance <b>-Path <i>string</i></b> [-Arguments <i>hashtable</i>]
 [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>] [-EnableAllPrivileges]
 [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}]
 [-ThrottleLimit <i>int</i>] [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Arguments <i>hashtable</i>
 The name of the property to be changed and the new value for that property.
 The name-value pair must be passed on the command-line as a Receive-Job.
 Note: To use this parameter with remote computers, the local and remote computers must be configured
 for remoting. Additionally, you must start Windows PowerShell by using the &quot;Run as administrator&quot; option
 in Windows Vista and later versions of Windows. For more information, see about_Remote_Requirements.
 For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used with the WMI connection. Possible values are:
 
 -1: Unchanged
 0: Default
 1: None (No authentication in performed.)
 2: Connect (Authentication is performed only when the client establishes a relationship with the application.)
 3: Call (Authentication is performed only at the beginning of each call when
 the application receives the request.)
 4: Packet (Authentication is performed on all the data that is received from the client.)
 5: PacketIntegrity (All the data that is transferred between the client and the application is
 authenticated and verified.)
 6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)
 -Authority <i>string</i>
 The authority to use to authenticate the WMI connection.
 Specify standard NTLM or Kerberos authentication. To use NTLM, set the authority setting to
 ntlmdomain:<i>DomainName</i>, where <i>DomainName</i> identifies a valid NTLM domain name.
 To use Kerberos, specify kerberos:<i>DomainName</i>\<i>ServerName</i>&quot;.
 You cannot include the authority setting when you connect to the local computer.
 -Class <i>string</i>
 The name of a WMI class.
 -ComputerName <i>string</i>[]
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 (This parameter does not rely on Windows PowerShell remoting)
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User01, Domain01\User01, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
 -EnableAllPrivileges [&lt;SwitchParameter&gt;]
 Enables all the privileges of the current user before the command makes the WMI call .
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use. Valid values are: 
 0: Default (Reads the local registry for the default impersonation level, which is usually set to &quot;3: Impersonate&quot;.)
 1: Anonymous (Hides the credentials of the caller.)
 2: Identify (Allows objects to query the credentials of the caller.)
 3: Impersonate (Allows objects to use the credentials of the caller.)
 4: Delegate (Allows objects to permit other objects to use the credentials of the caller.)
 -InputObject <i>ManagementObject</i>
 A ManagementObject object to use as input.
 When this parameter is used, all other parameters ,except for -Arguments, are ignored.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 The Locale parameter is specified in an array in the MS_<i>LCID</i> format in the preferred order.
 -Namespace <i>string</i>
 When used with -Class, this specifies the WMI repository namespace where the referenced 
 WMI class is located.
 -Path <i>string</i>
 A WMI object path to the instance that you want to create or update.
 -PutType <i>PutType</i>
 Indicates whether the WMI instance should be created or updated. Valid values are:
 UpdateOnly Update an existing WMI instance.
 CreateOnly Create a new WMI instance.
 UpdateOrCreate Update the WMI instance if it exists or else create a new instance.
 -ThrottleLimit <i>int</i>
 Allow the user to specify a throttling value for the number of WMI operations that can be executed simultaneously.
 This parameter is used together with the AsJob parameter. 
 The throttle limit applies only to the current command, not to the session or to the computer.
 -Confirm 
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing the command.
","https://ss64.com/ps/set-wmiinstance.html","System Utility","WMI"
"Invoke-WmiMethod","Call WMI methods."," Invoke-WmiMethod <b>[-Class] <i>string</i></b> [[-ArgumentList] <i>Object</i>[]] [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName &lt;string[]&gt;] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod <b>-InputObject <i>ManagementObject</i></b> [-ArgumentList <i>Object</i>[]] [-Name] <i>string</i>
 [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod <b>-Path <i>string</i></b> [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>Object</i>[]
 The parameters to pass to the called method.
 The value of this parameter must be an array of objects and they must appear in the
 order required by the called method. 
 Important: A second value of $null is required, otherwise the command will generate
 an error, such as &quot;Unable to cast object of type 'System.Byte' to type 'System.Array'.&quot;.
 An example using an array of objects ($binSD) followed by a null value ($null) follows:
 PS C:\&gt; $acl = get-acl test.txt
 PS C:\&gt; $binSD = $acl.GetSecurityDescriptorBinaryForm()
 PS C:\&gt; invoke-wmimethod -class Win32_SecurityDescriptorHelper -Name BinarySDToSDDL -argumentlist $binSD, $null
 -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection:
 Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged
 -1: Unchanged
 0: Default
 1: None No authentication in performed.
 2: Connect Authentication is performed only when the client establishes
 a relationship with the application.
 3: Call Authentication is performed only at the beginning of each call
 when the application receives the request.
 4: Packet Authentication is performed on all the data that is received from the client.
 5: PacketIntegrity All the data that is transferred between the client
 and the application is authenticated and verified.
 6: PacketPrivacy The properties of the other authentication levels are used,
 and all the data is encrypted.)
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 for NTLM: ntlmdomain:<i>DomainName</i>
 for Kerberos: kerberos:<i>DomainName</i>\<i>ServerName</i>
 -class <i>string</i>
 The name of a WMI class (see list below).
 -computerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use:
 Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -InputObject <i>ManagementObject</i>
 A ManagementObject object to use as input.
 When this parameter is used, all other parameters except -Flag and -Argument are ignored.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -Name <i>string</i>
 The name of the method to be invoked.
 This parameter is mandatory and cannot be null or empty.
 -namespace <i>string</i>
 When used with the -Class parameter, this parameter specifies the WMI repository namespace.
 -Path <i>string</i>
 The WMI object path of a WMI class, or the WMI object path of an instance of a WMI class.
 The class or the instance specified must contain the method specified in the -Name parameter.
 -ThrottleLimit int
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
 -throttlelimit applies only to the current command, not to the session or to the computer.
 -Confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
","https://ss64.com/ps/invoke-wmimethod.html","System Utility","WMI"
"iwmi","Call WMI methods."," Invoke-WmiMethod <b>[-Class] <i>string</i></b> [[-ArgumentList] <i>Object</i>[]] [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName &lt;string[]&gt;] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod <b>-InputObject <i>ManagementObject</i></b> [-ArgumentList <i>Object</i>[]] [-Name] <i>string</i>
 [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod <b>-Path <i>string</i></b> [-ArgumentList <i>Object</i>[]] [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 Invoke-WmiMethod [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>] [-Locale <i>string</i>]
 [-Namespace <i>string</i>] [-Name] <i>string</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ArgumentList <i>Object</i>[]
 The parameters to pass to the called method.
 The value of this parameter must be an array of objects and they must appear in the
 order required by the called method. 
 Important: A second value of $null is required, otherwise the command will generate
 an error, such as &quot;Unable to cast object of type 'System.Byte' to type 'System.Array'.&quot;.
 An example using an array of objects ($binSD) followed by a null value ($null) follows:
 PS C:\&gt; $acl = get-acl test.txt
 PS C:\&gt; $binSD = $acl.GetSecurityDescriptorBinaryForm()
 PS C:\&gt; invoke-wmimethod -class Win32_SecurityDescriptorHelper -Name BinarySDToSDDL -argumentlist $binSD, $null
 -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection:
 Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged
 -1: Unchanged
 0: Default
 1: None No authentication in performed.
 2: Connect Authentication is performed only when the client establishes
 a relationship with the application.
 3: Call Authentication is performed only at the beginning of each call
 when the application receives the request.
 4: Packet Authentication is performed on all the data that is received from the client.
 5: PacketIntegrity All the data that is transferred between the client
 and the application is authenticated and verified.
 6: PacketPrivacy The properties of the other authentication levels are used,
 and all the data is encrypted.)
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 for NTLM: ntlmdomain:<i>DomainName</i>
 for Kerberos: kerberos:<i>DomainName</i>\<i>ServerName</i>
 -class <i>string</i>
 The name of a WMI class (see list below).
 -computerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use:
 Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -InputObject <i>ManagementObject</i>
 A ManagementObject object to use as input.
 When this parameter is used, all other parameters except -Flag and -Argument are ignored.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -Name <i>string</i>
 The name of the method to be invoked.
 This parameter is mandatory and cannot be null or empty.
 -namespace <i>string</i>
 When used with the -Class parameter, this parameter specifies the WMI repository namespace.
 -Path <i>string</i>
 The WMI object path of a WMI class, or the WMI object path of an instance of a WMI class.
 The class or the instance specified must contain the method specified in the -Name parameter.
 -ThrottleLimit int
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
 -throttlelimit applies only to the current command, not to the session or to the computer.
 -Confirm
 Prompt for confirmation before executing the command.
 -whatIf
 Describe what would happen if you executed the command without
 actually executing the command.
","https://ss64.com/ps/invoke-wmimethod.html","System Utility","WMI"
"Get-WmiObject","Get WMI class information."," Get-WmiObject [-Authority <i>string</i>] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject [[<b>-Class</b>] <i>string</i>] [-Authority <i>string</i>] [-List] [-Recurse] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject [<b>-Class</b>] <i>string</i> [[<b>-Property</b>] <i>string</i>[]] [-Authority <i>string</i>] [-DirectRead]
 [-Filter <i>string</i>] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject <b>-Query <i>string</i></b> [-Authority <i>string</i>] [-DirectRead] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Amended
 Get or set a value that indicates whether the objects have been amended.
 Typically, object and property descriptions (localizable info.)
 -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection.
 Valid values are listed below.
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 NTLM = ntlmdomain:<i>DomainName</i>
 Kerberos = kerberos:<i>DomainName</i>\<i>ServerName</i>
 -class <i>string</i>
 The name of a WMI class (see list below).
 -computerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -DirectRead
 Whether direct access to the WMI provider is requested for the specified
 class without any regard to its base class or to its derived classes.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -filter <i>string</i>
 A where clause to use as a filter. Use the syntax of the WQL language.
 Do not include the WHERE keyword.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use: Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -list 
 Retrieve and display the names of the WMI classes.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -property <i>string</i>
 A WMI class property (or set of properties) to retrieve.
 -namespace <i>string</i>
 The WMI repository namespace.
 If you don’t specify the -Namespace parameter, then root\CIMV2 
 will be used by default.
 -query <i>string</i>
 A WMI Query Language (WQL) statement to run. 
 Event queries are not supported.
 -Recurse
 Make the command search the current namespace and all other namespaces for
 the class name that is specified in the Class parameter.
 -ThrottleLimit <i>int</i>
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
","https://ss64.com/ps/get-wmiobject.html","System Utility","WMI"
"gwmi","Get WMI class information."," Get-WmiObject [-Authority <i>string</i>] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject [[<b>-Class</b>] <i>string</i>] [-Authority <i>string</i>] [-List] [-Recurse] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject [<b>-Class</b>] <i>string</i> [[<b>-Property</b>] <i>string</i>[]] [-Authority <i>string</i>] [-DirectRead]
 [-Filter <i>string</i>] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 Get-WmiObject <b>-Query <i>string</i></b> [-Authority <i>string</i>] [-DirectRead] [-Amended] [-AsJob]
 [-Authentication <i>AuthenticationLevel</i>] [-ComputerName <i>string</i>[]]
 [-Credential <i>PSCredential</i>] [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-ThrottleLimit <i>int</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Amended
 Get or set a value that indicates whether the objects have been amended.
 Typically, object and property descriptions (localizable info.)
 -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection.
 Valid values are listed below.
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 NTLM = ntlmdomain:<i>DomainName</i>
 Kerberos = kerberos:<i>DomainName</i>\<i>ServerName</i>
 -class <i>string</i>
 The name of a WMI class (see list below).
 -computerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -DirectRead
 Whether direct access to the WMI provider is requested for the specified
 class without any regard to its base class or to its derived classes.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -filter <i>string</i>
 A where clause to use as a filter. Use the syntax of the WQL language.
 Do not include the WHERE keyword.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use: Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -list 
 Retrieve and display the names of the WMI classes.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -property <i>string</i>
 A WMI class property (or set of properties) to retrieve.
 -namespace <i>string</i>
 The WMI repository namespace.
 If you don’t specify the -Namespace parameter, then root\CIMV2 
 will be used by default.
 -query <i>string</i>
 A WMI Query Language (WQL) statement to run. 
 Event queries are not supported.
 -Recurse
 Make the command search the current namespace and all other namespaces for
 the class name that is specified in the Class parameter.
 -ThrottleLimit <i>int</i>
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
","https://ss64.com/ps/get-wmiobject.html","System Utility","WMI"
"Remove-WmiObject","Delete an instance of a WMI class."," Remove-WmiObject [<b>-Class</b>] <i>string</i> [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject <b>-InputObject</b> <i>ManagementObject</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject <b>-Path</b> <i>string</i> [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection.
 Valid values are listed below.
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 NTLM = ntlmdomain:<i>DomainName</i>
 Kerberos = kerberos:<i>DomainName</i>\<i>ServerName</i>
 -Class <i>string</i>
 The name of a WMI class to be deleted.
 -ComputerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use: Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -InputObject <i>ManagementObject</i>
 A ManagementObject object to use as input.
 When this parameter is used, all other parameters are ignored.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -Namespace <i>string</i>
 The WMI repository namespace.
 When used with the -Class parameter, this parameter specifies the
 namespace where the referenced WMI class is located.
 -Path <i>string</i> The WMI object path of a WMI class, or the WMI object path of an
 instance of a WMI class to be deleted.
 -ThrottleLimit <i>int</i>
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-wmiobject.html","System Utility","WMI"
"rwmi","Delete an instance of a WMI class."," Remove-WmiObject [<b>-Class</b>] <i>string</i> [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject <b>-InputObject</b> <i>ManagementObject</i> [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Remove-WmiObject <b>-Path</b> <i>string</i> [-Authentication <i>AuthenticationLevel</i>]
 [-Authority <i>string</i>] [-ComputerName <i>string</i>[]] [-Credential <i>PSCredential</i>]
 [-EnableAllPrivileges] [-Impersonation <i>ImpersonationLevel</i>]
 [-Locale <i>string</i>] [-Namespace <i>string</i>] [-AsJob] [-ThrottleLimit <i>int</i>]
 [-Confirm] [-WhatIf] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -AsJob
 Run the command as a background job.
 Results from remote computers are automatically returned to the local computer.
 To get the job results, use -Receive-Job
 
 Note: To use this parameter with remote computers, the local and remote
 computers must be configured for remoting. Additionally, you must start
 PowerShell in Elevated mode/&quot;Run as administrator&quot;
 -Authentication <i>AuthenticationLevel</i>
 The authentication level to be used with the WMI connection.
 Valid values are listed below.
 -Authority <i>string</i>
 The authority to use to authenticate a remote WMI connection:
 NTLM = ntlmdomain:<i>DomainName</i>
 Kerberos = kerberos:<i>DomainName</i>\<i>ServerName</i>
 -Class <i>string</i>
 The name of a WMI class to be deleted.
 -ComputerName <i>string</i>[]
 The computer(s) to run against.
 A NETBIOS name, an IP address, full domain name or local (.)
 WMI information is retrieved via the WMI Get-Credential)
 If you supply a user name, you will be prompted for a password.
 -EnableAllPrivileges
 Enable all the privileges of the current user before the command makes the WMI call.
 -Impersonation <i>ImpersonationLevel</i>
 The impersonation level to use: Default | Anonymous | Identify | Impersonate | Delegate
 
 0: Default (read the registry for the default, which is usually set to &quot;3&quot;.)
 1: Anonymous (Hide the credentials of the caller.)
 2: Identify (Allow objects to query the credentials of the caller.)
 3: Impersonate (Allow objects to use the credentials of the caller.)
 4: Delegate (Allow objects to permit other objects to use the credentials of the caller.)
 -InputObject <i>ManagementObject</i>
 A ManagementObject object to use as input.
 When this parameter is used, all other parameters are ignored.
 -Locale <i>string</i>
 The preferred locale for WMI objects.
 Specify as an array in MS_<i>LCID</i> format in the preferred order.
 -Namespace <i>string</i>
 The WMI repository namespace.
 When used with the -Class parameter, this parameter specifies the
 namespace where the referenced WMI class is located.
 -Path <i>string</i> The WMI object path of a WMI class, or the WMI object path of an
 instance of a WMI class to be deleted.
 -ThrottleLimit <i>int</i>
 Allow the user to specify a throttling value for the number of WMI operations
 that can be executed simultaneously. (Used together with -AsJob.)
 -Confirm
 Prompt for confirmation before executing the command.
 -WhatIf
 Describe what would happen if you executed the command without actually executing it.
","https://ss64.com/ps/remove-wmiobject.html","System Utility","WMI"
"Connect-WSMan","Connect to the WinRM service on a remote computer."," Connect-WSMan [-ApplicationName <i>string</i>] [-ComputerName <i>string</i>]
 [-Authentication <i>AuthMechanism</i>] [-Credential <i>PSCredential</i>] 
 [-CertificateThumbprint <i>String</i>] [-OptionSet <i>Hashtable</i>]
 [-Port <i>int</i>] [-UseSSL] [-SessionOption hashtable] [CommonParameters]
 
 Connect-WSMan [-ConnectionURI <i>Uri</i>]
 [-Authentication <i>Authentication</i>] [-Credential <i>PSCredential</i>] 
 [-CertificateThumbprint <i>String</i>] [-OptionSet <i>Hashtable</i>]
 [-Port <i>int</i>] [-SessionOption hashtable] [CommonParameters]
"," -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -Authentication <i>AuthMechanism</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -CertificateThumbprint <i>String
 </i> The digital public key certificate (X509) of a user account that has permission to perform this
 action. Enter the certificate thumbprint of the certificate. Certificates are used in client
 certificate-based authentication. They can be mapped only to local user accounts;
 they do not work with domain accounts. To get a certificate thumbprint, use the Get-Item or
 Get-ChildItem command in the PowerShell Cert: drive.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI <i>Uri</i>
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain01\User64, or User64@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
 
 -OptionSet <i>hashtable</i>
 Pass a set of switches to the service to modify or refine the nature of the request.
 These are similar to switches used in command-line shells in that they are service specific.
 Any number of options can be specified. 
 
 The following example demonstrates the syntax that passes the values 1, 2, and 3 for
 the a, b, and c parameters:
 
 -OptionSet @{a=1;b=2;c=3}
 -Port <i>int32</i>
 The port to use when the client connects to the WinRM service.
 When the transport is HTTP, the default port is 80.
 When the transport is HTTPS, the default port is 443.
 When you use HTTPS as the transport, the value of the -ComputerName parameter must match the server's 
 certificate common name (CN). However, if the SkipCNCheck parameter is specified as 
 part of the SessionOption parameter, then the certificate common name of the server does not have 
 to match the host name of the server. The SkipCNCheck parameter should be used only for trusted
 computers.
 
 -SessionOption <i>hashtable</i>
 Define a set of extended options for the WS-Management session.
 Enter a SessionOption object that you create by using New-WSManSessionOption.
 
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used. 
 
 WS-Management encrypts all PowerShell content that is transmitted over the network.
 The UseSSL parameter lets you specify the additional protection of HTTPS instead of HTTP.
 This will fail if SSL is not available on the port that is used for the connection.
","https://ss64.com/ps/connect-wsman.html","System Administration, Remote Connection","WinRM"
"Disconnect-WSMan","Disconnect from the WinRM service on a remote computer."," Disconnect-WSMan [-ComputerName <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ComputerName <i>string</i>
 The computer from which you want to disconnect.
 A fully qualified domain name, a Net BIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName. 
 Note: You cannot disconnect from the local host, however, if a separate connection
 is made to the local computer (for example, by using the computer name), you can remove
 that connection with Disconnect-WSMan.
","https://ss64.com/ps/disconnect-wsman.html","System Administration, Remote Connection","WinRM"
"Test-WSMan","Test if a computer is setup to receive remote commands."," Test-WSMan [[-ComputerName] <i>string</i>] [-Authentication <i>Authentication</i>]
 [-Credential <i>PSCredential</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 Basic Send username and password in clear text.
 Default Use the authentication method implemented by WS-Management protocol. This is the default.
 Digest Challenge-response scheme using a server-specified data string for the challenge.
 Kerberos Authenticate by using Kerberos certificates.
 Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User01, Domain01\User01, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
","https://ss64.com/ps/test-wsman.html","System Administration, Remote Connection","WinRM"
"Invoke-WSManAction","Invoke an action on a specified object."," Invoke-WSManAction [-ApplicationName <i>string</i>] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-Port <i>int</i>] [-UseSSL] [-ResourceURI] <b><i>Uri</i></b>
 [-Action] <i>string</i> [-Authentication <i>AuthMechanism</i>]
 [-FilePath <i>File</i>] [-OptionSet <i>hashtable</i>] [-SelectorSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]<br>
 Invoke-WSManAction [-ConnectionURI <i>Uri</i>] [-ResourceURI] <b><i>Uri</i></b>
 [-Action] <i>string</i> [-Authentication <i>AuthenticationMechanism</i>]
 [-FilePath <i>File</i>] [-OptionSet <i>hashtable</i>] [-SelectorSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Action <i>string</i>
 The method to run on the management object specified by -ResourceURI and selectors.
 -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -Authentication <i>AuthMechanism</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI <i>Uri</i>
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User01, Domain01\User01, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
 -FilePath <i>File</i>
 The path of a file that is used to update a management resource.
 Specify the management resource by using the -ResourceURI parameter and the -SelectorSet parameter.
 For example, the following command uses the -FilePath parameter:
 invoke-wsmanaction -action stopservice -resourceuri wmicimv2/Win32_Service -SelectorSet @{Name=&quot;spooler&quot;} -FilePath:c:\input.xml -authentication default
 This command calls the StopService method on the Spooler service by using input from a file.
 The file, Input.xml, contains the following:
 &lt;p:StopService_INPUT xmlns:p=&quot;http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service&quot;/&gt;
 -OptionSet <i>hashtable</i>
 Pass a set of switches to the service to modify or refine the nature of the request.
 These are similar to switches used in command-line shells in that they are service specific.
 Any number of options can be specified. 
 
 The following example demonstrates the syntax that passes the values 1, 2, and 3 for
 the a, b, and c parameters:
 
 -OptionSet @{a=1;b=2;c=3}
 -Port <i>int</i>
 The port to use when the client connects to the WinRM service.
 When the transport is HTTP, the default port is 80.
 When the transport is HTTPS, the default port is 443.
 When you use HTTPS as the transport, the value of the -ComputerName parameter must match the server's 
 certificate common name (CN). However, if the SkipCNCheck parameter is specified as 
 part of the SessionOption parameter, then the certificate common name of the server does not have 
 to match the host name of the server. The SkipCNCheck parameter should be used only for trusted
 computers.
 -ResourceURI <i>Uri</i>
 Contains the Uniform Resource Identifier (URI) of the resource class or instance.
 The URI is used to identify aspecific type of resource, such as disks or processes, on a computer.
 A URI consists of a prefix and a path to a resource. For example:
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor
 -SelectorSet <i>hashtable</i>
 A set of value pairs that are used to select particular management resource instances.
 The SelectorSet parameter is used when more than one instance of the resource exists.
 
 The following example shows how to enter a value for this parameter:
 -SelectorSet @{Name=&quot;WinRM&quot;;ID=&quot;yyy&quot;}
 -SessionOption <i>hashtable</i>
 Define a set of extended options for the WS-Management session.
 Enter a SessionOption object that you create by using New-WSManSessionOption.
 
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used. 
 
 WS-Management encrypts all PowerShell content that is transmitted over the network.
 The UseSSL parameter lets you specify the additional protection of HTTPS instead of HTTP.
 This will fail if SSL is not available on the port that is used for the connection.
 -ValueSet <i>hashtable</i>
 A hash table that helps modify a management resource.
 Specify the management resource by using -ResourceURI and -SelectorSet.
","https://ss64.com/ps/invoke-wsmanaction.html","System Administration, Remote Connection",
"Disable-WSManCredSSP","Disable Credential Security Service Provider (SSP) authentication."," Disable-WSManCredSSP [-Role] <i>string</i> [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Role { Client | Server }
 Whether CredSSP should be disabled as a client or as a server.
 If CredSSP is disabled on the client, the WS-Management setting:
 &lt;localhost|computername&gt;\Client\Auth\CredSSP is set to false.
 Also removes any WSMan/* setting from the CredSSP policy AllowFreshCredentials on the client.
 If CredSSP is disabled on the server, the WS-Management setting:
 &lt;localhost|computername&gt;\Service\Auth\CredSSP is set to false.
","https://ss64.com/ps/disable-wsmancredssp.html","System Administration, Remote Connection",
"Enable-WSManCredSSP","Enable Credential SSP authentication."," Enable-WSManCredSSP [-Role] <i>string
 </i> [[-DelegateComputer] <i>string</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -Role { Client | Server }
 Whether CredSSP should be enabled as a client or as a server.
 If CredSSP is enabled on the client, the WS-Management setting:
 &lt;localhost|computername&gt;\Client\Auth\CredSSP is set to True.
 Also removes any WSMan/* setting from the CredSSP policy AllowFreshCredentials on the client.
 If CredSSP is enabled on the server, the WS-Management setting:
 &lt;localhost|computername&gt;\Service\Auth\CredSSP is set to True.
 -DelegateComputer <i>string</i>
 Allow the client credentials to be delegated to the server(s) specified.
 The value of <i>string</i> should be a fully qualified domain name.
 If -Role specifies a Client, then -DelegateComputer is mandatory.
 If -Role specifies a Server, then -DelegateComputer is not allowed.
","https://ss64.com/ps/enable-wsmancredssp.html","System Administration, Remote Connection",
"Get-WSManCredSSP","Get the Credential SSP configuration."," Get-WSManCredSSP [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/get-wsmancredssp.html","Enumeration, System Administration, Remote Connection",
"New-WSManInstance","Create a new instance of a management resource."," New-WSManInstance [-ApplicationName <i>string</i>] [-ComputerName <i>string</i>]
 [-Credential <i>PSCredential</i>] [-Port <i>int</i>] [-UseSSL]
 [-SelectorSet] <i>hashtable</i> -ResourceURI <i>Uri
 </i> [-AuthenticationMechanism <i>AuthenticationMechanism</i>]
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]<br> <br> New-WSManInstance [-ConnectionURI <i>Uri</i>]
 [-SelectorSet] <i>hashtable</i> -ResourceURI <i>Uri</i>
 [-AuthenticationMechanism <i>AuthenticationMechanism</i>]
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -AuthenticationMechanism <i>AuthenticationMechanism</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI Uri
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain64\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet.
 When you type a user name, you will be prompted for a password.
 -File <i>File</i>
 The path of a file that is used to create a management resource.
 Specify the management resource using -ResourceURI and -SelectorSet.
 For example, the following command uses the File parameter:
 invoke-wsmanaction -action stopservice -resourceuri wmicimv2/Win32_Service -SelectorSet @{Name=&quot;spooler&quot;} -File
 c:\input.xml -authentication default
 This command calls the StopService method [descriptor] on the Spooler service by using input from a file.
 The file, Input.xml, contains the following content: 
 &lt;p:StopService_INPUT xmlns:p=&quot;http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service&quot;/&gt;
 -OptionSet <i>hashtable</i>
 Pass a set of switches to the service to modify or refine the nature of the request.
 These are similar to switches used in command-line shells in that they are service specific.
 Any number of options can be specified. 
 
 The following example demonstrates the syntax that passes the values 1, 2, and 3 for
 the a, b, and c parameters:
 
 -OptionSet @{a=1;b=2;c=3}
 -Port <i>int</i>
 The port to use when the client connects to the WinRM service.
 When the transport is HTTP, the default port is 80.
 When the transport is HTTPS, the default port is 443.
 When you use HTTPS as the transport, the value of the -ComputerName parameter must match the server's 
 certificate common name (CN). However, if the SkipCNCheck parameter is specified as 
 part of the SessionOption parameter, then the certificate common name of the server does not have 
 to match the host name of the server. The SkipCNCheck parameter should be used only for trusted
 computers.
 
 -ResourceURI <i>Uri</i>
 The Uniform Resource Identifier (URI) of the resource class or instance.
 The URI is used to identify a specific type of resource, such as disks or processes, on a computer. 
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor
 
 -SelectorSet <i>hashtable</i>
 A set of value pairs that are used to select particular management resource instances.
 The SelectorSet parameter is used when more than one instance of the resource exists.
 The value of the SelectorSet parameter must be a hash table. 
 
 The following example shows how to enter a value for this parameter: 
 
 -SelectorSet @{Name=WinRM;ID=yyy}
 -SessionOption <i>hashtable</i>
 Define a set of extended options for the WS-Management session.
 Enter a SessionOption object that you create by using New-WSManSessionOption.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used. 
 
 WS-Management encrypts all PowerShell content that is transmitted over the network.
 The UseSSL parameter lets you specify the additional protection of HTTPS instead of HTTP.
 This will fail if SSL is not available on the port that is used for the connection.
 -ValueSet <i>hashtable</i>
 A hash table that helps modify a management resource. 
 Specify the management resource by using -ResourceURI and -SelectorSet.
 The value of the ValueSet parameter must be a hash table.
","https://ss64.com/ps/new-wsmaninstance.html","System Administration, Remote Connection",
"Get-WSManInstance","Display management information (XML or value)."," Get-WSManInstance -SelectorSet <i>hashtable</i> [-ApplicationName <i>string</i>]
 [-ComputerName <i>string</i>] [-Credential <i>PSCredential</i>] [-Fragment <i>string</i>]
 [-Port <i>int</i>] [-UseSSL] [-ResourceURI] <i>Uri</i>
 [-Authentication <i>Authentication</i>] [-Dialect <i>Uri</i>] [-OptionSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-WSManInstance [-ApplicationName <i>string</i>] [-BasePropertiesOnly]
 [-ComputerName <i>string</i>] [-Credential <i>PSCredential</i>] [-Enumerate] [-filter <i>string</i>]
 [-Port <i>int</i>] [-References] [-ReturnType <i>string</i>]
 [-Shallow] [-UseSSL] [-ResourceURI] <i>Uri</i>
 [-Authentication <i>Authentication</i>] [-Dialect <i>Uri</i>] [-OptionSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-WSManInstance -ConnectionURI <i>Uri</i> -SelectorSet <i>hashtable</i> [-Fragment <i>string</i>] [-ResourceURI] <i>Uri</i>
 [-Authentication <i>Authentication</i>] [-Dialect <i>Uri</i>] [-OptionSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Get-WSManInstance -ConnectionURI <i>Uri</i> [-BasePropertiesOnly]
 [-Enumerate] [-filter <i>string</i>] [-References] [-ReturnType <i>string</i>]
 [-Shallow] [-ResourceURI] <i>Uri</i>
 [-Authentication <i>Authentication</i>] [-Dialect <i>Uri</i>] [-OptionSet <i>hashtable</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -BasePropertiesOnly
 Enumerate only the properties that are part of the base class specified by -ResourceURI.
 This has no effect if -Shallow is specified.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI <i>Uri</i>
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain64\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet.
 When you type a user name, you will be prompted for a password.
 -Dialect <i>Uri</i>
 The dialect to use in the filter predicate.
 Any dialect that is supported by the remote service.
 The following 3 aliases can be used for the dialect URI:
 
 - WQL http://schemas.microsoft.com/wbem/wsman/1/WQL 
 - Selector http://schemas.microsoft.com/wbem/wsman/1/wsman/SelectorFilter
 - Association http://schemas.dmtf.org/wbem/wsman/1/cimbinding/associationFilter
 -Enumerate
 Return all instances of a management resource.
 -filter <i>string</i>
 The filter expression for the enumeration.
 If you use this parameter, you must also specify -Dialect. 
 
 The valid filter values depend on the dialect that is specified.
 For example, if -Dialect is WQL, the Filter parameter must contain
 a string, and the string must contain a valid WQL query such as:
 
 Select bashdb.csv bashdb.sh bashregex.txt CLI_Class.docx CLI_Class.odt CMDParse.py CMDParse.txt gtfoREGEX.txt lolbas.csv lolbasREGEX.txt modulelistIN.txt packages-microsoft-prod.deb psdb2.sh psdb.csv psdb.sh pslinks.txt psparameters1.txt pssyntax.txt TestDoc.txt vt wincmddb.csv wincmddb.sh wincmdregex.txt from Win32_Service where State != Running
 
 If -Dialect is set to Association, the Filter parameter must contain
 a string, and the string must contain a valid filter, such as:
 
 -filter:Object=EPR[;AssociationClassName=AssocClassName][;ResultClassName=ClassName][;Role=RefPropertyName][;ResultRole=RefPropertyName]}
 -Fragment <i>string</i>
 A section inside the instance that is to be updated or retrieved.
 For example, to get the status of a spooler service, specify -Fragment Status.
 -OptionSet <i>hashtable</i>
 Pass a set of switches to the service to modify or refine the nature of the request.
 These are similar to switches used in command-line shells in that they are service specific.
 Any number of options can be specified. 
 
 The following example demonstrates the syntax that passes the values 1, 2, and 3 for
 the a, b, and c parameters:
 
 -OptionSet @{a=1;b=2;c=3}
 -Port <i>int</i>
 The port to use when the client connects to the WinRM service.
 When the transport is HTTP, the default port is 80.
 When the transport is HTTPS, the default port is 443.
 When you use HTTPS as the transport, the value of the -ComputerName parameter must match the server's 
 certificate common name (CN). However, if the SkipCNCheck parameter is specified as 
 part of the SessionOption parameter, then the certificate common name of the server does not have 
 to match the host name of the server. The SkipCNCheck parameter should be used only for trusted
 computers.
 -References 
 Indicates that association instances (not associated instances) should be retrieved.
 Use this only when -Dialect is set to a value of Association.
 
 -ResourceURI <i>Uri</i>
 The Uniform Resource Identifier (URI) of the resource class or instance.
 The URI is used to identify a specific type of resource, such as disks or processes, on a computer. 
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor
 
 -ReturnType <i>string</i>
 The type of data to be returned. Valid values are:
 
 Object (the default)
 EPR
 ObjectAndEPR
 
 If Object is specified or if this parameter is not used, only objects are returned.
 If EPR (endpoint reference) is specified, only the endpoint references of the objects are returned.
 Endpoint references contain information about the resource URI and the selectors for the instance.
 If ObjectAndEPR is specified, both the object and its associated endpoint references are returned.
 
 -SelectorSet <i>hashtable</i>
 A set of value pairs that are used to select particular management resource instances.
 The SelectorSet parameter is used when more than one instance of the resource exists.
 The value of the SelectorSet parameter must be a hash table. 
 
 The following example shows how to enter a value for this parameter: 
 
 -SelectorSet @{Name=WinRM;ID=yyy}
 -SessionOption <i>hashtable</i>
 Define a set of extended options for the WS-Management session.
 Enter a SessionOption object that you create by using New-WSManSessionOption.
 -Shallow 
 Cause only instances of the base class that is specified in the resource URI to be returned.
 If this switch is not specified, instances of the base class that is specified in the URI
 and in all its derived classes will be returned.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used. 
 
 WS-Management encrypts all PowerShell content that is transmitted over the network.
 The UseSSL parameter lets you specify the additional protection of HTTPS instead of HTTP.
 This will fail if SSL is not available on the port that is used for the connection.
","https://ss64.com/ps/get-wsmaninstance.html","Enumeration, System Administration, Remote Connection",
"Set-WSManInstance","Modify the management information related to a resource."," Set-WSManInstance [-ApplicationName <i>string</i>] [-ComputerName <i>string</i>]
 [-Fragment <i>string</i>] [-Port <i>int</i>] [-UseSSL]
 <b>-ResourceURI <i>Uri</i></b> [[-SelectorSet] <i>hashtable</i>] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-Dialect <i>Uri</i>] [-FilePath <i>File</i>] 
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
 
 Set-WSManInstance [-ConnectionURI <i>Uri</i>] [-Fragment <i>string</i>]
 <b>-ResourceURI <i>Uri</i></b> [[-SelectorSet] <i>hashtable</i>] [-Authentication <i>AuthenticationMechanism</i>]
 [-Credential <i>PSCredential</i>] [-Dialect <i>Uri</i>] [-FilePath <i>File</i>]
 [-SessionOption <i>hashtable</i>] [-ValueSet <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI Uri
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified .
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User01, Domain01\User01, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
 -Dialect Uri
 The dialect to use in the filter predicate.
 Any dialect that is supported by the remote service.
 The following 3 aliases can be used for the dialect URI:
 
 - WQL http://schemas.microsoft.com/wbem/wsman/1/WQL 
 - Selector http://schemas.microsoft.com/wbem/wsman/1/wsman/SelectorFilter
 - Association http://schemas.dmtf.org/wbem/wsman/1/cimbinding/associationFilter
 -FilePath <i>File</i> The path of a file that is used to update a management resource.
 Specify the management resource with -ResourceURI and -SelectorSet.
 For example, the following command uses -FilePath:
 
 hash table.
","https://ss64.com/ps/set-wsmaninstance.html","System Administration, Remote Connection",
"Remove-WSManInstance","Delete a management resource instance."," Remove-WSManInstance [-ApplicationName <i>string</i>]
 [-ComputerName <i>string</i>] [-Port <i>int</i>] [-UseSSL] [[-SelectorSet] <i>hashtable</i>]
 [-AuthenticationMechanism <i>AuthenticationMechanism</i>] [-Credential <i>PSCredential</i>]
 [-OptionSet <i>hashtable</i>] [-ResourceURI <i>Uri</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]<br> <br> Remove-WSManInstance [-ConnectionURI <i>Uri</i>] [[-SelectorSet] <i>hashtable</i>]
 [-AuthenticationMechanism <i>AuthenticationMechanism</i>] [-Credential <i>PSCredential</i>]
 [-OptionSet <i>hashtable</i>] [-ResourceURI <i>Uri</i>]
 [-SessionOption <i>hashtable</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -ApplicationName <i>string</i>
 The application name in the connection. The default Application Name is &quot;WSMAN&quot;
 The complete identifier for the remote endpoint is in the following format:
 <i>transport</i>://<i>server</i>:<i>port</i>/<i>ApplicationName</i>
 For example:
 http://server64:8080/WSMAN
 IIS will forward requests with this endpoint to the specified application.
 This default setting of &quot;WSMAN&quot; is appropriate for most uses. This parameter
 is designed to be used when numerous computers establish remote connections to
 one computer that is running PowerShell.
 In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.
 -Authentication <i>Authentication</i>
 The authentication mechanism to be used at the server. Possible values are:
 
 - Basic Send username and password in clear text.
 - Default Use the authentication method implemented by WS-Management protocol. This is the default.
 - Digest Challenge-response scheme using a server-specified data string for the challenge.
 - Kerberos Authenticate by using Kerberos certificates.
 - Negotiate Challenge-response that negotiates an authentication scheme.
 e.g. Kerberos protocol or NTLM.
 - CredSSP Use Credential Security Service Provider (CredSSP) authentication, delegate
 credentials to a remote computer. This increases the security risk, if the remote 
 computer is compromised, the credentials could be used to control the network session.
 -ComputerName <i>string</i>
 The computer against which you want to run the management operation.
 A fully qualified domain name, NetBIOS name, or an IP address.
 Use the local computer name, localhost, or a dot (.) to specify the local computer.
 The local computer is the default. When the remote computer is in a different domain,
 use a fully qualified domain name. You can pipe a value for ComputerName.
 
 -ConnectionURI <i>Uri</i>
 The connection endpoint. The format of this string is: 
 
 <i>Transport</i>://<i>Server</i>:<i>Port</i>/<i>ApplicationName</i>. 
 
 The following string is a properly formatted value for this parameter: 
 
 http://Server01:8080/WSMAN. The URI must be fully qualified.
 
 -Credential <i>PSCredential</i>
 A user account that has permission to perform this action. default=current user.
 e.g. User64, Domain64\User64, or User@Domain.com. Or a PSCredential object, such as 
 returned by the Get-Credential cmdlet.
 When you type a user name, you will be prompted for a password.
 -OptionSet <i>hashtable</i>
 Pass a set of switches to the service to modify or refine the nature of the request.
 These are similar to switches used in command-line shells in that they are service specific.
 Any number of options can be specified. 
 
 The following example demonstrates the syntax that passes the values 1, 2, and 3 for
 the a, b, and c parameters:
 
 -OptionSet @{a=1;b=2;c=3}
 -Port <i>int</i>
 The port to use when the client connects to the WinRM service.
 When the transport is HTTP, the default port is 80.
 When the transport is HTTPS, the default port is 443.
 When you use HTTPS as the transport, the value of the -ComputerName parameter must match the server's 
 certificate common name (CN). However, if the SkipCNCheck parameter is specified as 
 part of the SessionOption parameter, then the certificate common name of the server does not have 
 to match the host name of the server. The SkipCNCheck parameter should be used only for trusted
 computers.
 
 -ResourceURI <i>Uri</i>
 The Uniform Resource Identifier (URI) of the resource class or instance.
 The URI is used to identify a specific type of resource, such as disks or processes, on a computer. 
 
 A URI consists of a prefix and a path to a resource. For example: 
 
 http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
 http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor
 
 -SelectorSet <i>hashtable</i>
 A set of value pairs that are used to select particular management resource instances.
 The SelectorSet parameter is used when more than one instance of the resource exists.
 The value of the SelectorSet parameter must be a hash table. 
 
 The following example shows how to enter a value for this parameter: 
 
 -SelectorSet @{Name=WinRM;ID=yyy}
 -SessionOption <i>hashtable</i>
 Define a set of extended options for the WS-Management session.
 Enter a SessionOption object that you create by using New-WSManSessionOption.
 -UseSSL
 Use the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer.
 By default, SSL is not used. 
 
 WS-Management encrypts all PowerShell content that is transmitted over the network.
 The UseSSL parameter lets you specify the additional protection of HTTPS instead of HTTP.
 This will fail if SSL is not available on the port that is used for the connection.
","https://ss64.com/ps/remove-wsmaninstance.html","System Administration, Remote Connection",
"Set-WSManQuickConfig","Configure the local computer for remote management."," Set-WSManQuickConfig [-UseSSL] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -UseSSL 
 Use the Secure Sockets Layer (SSL) protocol to establish a
 connnection to the remote computer. By default, SSL is not used. 
 
 WS-Management encrypts all Windows PowerShell content transmitted
 over the network. Adding the protection of HTTPS requires that
 SSL is available on the port used for the connection.
","https://ss64.com/ps/set-wsmanquickconfig.html","System Administration, Remote Connection",
"New-WSManSessionOption","Options for WSMan commands."," New-WSManSessionOption [-NoEncryption] [-OperationTimeout <i>Int32</i>]
 [-ProxyAccessType P<i>roxyAccessType</i>] [-ProxyAuthentication <i>ProxyAuthentication</i>]
 [-ProxyCredential <i>PSCredential</i>] [-SkipCACheck] [-SkipCNCheck]
 [-SkipRevocationCheck] [-SPNPort <i>Int32</i>] [-UseUTF16] [<i><a href=""common.html"">CommonParameters</a></i>]
 
"," -NoEncryption
 Do not use encryption when doing remote operations over HTTP.
 Unencrypted traffic is not allowed by default and must be enabled in the local configuration.
 -OperationTimeout <i>Int32</i>
 The timeout in milliseconds for the WS-Management operation.
 
 -ProxyAccessType <i>ProxyAccessType</i>
 Specifies the mechanism by which the proxy server is located.
 Possible values are:
 
 ProxyIEConfig - Use the Internet Explorer proxy configuration for the current user.
 This is the default setting.
 
 ProxyWinHttpConfig - The WSMan client uses the proxy settings configured for WinHTTP,
 using the ProxyCfg.exe utility.
 
 ProxyAutoDetect - Force auto-detection of a proxy server.
 
 ProxyNoProxyServer - Do not use a proxy server.
 All all host names will be resolved locally.
 -ProxyAuthentication <i>string</i>
 The authentication method to use at the proxy.
 Possible values are:
 Basic The user name and password are sent in clear-text.
 Digest A challenge-response scheme that uses a server-specified
 data string for the challenge.
 <u>Negotiate</u> A challenge-response scheme that negotiates with the server
 or proxy to determine which scheme to use for authentication.(default)
 Examples are the Kerberos protocol and NTLM.
 -ProxyCredential <i>PSCredential</i>
 Specifies a user account that has permission to gain access through an intermediate web proxy.
 -SPNPort <i>Int32</i>
 Specifies a port number to append to the connection Service Principal Name <i>SPN</i> of the
 remote server. An SPN is used when the authentication mechanism is Kerberos or Negotiate.
 -SkipCACheck
 Do not validate that the server certificate is signed by a trusted certificate
 authority (CA) when connecting over HTTPS. Use this option only when the remote
 computer is trusted by other means, for example, if the remote computer is part
 of a network that is physically secure and isolated or the remote computer is
 listed as a trusted host in the WS-Management configuration.
 -SkipCNCheck
 Specifies that the certificate common name (CN) of the server does not need to
 match the hostname of the server. This is used only in remote operations using HTTPS.
 This option should only be used for trusted computers.
 -SkipRevocationCheck
 Do not validate the revocation status on the server certificate.
 -SPNPort <i>int</i>
 A port number to append to the connection Service Principal Name <i>SPN</i> 
 of the remote server. An SPN is used with Kerberos or Negotiate authentication.
 -UseUTF16
 Encode the request in UTF16 format rather than UTF8 format. The default is UTF8 encoding.
","https://ss64.com/ps/new-wsmansessionoption.html","System Administration, Remote Connection",
"Zipfile","Compress or Extract zip files."," New-Zipfile [-ZipFilePath] <i>object</i> [-InputObject] <i>string</i>[]
 [-Append] [-compression {Optimal | Fastest | nocompression}] [<i><a href=""common.html"">CommonParameters</a></i>]
 key
 <pre>Syntax
 Expand-ZipFile [-FilePath] <i>Object</i> [[-OutputPath] <i>Object</i>] [-Force] [<i><a href=""common.html"">CommonParameters</a></i>]
"," -FilePath The path of the zip file that needs to be extracted.
 -OutputPath The path where we want the output folder to end up.
 -Force Name the resulting folder the same as the archive.
 CommonParameters:
 -Verbose, -Debug, -ErrorAction, -ErrorVariable, -WarningAction, -WarningVariable,
 -OutBuffer, -PipelineVariable, -OutVariable.
","https://ss64.com/ps/zip.html","File Manipulation","Compression"
"#","Comment / Remark.","Not Available","Not Available","https://ss64.com/ps/syntax-comments.html","System Utility",
".","Run a command script in the current shell."," . <var>filename</var> [<var>arguments</var>]
 .{ <i>scriptblock</i> } 
"," filename The path and filename of the script to run.
 arguments Any arguments for the script.
","https://ss64.com/ps/source.html","System Utility","Command Execution"
"&","Run a command, script or function."," <b>&amp;</b> &quot;[<i>path</i>] <i>command&quot;</i> [<i>arguments</i>] [ <b>&amp;</b> ]
 <span class=""body"">A trailing ampersand will run <i>command</i> as a background job and return a <a href=""start-job.html"">job</a> object.</span>
 Key:
 <a href=""syntax-operators.html"">PowerShell Operators</a> - SubExpressions Syntax.<br>
"," <i>command</i> An executable filename (.exe), script or function.
 <i>arguments</i> Any argument(s) to be passed to the called command.
 If more than one, pass as an array of strings.
","https://ss64.com/ps/call.html","System Utility","Command Execution"
"--%","Stop parsing input."," ForEach-Object [-process] <i>ScriptBlock</i>[] [-inputObject <i>psobject</i>]
 [-begin <i>scriptblock</i>] [-end <i>scriptblock</i>] [-Parallel] [-ThrottleLimit <i>n</i>] [<i><a href=""common.html"">CommonParameters</a></i>]
","Not Available","https://ss64.com/ps/stop-parsing.html","System Utility","Command Execution"
"Add-BitsFile","Add one or more files to an existing Background Intelligent Transfer Service (BITS) transfer job","Add-BitsFile [-BitsJob] BitsJob[] [-Source] string[] [[-Destination] string[]][-Confirm] [-WhatIf] [CommonParameters]","-BitsJob BitsJob
        The BITS transfer job(s) to which you want to add files.
        Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.     
-Destination string
        The destination location and the names of the files to be transferred.
        The destination names are paired with the corresponding source file names.
        For example, the first file name specified in the -Source parameter corresponds to the first file name in the -Destination parameter, and the second file name in the -Source parameter corresponds to the second file name in the -Destination parameter.
        The -Source and -Destination parameters must have the same number of elements.     
-Source string
        The source location and the names of the files to be transferred.
        The source file names are paired with the corresponding destination file names.
        For example, the first file name specified in the -Source parameter corresponds to the first file name in the -Destination parameter, and the second file name in the -Source parameter corresponds to the second file name in the -Destination parameter.
        The -Source and -Destination parameters must have the same number of elements. You can use standard wildcard characters such as the asterisk (*) and the question mark (?), or you can use a range operator such as ""[a-r]"".     
-Confirm
        Prompt for confirmation before executing the command.     
-WhatIf
        Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/add-bitsfile.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Complete-BitsTransfer","Complete a Background Intelligent Transfer Service (BITS) transfer job.","Complete-BitsTransfer [-BitsJob] BitsJob[] [-Confirm] [-WhatIf] [CommonParameters]","-BitsJob BitsJob
        The BITS transfer job(s) to complete.
        Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.     
-Confirm
        Prompt for confirmation before executing the command.     
-WhatIf
        Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/complete-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Get-BitsTransfer","Retrieve the associated BitsJob object for an existing Background Intelligent Transfer Service (BITS) transfer job.","Get-BitsTransfer [[-Name] string[]] [-AllUsers] [CommonParameters]        
Get-BitsTransfer [-JobId] Guid[] [CommonParameters]","-AllUsers
        Return BITS transfer jobs that are owned by all users.
        If this parameter is not specified, only jobs that are owned by the current user are returned. This parameter requires administrative credentials.     
-JobId Guid
        Filter the returned BITS jobs by job ID.
        Only the BITS jobs that include a job ID in this array are returned.
        If BitsJob objects are piped to this cmdlet, their job IDs are used as the values of this parameter.     
-Name string
        Filter the returned BITS jobs based on job name.
        Only BITS jobs with job names that match a name in this array are returned.
        Accepts standard wildcard characters asterisk (*) and question mark (?).
        Or use a range operator such as ""[a-r]"".","https://ss64.com/ps/get-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Remove-BitsTransfer","Cancel a Background Intelligent Transfer Service (BITS) transfer job.","Remove-BitsTransfer [-BitsJob] BitsJob[][-Confirm] [-WhatIf] [CommonParameters]
","-BitsJob BitsJob
        The BITS transfer job(s) to complete.
        Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.     
-Confirm
        Prompt for confirmation before executing the command.     
-WhatIf
        Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/remove-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Resume-BitsTransfer","Resume a Background Intelligent Transfer Service (BITS) transfer job.","Resume-BitsTransfer [-BitsJob] BitsJob[] [-Asynchronous] [-Confirm] [-WhatIf] [CommonParameters]","-BitsJob BitsJob
        The BITS transfer job(s) to complete.
        Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.     
-Asynchronous
       Allow the BITS transfer job to be processed in the background.
       The command prompt reappears immediately after the BITS transfer job is resumed.
       The returned BitsJob object can be used to monitor job status and progress.
-Confirm
        Prompt for confirmation before executing the command.     
-WhatIf
        Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/resume-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Set-BitsTransfer","Modify the properties of an existing Background Intelligent Transfer Service (BITS) transfer job.","Set-BitsTransfer [-BitsJob] BitsJob[]
         [-Authentication string] [-Credential PSCredential]
            [-Description string] [-DisplayName string] [-Priority string]
               [-ProxyAuthentication string] [-ProxyBypass string[]]
                  [-ProxyCredential PSCredential] [-ProxyList Uri[]]
                     [-ProxyUsage string] [-RetryInterval int] [-RetryTimeout int]
                        [-SetOwnerToCurrentUser] 
                           [-Confirm] [-WhatIf] [CommonParameters]","-BitsJob BitsJob[]
       The BITS transfer job(s) to modify.
       Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.

   -Authentication string
       The authentication mechanism to be used at the server.
       Possible values:
         Basic      Send the username and password in clear text to the server or proxy.
         Digest     A challenge-response scheme using a server-specified data string.
         NTLM       A challenge-response scheme using the Windows credentials of the
                    user for domain authentication.
         Negotiate  A challenge-response scheme that negotiates with the server or proxy to
                    determine which scheme to use. For example: Kerberos or NTLM.
         Passport   Use Windows Live ID as the authentication mechanism (live.com).

   -Credential PSCredential
       The credentials to use to authenticate the user at the server.
       The default is the current user. Type a user name, such as ""User64"", ""Domain64\User64""
       or ""User@example.com"". Or use Get-Credential to create the value for this parameter.
       When you type a user name, you will be prompted for a password.

   -Description string
       Up to 1024 characters.

   -DisplayName string
       The display name provides a user-friendly way to differentiate BITS transfer jobs.

   -Priority string
       Set the priority of the BITS transfer job, which affects bandwidth usage.
       Background transfers use the idle network bandwidth of the client computer to transfer files.
       valid values:
        Foreground Transfer the job in the foreground. (highest priority)
                   Foreground transfers compete for network bandwidth with other applications,
                   which can impede the user's overall network experience.
                   However, if Start-BitsTransfer is being used interactively, this is likely the best option.

        High       Transfer the job in the background with a high priority.              
        Normal     Transfer the job in the background with a normal priority. 
        Low        Transfer the job in the background with a low priority.(lowest priority)

   -ProxyAuthentication string
       The authentication mechanism to be used at the server.
       Possible values:
         Basic      Send the username and password in clear text to the server or proxy.
         Digest     A challenge-response scheme using a server-specified data string.
         NTLM       A challenge-response scheme using the Windows credentials of the
                    user for domain authentication.
         Negotiate  A challenge-response scheme that negotiates with the server or proxy to
                    determine which scheme to use. For example: Kerberos or NTLM.
         Passport   Use Windows Live ID as the authentication mechanism (live.com).

   -ProxyBypass string[]
       A list of host names to use for a direct connection.
       The hosts in the list are tried in order until a successful connection is achieved.
       Specifying this parameter bypasses the proxy.
       If this parameter is used, the -ProxyUsage parameter must be set to Override.

   -ProxyCredential PSCredential
       The credentials to use to authenticate the user at the proxy. 
       Use Get-Credential to create a value for this parameter.

   -ProxyList Uri[]
       A list of proxies to use.
       The proxies in the list are tried in order until a successful connection is achieved.
       If this parameter is used, the -ProxyUsage parameter must be set to Override.

   -ProxyUsage string
       The proxy usage settings. Possible values:
          SystemDefault Use the system default proxy settings.
          NoProxy       Do not use a proxy to transfer the files.
                        Use this option to transfer files within a local area network (LAN).
          AutoDetect    Automatically detect proxy settings.
                        BITS detects proxy settings for each file in the job.
          Override      Specify the proxies or servers to use.
                        If the -ProxyList parameter is also specified, the proxies in that list are used.
                        If the -ProxyBypass parameter is also specified, the servers in that list are used.
                        In both cases, the first member of the list is used. If the first member is
                        unreachable, the subsequent members are tried until a member is contacted successfully.

   -RetryInterval int
       The minimum length of time, in seconds, that BITS waits before trying to transfer the file
       after BITS encounters a transient error.
       The minimum allowed value is 60 seconds. If this value exceeds the RetryTimeout value from
       the BitsJob object, BITS will not retry the transfer. Instead, BITS sets the state of the
       BITS transfer job to the Error state.  The default is 600 seconds (10 minutes).

   -RetryTimeout int
       The length of time, in seconds, that BITS tries to transfer the file after the first
       transient error occurs. Setting the retry period to 0 prevents retries.
       If the retry period value exceeds the JobInactivityTimeout Group Policy setting (90-day default),
       BITS cancels the job.  The default value is 1,209,600 seconds (14 days).

   -SetOwnerToCurrentUser
       Set the owner of the BITS transfer job to the current user.

   -Confirm
       Prompt for confirmation before executing the command.

   -WhatIf
       Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/set-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Start-BitsTransfer","Create a new Background Intelligent Transfer Service (BITS) transfer job.","Set-BitsTransfer [-BitsJob] BitsJob[]
         [-Authentication string] [-Credential PSCredential]
            [-Description string] [-DisplayName string] [-Priority string]
               [-ProxyAuthentication string] [-ProxyBypass string[]]
                  [-ProxyCredential PSCredential] [-ProxyList Uri[]]
                     [-ProxyUsage string] [-RetryInterval int] [-RetryTimeout int]
                        [-SetOwnerToCurrentUser] 
                           [-Confirm] [-WhatIf] [CommonParameters]","-BitsJob BitsJob[]
       The BITS transfer job(s) to modify.
       Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.

-Authentication string
       The authentication mechanism to be used at the server.
       Possible values:
         Basic      Send the username and password in clear text to the server or proxy.
         Digest     A challenge-response scheme using a server-specified data string.
         NTLM       A challenge-response scheme using the Windows credentials of the
                    user for domain authentication.
         Negotiate  A challenge-response scheme that negotiates with the server or proxy to
                    determine which scheme to use. For example: Kerberos or NTLM.
         Passport   Use Windows Live ID as the authentication mechanism (live.com).

-Credential PSCredential
       The credentials to use to authenticate the user at the server.
       The default is the current user. Type a user name, such as ""User64"", ""Domain64\User64""
       or ""User@example.com"". Or use Get-Credential to create the value for this parameter.
       When you type a user name, you will be prompted for a password.

-Description string
       Up to 1024 characters.

-DisplayName string
       The display name provides a user-friendly way to differentiate BITS transfer jobs.

-Priority string
       Set the priority of the BITS transfer job, which affects bandwidth usage.
       Background transfers use the idle network bandwidth of the client computer to transfer files.
       valid values:
        Foreground Transfer the job in the foreground. (highest priority)
                   Foreground transfers compete for network bandwidth with other applications,
                   which can impede the user's overall network experience.
                   However, if Start-BitsTransfer is being used interactively, this is likely the best option.

        High       Transfer the job in the background with a high priority.              
        Normal     Transfer the job in the background with a normal priority. 
        Low        Transfer the job in the background with a low priority.(lowest priority)

   -ProxyAuthentication string
       The authentication mechanism to be used at the server.
       Possible values:
         Basic      Send the username and password in clear text to the server or proxy.
         Digest     A challenge-response scheme using a server-specified data string.
         NTLM       A challenge-response scheme using the Windows credentials of the
                    user for domain authentication.
         Negotiate  A challenge-response scheme that negotiates with the server or proxy to
                    determine which scheme to use. For example: Kerberos or NTLM.
         Passport   Use Windows Live ID as the authentication mechanism (live.com).

   -ProxyBypass string[]
       A list of host names to use for a direct connection.
       The hosts in the list are tried in order until a successful connection is achieved.
       Specifying this parameter bypasses the proxy.
       If this parameter is used, the -ProxyUsage parameter must be set to Override.

   -ProxyCredential PSCredential
       The credentials to use to authenticate the user at the proxy. 
       Use Get-Credential to create a value for this parameter.

   -ProxyList Uri[]
       A list of proxies to use.
       The proxies in the list are tried in order until a successful connection is achieved.
       If this parameter is used, the -ProxyUsage parameter must be set to Override.

   -ProxyUsage string
       The proxy usage settings. Possible values:
          SystemDefault Use the system default proxy settings.
          NoProxy       Do not use a proxy to transfer the files.
                        Use this option to transfer files within a local area network (LAN).
          AutoDetect    Automatically detect proxy settings.
                        BITS detects proxy settings for each file in the job.
          Override      Specify the proxies or servers to use.
                        If the -ProxyList parameter is also specified, the proxies in that list are used.
                        If the -ProxyBypass parameter is also specified, the servers in that list are used.
                        In both cases, the first member of the list is used. If the first member is
                        unreachable, the subsequent members are tried until a member is contacted successfully.

   -RetryInterval int
       The minimum length of time, in seconds, that BITS waits before trying to transfer the file
       after BITS encounters a transient error.
       The minimum allowed value is 60 seconds. If this value exceeds the RetryTimeout value from
       the BitsJob object, BITS will not retry the transfer. Instead, BITS sets the state of the
       BITS transfer job to the Error state.  The default is 600 seconds (10 minutes).

   -RetryTimeout int
       The length of time, in seconds, that BITS tries to transfer the file after the first
       transient error occurs. Setting the retry period to 0 prevents retries.
       If the retry period value exceeds the JobInactivityTimeout Group Policy setting (90-day default),
       BITS cancels the job.  The default value is 1,209,600 seconds (14 days).

   -SetOwnerToCurrentUser
       Set the owner of the BITS transfer job to the current user.

   -Confirm
       Prompt for confirmation before executing the command.

   -WhatIf
       Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/start-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
"Suspend-BitsTransfer","Suspend a Background Intelligent Transfer Service (BITS) transfer job.","Suspend-BitsTransfer [-BitsJob] BitsJob[]
         [-Confirm] [-WhatIf] [CommonParameters]
","-BitsJob BitsJob[]
       The BITS transfer job(s) to suspend.
       Pipe a value to this parameter from other cmdlets that return BitsJob objects, such as Get-BitsTransfer.
-Confirm
       Prompt for confirmation before executing the command.
-WhatIf
       Describe what would happen if you executed the command, without actually executing the command.","https://ss64.com/ps/suspend-bitstransfer.html","System Utility, Remote Connection","BITS, Windows Update, SUS, SMS, Google Gears, AppSense"
